<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Docker安装OSX</title>
      <link href="/2021/07/15/docker-osx/"/>
      <url>/2021/07/15/docker-osx/</url>
      
        <content type="html"><![CDATA[<p>因为工作关系，需要使用一些MACOS系统的电脑用作服务器，所以尝试下在ubuntu环境下使用docker安装macox。中间经历坑无数，特记录一下。</p><p>官方资料有介绍怎么安装，英语较好的同学可以直接查看官方文档。</p><p><a href="https://hub.docker.com/r/sickcodes/docker-osx">https://hub.docker.com/r/sickcodes/docker-osx</a></p><p><a href="https://github.com/sickcodes/Docker-OSX">https://github.com/sickcodes/Docker-OSX</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>准备以下工具或环境。</p><ul><li>一个工作电脑，可以用来上网查资料，最好同时具备科学上网能力，我使用的是MacBook Pro。</li><li>一个安装好ubuntu系统的电脑，安装必要的工具，同时修改相应的APT源。建议配置较好，至少8G内存，200G。我的是Intel Core i7、内存32G、磁盘4T。</li></ul><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/1.png" alt="Ubuntu"></p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/2.png" alt="MacBook Pro"></p><p>安装好Ubuntu系统后，工作电脑可以使用ssh远程登录到ubuntu。</p><p>如果有多个显示器、键盘鼠标，当然最好，可以很容操作2台电脑。如果没有这个条件，需要在Ubuntu上开启vnc功能，工作电脑可以需要远程桌面到Ubuntu。因为我用的是Ubuntu 20.04，可以很容易的开启，其他版本可以网络查询相关资料。</p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/3.png" alt="ssh &amp; vnc"></p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/3-1.png" alt="ssh &amp; vnc"></p><p>Ubuntu电脑需要CPU支持虚拟化，否则无法使用。重启电脑，进入bios设置，以下为我这边的，不同电脑可能会不一样。</p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/4.jpg" alt="VTx &amp; VTd"></p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>Ubuntu 安装docker还是比较简单，可以网上找资料，安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">curl -fsSL https:&#x2F;&#x2F;get.docker.com | bash -s docker --mirror Aliyun<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时修改Docker源，添加<code>/etc/docker/daemon.json</code>文件。</p><pre class="line-numbers language-none"><code class="language-none">&#123;  &quot;registry-mirrors&quot;: [    &quot;https:&#x2F;&#x2F;ujkcpy2m.mirror.aliyuncs.com&quot;  ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新加载并刷新</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>首先拉取Docker镜像，先拉取后面安装会快些，镜像比较大，如果发现网络不好，建议开梯子。</p><p>官方提供2个版本，一个是<code>latest</code>，对应的是<code>Catalina</code>，另一个是<code>big-sur</code>，我这边使用的就是<code>big-sur</code>。</p><pre class="line-numbers language-none"><code class="language-none">sudo docker pull sickcodes&#x2F;docker-osx:big-sursudo docker pull sickcodes&#x2F;docker-osx:naked<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装OSX"><a href="#安装OSX" class="headerlink" title="安装OSX"></a>安装OSX</h2><p> 安装必要软件，这里官网都有介绍，直接复制即可。</p><blockquote><p>Before you do anything else, you will need to turn on hardware virtualization in your BIOS. Precisely how will depend on your particular machine (and BIOS), but it should be straightforward.</p><p>Then, you’ll need QEMU and some other dependencies on your host:</p></blockquote><pre class="line-numbers language-none"><code class="language-none"># ARCHsudo pacman -S qemu libvirt dnsmasq virt-manager bridge-utils flex bison iptables-nft edk2-ovmf# UBUNTU DEBIANsudo apt install qemu qemu-kvm libvirt-clients libvirt-daemon-system bridge-utils virt-manager libguestfs-tools# CENTOS RHEL FEDORAsudo yum install libvirt qemu-kvm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Then, enable libvirt and load the KVM kernel module:</p></blockquote><pre class="line-numbers language-none"><code class="language-none">sudo systemctl enable --now libvirtdsudo systemctl enable --now virtlogdecho 1 | sudo tee &#x2F;sys&#x2F;module&#x2F;kvm&#x2F;parameters&#x2F;ignore_msrssudo modprobe kvm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动Docker镜像，我这里安装的是<code>big-sur</code>。</p><pre class="line-numbers language-none"><code class="language-none">sudo docker run -it \    --device &#x2F;dev&#x2F;kvm \    -p 50922:10022 \    -v &#x2F;tmp&#x2F;.X11-unix:&#x2F;tmp&#x2F;.X11-unix \    -e &quot;DISPLAY&#x3D;$&#123;DISPLAY:-:0.0&#125;&quot; \    -e GENERATE_UNIQUE&#x3D;true \    -e MASTER_PLIST_URL&#x3D;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;sickcodes&#x2F;osx-serial-generator&#x2F;master&#x2F;config-custom.plist \    sickcodes&#x2F;docker-osx:big-sur<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意:</strong> 因为需要访问github，如果超时或者访问失败建议开启梯子试试。</p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/5.png" alt="安装"></p><p>选择磁盘</p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/6.png" alt="安装"></p><p>进入界面</p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/6-1.png" alt="安装"></p><p>选择磁盘工具进行格式化</p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/6-2.png" alt="安装"></p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/6-3.png" alt="安装"></p><p>关闭窗口选择安装选项，选择同意，然后就是漫长的等待时间。</p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/6-4.png" alt="安装"></p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/6-5.png" alt="安装"></p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/6-6.png" alt="安装"></p><p>中间会重启几次，记得每次选项原先格式化的磁盘</p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/7.png" alt="安装"></p><p>经过漫长的等待，终于进入到欢迎页面，选择对应的时区语言，设置自己的账号就可以进入系统了。</p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/7-1.png" alt="安装"></p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/7-2.png" alt="安装"></p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/7-3.png" alt="安装"></p><p>到此系统安装就已经成功。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><h3 id="如何重启系统"><a href="#如何重启系统" class="headerlink" title="如何重启系统?"></a>如何重启系统?</h3><p>因为我这个是使用docker来启动的，后面如果保留并重启系统呢？</p><p>首先回到原先的启动终端，直接中断命令，系统会自动关闭。</p><p>然后查看docker的容器ID，使用如下命令，然后每次启动时候直接指定当前的容器ID即可。</p><pre class="line-numbers language-none"><code class="language-none">sudo docker ps -a# xxx 为对应的CONTAINER IDsudo docker start -ai xxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/8.png" alt="启动"></p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/8-1.png" alt="启动"></p><h3 id="如何移植Docker镜像"><a href="#如何移植Docker镜像" class="headerlink" title="如何移植Docker镜像?"></a>如何移植Docker镜像?</h3><p>当前在本地电脑已经可以了，docker是可以移植的，那么如果在其他电脑运行？</p><p>官方有说明的，在docker目录找到对应的镜像文件，然后备份这个文件。</p><pre class="line-numbers language-none"><code class="language-none">sudo find &#x2F;var&#x2F;lib&#x2F;docker -size +10G | grep mac_hdd_ng.img<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个文件很大，我这边大概30G。</p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/9.png" alt="启动"></p><p>使用<code>naked</code>启动，同时附上备份的文件，添加参数<code>-e RAM=20</code>，这个表示虚拟系统使用的内存大小，可以根据自己的硬件环境选择合适的大小。</p><pre class="line-numbers language-none"><code class="language-none">sudo docker run -it \    --device &#x2F;dev&#x2F;kvm \    -p 50922:10022 \    -v &quot;$&#123;PWD&#125;&#x2F;mac_hdd_ng.img:&#x2F;image&quot; \    -v &#x2F;tmp&#x2F;.X11-unix:&#x2F;tmp&#x2F;.X11-unix \    -e &quot;DISPLAY&#x3D;$&#123;DISPLAY:-:0.0&#125;&quot; \    -e &quot;NOPICKER&#x3D;false&quot; \    -e RAM&#x3D;20 \    sickcodes&#x2F;docker-osx:naked<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/9-2.png" alt="启动"></p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/9-3.png" alt="启动"></p><p>启动后，系统显示内存大约为20G。</p><p><img src="https://github.com/LiushuiXiaoxia/docker-osx/raw/main/images/9-4.png" alt="启动"></p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p><a href="https://hub.docker.com/r/sickcodes/docker-osx">DOCKER OSX</a></p><p><a href="https://github.com/sickcodes/Docker-OSX">DOCKER OSX Github</a></p><p><a href="https://github.com/LiushuiXiaoxia/docker-osx">使用Docker安装OSX</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 黑苹果 </tag>
            
            <tag> OSX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zstd 压缩算法</title>
      <link href="/2021/06/30/zstd/"/>
      <url>/2021/06/30/zstd/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近维护一个老的缓存系统，使用RUST语音实现，底层使用磁盘缓存。因为人员离职，打算用<code>JAVA</code>/<code>KOTLIN</code> 重新实现一遍。</p><p>考虑到历史缓存数量比较大，采用灰度模式，复用历史缓存，只是程序改成JAVA版本。刚刚开始一切比较顺利，但是上线以后显示历史缓存错误，比如hash不一样。</p><p>仔细翻看历史代码，底部存储使用了一种叫做<code>zstd</code>的一种压缩算法，找找资料，发现这个还挺牛的，特记录下。</p><p>Zstd，全称 Zstandard，是 Facebook 于 2016 年开源的新无损压缩算法。与 zlib、lz4、xz 等当前流行的压缩算法不同，Zstd 寻求一种压缩性能与压缩率通吃的方案，而实际上它也确实做到了。在由官方所列出的表格中，可以看到，Zstd 不仅具备优秀的压缩性能，在压缩率上也有非常亮眼的表现。<a href="https://facebook.github.io/zstd/">官方资料</a>。</p><h2 id="Zstd-jni"><a href="#Zstd-jni" class="headerlink" title="Zstd-jni"></a>Zstd-jni</h2><p>Zstd-jni，顾名思义，是基于 Zstd 本地库实现的 Java 调用接口。它支持通过 Java 语言实现 Zstd 的压缩与解压缩。</p><p>在 Zstd-jni 的三方包中，主要实现了以下功能：</p><ul><li>提供静态的压缩与解压缩方法</li><li>支持压缩数据的流式传输</li><li>支持字典文件的训练与添加</li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>添加依赖</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">// https://github.com/luben/zstd-jni</span><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string gstring">"com.github.luben:zstd-jni:1.4.9-5"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>读取历史文件，解压数据，写入到新文件。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">convertOldToNew</span><span class="token punctuation">(</span>file<span class="token operator">:</span> File<span class="token punctuation">,</span> path<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> File <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> src <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">inputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">&#123;</span> it<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token comment">// 真坑，还要给大小</span>    <span class="token keyword">val</span> size <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">&#123;</span>        src<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> <span class="token number">10_000</span> <span class="token operator">-></span> src<span class="token punctuation">.</span>size <span class="token operator">*</span> <span class="token number">2</span>        src<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> <span class="token number">100_000</span> <span class="token operator">-></span> src<span class="token punctuation">.</span>size <span class="token operator">*</span> <span class="token number">3</span>        <span class="token keyword">else</span> <span class="token operator">-></span> src<span class="token punctuation">.</span>size <span class="token operator">*</span> <span class="token number">4</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">val</span> dst <span class="token operator">=</span> <span class="token function">ByteArray</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>    <span class="token keyword">val</span> len <span class="token operator">=</span> Zstd<span class="token punctuation">.</span><span class="token function">decompress</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> src<span class="token punctuation">)</span>    <span class="token keyword">val</span> newFile <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">cacheDirFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">&#123;</span> parentFile<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    newFile<span class="token punctuation">.</span><span class="token function">outputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">&#123;</span> it<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"convert old <span class="token interpolation variable">$file</span> >>> <span class="token interpolation variable">$newFile</span>, <span class="token interpolation variable">$len</span> / <span class="token interpolation"><span class="token delimiter variable">$&#123;</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">&#125;</span></span>"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> newFile<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Zstd Java Sdk 的版本就比较坑了，解压的时候，还需要给出大小。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zstd </tag>
            
            <tag> 压缩算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker快速删除</title>
      <link href="/2020/01/14/docker-remove/"/>
      <url>/2020/01/14/docker-remove/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker快速删除"><a href="#Docker快速删除" class="headerlink" title="Docker快速删除"></a>Docker快速删除</h1><hr><h2 id="Docker删除无效的容器"><a href="#Docker删除无效的容器" class="headerlink" title="Docker删除无效的容器"></a>Docker删除无效的容器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token function">ps</span> -a <span class="token operator">|</span> <span class="token function">grep</span> Exited <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span> <span class="token operator">|</span> <span class="token function">xargs</span> docker <span class="token function">rm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Docker删除无用镜像"><a href="#Docker删除无用镜像" class="headerlink" title="Docker删除无用镜像"></a>Docker删除无用镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker images <span class="token operator">|</span> <span class="token function">grep</span> none <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $3&#125;'</span> <span class="token operator">|</span> <span class="token function">xargs</span> docker rmi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="停用全部运行中的容器"><a href="#停用全部运行中的容器" class="headerlink" title="停用全部运行中的容器"></a>停用全部运行中的容器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker stop <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -q<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="删除全部容器"><a href="#删除全部容器" class="headerlink" title="删除全部容器"></a>删除全部容器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -aq<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="停用并删除容器"><a href="#停用并删除容器" class="headerlink" title="停用并删除容器"></a>停用并删除容器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker stop <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -q<span class="token variable">)</span></span> <span class="token operator">&amp;</span> docker <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -aq<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 命令报错</title>
      <link href="/2019/12/02/hexo-error/"/>
      <url>/2019/12/02/hexo-error/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-命令报错"><a href="#Hexo-命令报错" class="headerlink" title="Hexo 命令报错"></a>Hexo 命令报错</h1><hr><p>好友没有写博客了，今天Hexo，发现命令不可用，出现这样的错误<code>TypeError: Cannot read property &#39;replace&#39; of null</code>。</p><span id="more"></span><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo gINFO  Start processingINFO  Files loaded <span class="token keyword">in</span> <span class="token number">627</span> msERROR Render HTML failed: page/2/index.htmlTypeError: Cannot <span class="token builtin class-name">read</span> property <span class="token string">'replace'</span> of null    at Hexo.externalLinkFilter <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/hexo/lib/plugins/filter/after_render/external_link.js:45:15<span class="token punctuation">)</span>    at Hexo.tryCatcher <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/util.js:16:23<span class="token punctuation">)</span>    at Hexo.<span class="token operator">&lt;</span>anonymous<span class="token operator">></span> <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/method.js:15:34<span class="token punctuation">)</span>    at /Users/xiaqiulei/Documents/blog/node_modules/hexo/lib/extend/filter.js:60:50    at tryCatcher <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/util.js:16:23<span class="token punctuation">)</span>    at Object.gotValue <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/reduce.js:155:18<span class="token punctuation">)</span>    at Object.gotAccum <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/reduce.js:144:25<span class="token punctuation">)</span>    at Object.tryCatcher <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/util.js:16:23<span class="token punctuation">)</span>    at Promise._settlePromiseFromHandler <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/promise.js:512:31<span class="token punctuation">)</span>    at Promise._settlePromise <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/promise.js:569:18<span class="token punctuation">)</span>    at Promise._settlePromiseCtx <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/promise.js:606:10<span class="token punctuation">)</span>    at _drainQueueStep <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/async.js:142:12<span class="token punctuation">)</span>    at _drainQueue <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/async.js:131:9<span class="token punctuation">)</span>    at Async._drainQueues <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/async.js:147:5<span class="token punctuation">)</span>    at Immediate.Async.drainQueues <span class="token punctuation">[</span>as _onImmediate<span class="token punctuation">]</span> <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/async.js:17:14<span class="token punctuation">)</span>    at processImmediate <span class="token punctuation">(</span>internal/timers.js:439:21<span class="token punctuation">)</span>ERROR Cannot <span class="token builtin class-name">read</span> property <span class="token string">'replace'</span> of nullTypeError: Cannot <span class="token builtin class-name">read</span> property <span class="token string">'replace'</span> of null    at Hexo.externalLinkFilter <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/hexo/lib/plugins/filter/after_render/external_link.js:45:15<span class="token punctuation">)</span>    at Hexo.tryCatcher <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/util.js:16:23<span class="token punctuation">)</span>    at Hexo.<span class="token operator">&lt;</span>anonymous<span class="token operator">></span> <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/method.js:15:34<span class="token punctuation">)</span>    at /Users/xiaqiulei/Documents/blog/node_modules/hexo/lib/extend/filter.js:60:50    at tryCatcher <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/util.js:16:23<span class="token punctuation">)</span>    at Object.gotValue <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/reduce.js:155:18<span class="token punctuation">)</span>    at Object.gotAccum <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/reduce.js:144:25<span class="token punctuation">)</span>    at Object.tryCatcher <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/util.js:16:23<span class="token punctuation">)</span>    at Promise._settlePromiseFromHandler <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/promise.js:512:31<span class="token punctuation">)</span>    at Promise._settlePromise <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/promise.js:569:18<span class="token punctuation">)</span>    at Promise._settlePromiseCtx <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/promise.js:606:10<span class="token punctuation">)</span>    at _drainQueueStep <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/async.js:142:12<span class="token punctuation">)</span>    at _drainQueue <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/async.js:131:9<span class="token punctuation">)</span>    at Async._drainQueues <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/async.js:147:5<span class="token punctuation">)</span>    at Immediate.Async.drainQueues <span class="token punctuation">[</span>as _onImmediate<span class="token punctuation">]</span> <span class="token punctuation">(</span>/Users/xiaqiulei/Documents/blog/node_modules/bluebird/js/release/async.js:17:14<span class="token punctuation">)</span>    at processImmediate <span class="token punctuation">(</span>internal/timers.js:439:21<span class="token punctuation">)</span>INFO  <span class="token number">0</span> files generated <span class="token keyword">in</span> <span class="token number">1.6</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟踪源码到这个文件<code>/Users/xiaqiulei/Documents/blog/node_modules/hexo/lib/plugins/filter/after_render/external_link.js:45:15</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">externalLinkFilter</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> config <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> config<span class="token punctuation">.</span>external_link <span class="token operator">===</span> <span class="token string">'undefined'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> config<span class="token punctuation">.</span>external_link <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span>    config<span class="token punctuation">.</span>external_link <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    config<span class="token punctuation">.</span>external_link <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      enable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      field<span class="token operator">:</span> <span class="token string">'site'</span><span class="token punctuation">,</span>      exclude<span class="token operator">:</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>external_link<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>external_link <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">||</span> config<span class="token punctuation">.</span>external_link<span class="token punctuation">.</span>enable <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">||</span>    config<span class="token punctuation">.</span>external_link<span class="token punctuation">.</span>field <span class="token operator">!==</span> <span class="token string">'site'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;a.*?(href=['"](.*?)['"]).*?></span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> hrefStr<span class="token punctuation">,</span> href</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">target=</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isExternal</span><span class="token punctuation">(</span>href<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">rel=</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">rel="(.*?)"</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">relStr<span class="token punctuation">,</span> rel</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rel<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'noopenner'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> relStr <span class="token operator">=</span> relStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>rel<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>rel<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> noopener</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> relStr<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>hrefStr<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>hrefStr<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> target="_blank"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>hrefStr<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>hrefStr<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> target="_blank" rel="noopener"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现逻辑有问题，修改<code>_config.yml</code>，如下所示<code>enable: false</code>，即可解决问题。</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">external_link: # Open external links in new tab  enable: false # Open external links in new tab  field: site # Apply to the whole site  exclude: &#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Restful风格的验证码</title>
      <link href="/2019/12/02/restful-captcha/"/>
      <url>/2019/12/02/restful-captcha/</url>
      
        <content type="html"><![CDATA[<h1 id="Restful风格的验证码"><a href="#Restful风格的验证码" class="headerlink" title="Restful风格的验证码"></a>Restful风格的验证码</h1><hr><p>原有的验证码使用流的方式，对移动端不友好，并且现在后端是分布式的微服务系统，原有的基于cookie的验证码方式，显得力不从心。</p><p>Restful 风格的验证码，图片使用Base64编码，后端使用Redis存储验证码。Android 客户端使用Retrofit + OkHttp。</p><span id="more"></span><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="生成验证码"><a href="#生成验证码" class="headerlink" title="生成验证码"></a>生成验证码</h2><h3 id="接口信息"><a href="#接口信息" class="headerlink" title="接口信息"></a>接口信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -X POST <span class="token punctuation">\</span>  http://localhost:8001/captcha/gen <span class="token punctuation">\</span>  -H <span class="token string">'Accept: application/json'</span> <span class="token punctuation">\</span>  -d <span class="token string">'&#123;    "channel": "account_change_pwd",    "userId": "12345"&#125;'</span><span class="token punctuation">&#123;</span>    <span class="token string">"code"</span><span class="token builtin class-name">:</span> <span class="token number">200</span>,    <span class="token string">"msg"</span><span class="token builtin class-name">:</span> null,    <span class="token string">"data"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"captchaId"</span><span class="token builtin class-name">:</span> <span class="token string">"6593486a-dd27-4e7b-8772-433868555114"</span>,        <span class="token string">"imageBase64Header"</span><span class="token builtin class-name">:</span> <span class="token string">"data:image/jpeg;base64,"</span>,        <span class="token string">"imageBase64"</span><span class="token builtin class-name">:</span> <span class="token string">"/9j/4AAQSkZJRgABAgAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAA8AKADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDtrW1ga1hZoIySikkoOeKsCztv+feL/vgU2z/484P+ua/yqyKiMY8q0IjGPKtCIWdr/wA+0P8A3wKeLK1/59of+/YqUU4U+WPYfLHsRCytP+fWH/v2KcLG0/59YP8Av2KmFPFHLHsHLHsQiws/+fWD/v2KcLCz/wCfSD/v2KnFOyAMk4FHJHsHLHsQjT7L/n0t/wDv2P8ACnDTrL/nzt/+/S/4Vkv4w0WK7W2N5H5jHj5gM5OARnGQeuRkY56EZ342V0V1OVYZB9RWk6DhZyja/kHLF9CEadY/8+dv/wB+l/wpw02x/wCfK3/79L/hVgU4Vnyx7Byx7FcaZYf8+Vt/36X/AAp40yw/58bb/v0v+FWBTxRyx7Byx7FYaXp//Pjbf9+V/wAKeNK0/wD58LX/AL8r/hVkU8UcsewcsexVGlad/wA+Fr/35X/CnDSdO/6B9r/35X/CrQp4o5Y9g5Y9iqNJ03/oH2n/AH5X/Cq2p6Xp8ekXrpY2qusDlWEKgg7TyOK1hVXVv+QLf/8AXvJ/6CaUox5XoKUY8r0OSs/+POD/AK5r/KrtvGssyIzhFY4LHtVOz/484P8Armv8qsinH4UOPwovX+nPZSZGWib7rf0NVRWpp1+jR/ZLvDRNwrHt7Gkn0iWOfEeDEed5PCj3qiijHG8rhI1LMegFcTZ+NL1PG114e1G1t41hYgTRvxgH8c9RXoLzxwIYbUnnh5e7fT0FeO/E2xbSdd0/X4gQjOFkC98c8/XFeplNCjiK0qFRayT5fKXQio2ldHo994h0vS7hYb66WB2+7vBw3GaxPGkus3VhHDoqs6TjDtGuTtPoe2c4z2Ga86vLpPGPjO2SFC8JOUYt93e2cH9R+Ne1hYbLT/LlliiCrjccAD3rTEYX+zpUpNXm1dp7LsJS579jwfWdBsYpbeOK5Y3ZYtN8w5OedoPLEnOO2BknufVLrxJJ4W8G6ddTwlt2I/m3NsHYnA5x+HtXGePfDOlaTDDrNtdSNJLgxKW+QgDOM9eRjH40eIJ7zVPh/A12yy+WAsZ+XOQBltxB4I6Ywc5Ga9qso4+nh3OTcXKzvo7vsZr3W7Hew/EHSTYQ3UsnyyJuLRqxTPf5io6ZGQcEeneugt9b0+eCeVbhQsA3SZ4wCMg+4968i8O+FbeTwO2oEZuU+cnZuAXp2z69uozn2h8OS2Z069+1XbRWdsSjCOZiTyR5Y6ZBGSAen4V5tbLMM3NUJN8srbd30/r/ACdqb6nQat8V7uSeU6DppnsoGxJcupwRntXZ+C/FQ8T6YJnjEUyryvQnBIJx9RXlDxanregSSWSW2iaDF/qkyS8mc4JPfJX1rovg1ckeH9WuWBllteEGf4SC+PzBrqzDL8NDBSnSilKDSet3r3e1/JbEwm+azOt8c+OofCFovlxrPePgpETgY71o+CfEsnivQE1OS3WAsxXarZGR1rxW1v7DxM2sanrF/FHdJGotYZCckr09unH4V3fwd8Q6b/YMOieeP7QaWWUQhTwuc9elRjMphh8A7QbqRa5nrs1fTyXccal5eR6oKeKaKeK+YNhwqrq3/IEv/wDr2k/9BNWxVXV/+QJf/wDXtJ/6CamXwsmXws5Kz/48oP8Armv8qsiq9l/x5Qf9c1/lVpFLMFUZJOAKI/Cgj8KLtnp7zgSyHy7cclz6e1W5NW8t1jt0HkIMYbndTtVYW9rb2angDLe+P8msoVRRpNHZXil4nFvJ3Rz8prkPH2kT33he7tk0+4vG+Uo1qvmEfMM4Ayc4z2rfFZ194fsdQuVuXE0Nyn3ZreVo3HTupB7V04SrGlXjUk7Wd9PL7hSV1Y8y+E+hyQazdy30LxusQ2RyKVIIfqQehBUf99V2vjnwlL4ktI1t5ZElEsbHB4wCQf8Ax12P/ARXX2Lz2dusL3Et0qjAa5O9uvc9T/8AWq2JbZ/vwFD6xt/Q12YvNatXGvFw0fT5ExglHlPI9N+Fd7dz20mu6rJNFAqhYRk44HAJ6YIx9Meldh4o8Krqug/2fp8UUTEkAkhQobJJ+62fmw2Pl5HDCuv8q1P3Z2H1TNKIIj924Q/UEVlWzTE1qkak5fDsrWS+QKEUrHBeF9B1PSfDd7p0oSS7COYGYsyucfuwWYDgdMcdTxXFab4D1KSTV9DNvIIJJHMc0q7doTAicMODnc2R6L2r3QWx7SxH6NThay9lB+jCro5rXpSnONry1fqtgdNOx5HYfB+fy2tr7Wp3sw3yQoxAwGUgkdM43j8Qa67wn4Hh8I3t21jeO9pcg7oJF6HjaQfb5x+I9K6/yJR1jb8qXYw6qR+FTiM1xeIi4VJ6PdaWBQitjzH4jeGN4juNM8J29+XB86SLKyg9sAduv51k/Cbw/r+j6vuvfDqW8BVt95cDbKOOFUZ9evFeygU8VtHOa0cG8I0mn1bd/wA7fgL2a5uYUU8U0U8V5BoOFVdX/wCQJf8A/XtJ/wCgmrYqrq//ACBL/wD69pP/AEE1MvhZMvhZyVl/x5W//XNf5VcgkMMySqASpyAelctFrVzFEkapEQihRkHt+NSf2/df884f++T/AI1lGtGyM41Y2R1dzctdzmVgASAMDtUYrmf+Ehu/+ecH/fJ/xpf+Eiu/+ecH/fJ/xqvbRH7aJ1Ap4rlf+EkvP+eUH/fJ/wAaX/hJbz/nlB/3yf8AGj20Q9tE6wU8VyP/AAk97/zyt/8Avlv8aX/hKL3/AJ5W/wD3y3+NHtoh7aJ14p4rjv8AhKr7/nlb/wDfLf40v/CV33/PK2/75b/Gj20Q9tE7MU8VxX/CW3//ADxtv++W/wAaX/hL9Q/5423/AHy3/wAVR7aIe2idwrMOjEfjUiyyD+NvzrhP+Ew1D/nja/8AfLf/ABVL/wAJlqP/ADxtf++W/wDiqPbRD20TvhNJ/ez9RThIT1VT+FcB/wAJnqP/ADxtf++G/wDiqX/hNdS/54Wn/fDf/FUe2iHtonoAcHqi/hTgV/u/rXn3/Cbal/zwtP8Avhv/AIql/wCE41P/AJ4Wn/fDf/FUe2iHtonoI68VV1f/AJAeof8AXtJ/6Ca4r/hOdT/54Wn/AHw3/wAVUdz4z1G6tZrd4bUJKjIxVWyARjj5qmVaNmKVWNmf/9k="</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token string">"channel"</span><span class="token operator">:</span> <span class="token string">"account_change_pwd"</span><span class="token punctuation">,</span> <span class="token comment">// 渠道，一般为模块名称</span>    <span class="token string">"userId"</span><span class="token operator">:</span> <span class="token string">"12345"</span> <span class="token comment">// 用户唯一编号，区别当前模块的某个用户</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>    <span class="token string">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token string">"msg"</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token string">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"captchaId"</span><span class="token operator">:</span> <span class="token string">"6593486a-dd27-4e7b-8772-433868555114"</span><span class="token punctuation">,</span> <span class="token comment">// 唯一编号</span>        <span class="token string">"imageBase64Header"</span><span class="token operator">:</span> <span class="token string">"data:image/jpeg;base64,"</span><span class="token punctuation">,</span> <span class="token comment">// base64 头部信息</span>        <span class="token string">"imageBase64"</span><span class="token operator">:</span> <span class="token string">""</span> <span class="token comment">// 验证码信息</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前端显示"><a href="#前端显示" class="headerlink" title="前端显示"></a>前端显示</h3><p>前端使用 <code>imageBase64Header</code> 与 <code>imageBase64</code>即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">"/captcha/gen"</span><span class="token punctuation">,</span>        dataType<span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>        contentType<span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            channel<span class="token operator">:</span> <span class="token string">"account_change_pwd"</span><span class="token punctuation">,</span>            userId<span class="token operator">:</span> <span class="token string">"12345"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> status</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            captchaData <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#captcha'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>imageBase64Header <span class="token operator">+</span> data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>imageBase64<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><h3 id="接口信息-1"><a href="#接口信息-1" class="headerlink" title="接口信息"></a>接口信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -X POST <span class="token punctuation">\</span>  http://localhost:8001/captcha/check <span class="token punctuation">\</span>  -H <span class="token string">'Accept: application/json'</span> <span class="token punctuation">\</span>  -d <span class="token string">'&#123;    "captchaId": "cb9ec4a1-8a79-41db-a567-b742aa1879a3",    "captchaText": "fynpf",    "channel": "account_change_pwd",    "userId": "12345"&#125;'</span><span class="token punctuation">&#123;</span>    <span class="token string">"code"</span><span class="token builtin class-name">:</span> <span class="token number">200</span>,    <span class="token string">"msg"</span><span class="token builtin class-name">:</span> null,    <span class="token string">"data"</span><span class="token builtin class-name">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前端校验"><a href="#前端校验" class="headerlink" title="前端校验"></a>前端校验</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#code'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>captchaData <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> text<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            type<span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>            url<span class="token operator">:</span> <span class="token string">"/captcha/check"</span><span class="token punctuation">,</span>            dataType<span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>            contentType<span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>            data<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                channel<span class="token operator">:</span> <span class="token string">"account_change_pwd"</span><span class="token punctuation">,</span>                userId<span class="token operator">:</span> <span class="token string">"12345"</span><span class="token punctuation">,</span>                captchaId<span class="token operator">:</span> captchaData<span class="token punctuation">.</span>data<span class="token punctuation">.</span>captchaId<span class="token punctuation">,</span>                captchaText<span class="token operator">:</span> text            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> status</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'check success'</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'check fail'</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="移动端使用"><a href="#移动端使用" class="headerlink" title="移动端使用"></a>移动端使用</h1><h2 id="Android-Retrofit-Api"><a href="#Android-Retrofit-Api" class="headerlink" title="Android Retrofit Api"></a>Android Retrofit Api</h2><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> ICaptchaApi <span class="token punctuation">&#123;</span>    <span class="token annotation builtin">@POST</span><span class="token punctuation">(</span><span class="token string">"/captcha/gen"</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token annotation builtin">@Body</span> req<span class="token operator">:</span> CaptchaGenReq<span class="token punctuation">)</span><span class="token operator">:</span> Call<span class="token operator">&lt;</span>BaseResp<span class="token operator">&lt;</span>CaptchaGenData<span class="token operator">></span><span class="token operator">></span>    <span class="token annotation builtin">@POST</span><span class="token punctuation">(</span><span class="token string">"/captcha/check"</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token annotation builtin">@Body</span> req<span class="token operator">:</span> CaptchaCheckReq<span class="token punctuation">)</span><span class="token operator">:</span> Call<span class="token operator">&lt;</span>BaseResp<span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Android-UI"><a href="#Android-UI" class="headerlink" title="Android UI"></a>Android UI</h2><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> captchaGenData<span class="token operator">:</span> CaptchaGenData<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        ivCode<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">&#123;</span>            <span class="token function">loadImageCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        btnCheck<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">&#123;</span>            <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token function">loadImageCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">loadImageCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> req <span class="token operator">=</span> <span class="token function">CaptchaGenReq</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        req<span class="token punctuation">.</span>channel <span class="token operator">=</span> <span class="token string">"account_pwd_change"</span>        req<span class="token punctuation">.</span>userId <span class="token operator">=</span> <span class="token string">"12345"</span>        Apis<span class="token punctuation">.</span>captchaApi<span class="token punctuation">.</span><span class="token function">gen</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Callback<span class="token operator">&lt;</span>BaseResp<span class="token operator">&lt;</span>CaptchaGenData<span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>BaseResp<span class="token operator">&lt;</span>CaptchaGenData<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">,</span>                                    response<span class="token operator">:</span> Response<span class="token operator">&lt;</span>BaseResp<span class="token operator">&lt;</span>CaptchaGenData<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>isSuccessful <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>data<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>                        captchaGenData <span class="token operator">=</span> it                        <span class="token keyword">val</span> bytes <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>imageBase64<span class="token punctuation">,</span> Base64<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span>                        <span class="token keyword">val</span> bitmap <span class="token operator">=</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeByteArray</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>size<span class="token punctuation">)</span>                        ivCode<span class="token punctuation">.</span><span class="token function">setImageBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>BaseResp<span class="token operator">&lt;</span>CaptchaGenData<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">,</span> t<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> code <span class="token operator">=</span> edtCode<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            captchaGenData<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">val</span> req <span class="token operator">=</span> <span class="token function">CaptchaCheckReq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">&#123;</span>                    captchaId <span class="token operator">=</span> it<span class="token punctuation">.</span>captchaId                    captchaText <span class="token operator">=</span> code                    channel <span class="token operator">=</span> <span class="token string">"account_pwd_change"</span>                    userId <span class="token operator">=</span> <span class="token string">"12345"</span>                <span class="token punctuation">&#125;</span>                Apis<span class="token punctuation">.</span>captchaApi<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Callback<span class="token operator">&lt;</span>BaseResp<span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>BaseResp<span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">,</span>                                            response<span class="token operator">:</span> Response<span class="token operator">&lt;</span>BaseResp<span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>isSuccessful<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>data<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>                                <span class="token keyword">val</span> msg <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token string">"check success "</span> <span class="token keyword">else</span> <span class="token string">"check fail"</span>                                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token label symbol">@MainActivity</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>BaseResp<span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">,</span> t<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"请输入验证码"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/easy-captcha/master/doc/111.png"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="https://github.com/LiushuiXiaoxia/easy-captcha">Java 后端</a></p><p><a href="https://github.com/LiushuiXiaoxia/easy-captcha-android">Android 客户端</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> restful </tag>
            
            <tag> 验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus Gradle 代码生成插件了解一下</title>
      <link href="/2018/12/21/mpg/"/>
      <url>/2018/12/21/mpg/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-Plus-Gradle-Generator"><a href="#Mybatis-Plus-Gradle-Generator" class="headerlink" title="Mybatis Plus Gradle Generator"></a>Mybatis Plus Gradle Generator</h1><hr><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Web开发中使用mybatis比较多，<a href="https://mp.baomidou.com/">MyBatis Plus</a>是一个比较好的扩展，并且还可以自动生成代码，比较方便。<br>但是MyBatis Plus 对maven比较友好，对Gradle就比较差了，现在Spring Boot也对Gradle支持比较好，在使用Gradle生成代码的时候就比较麻烦。</p><span id="more"></span><h1 id="使用姿势"><a href="#使用姿势" class="headerlink" title="使用姿势"></a>使用姿势</h1><p>本插件需要结合Spring Boot项目一起使用，如下所示，首先添加插件依赖，当前版本为<br><a href="https://bintray.com/liushuixiaoxia/maven/mpg/_latestVersion"> <img src="https://api.bintray.com/packages/liushuixiaoxia/maven/mpg/images/download.svg" alt="Download"> </a></p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">buildscript <span class="token punctuation">&#123;</span>    ext <span class="token punctuation">&#123;</span>        springBootVersion <span class="token operator">=</span> <span class="token string">'2.1.1.RELEASE'</span>    <span class="token punctuation">&#125;</span>    repositories <span class="token punctuation">&#123;</span>        maven <span class="token punctuation">&#123;</span> url <span class="token string gstring">"http://maven.aliyun.com/nexus/content/groups/public/"</span> <span class="token punctuation">&#125;</span>        maven <span class="token punctuation">&#123;</span> url <span class="token string gstring">"https://dl.bintray.com/liushuixiaoxia/maven"</span>  <span class="token punctuation">&#125;</span>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    dependencies <span class="token punctuation">&#123;</span>        <span class="token function">classpath</span><span class="token punctuation">(</span><span class="token string gstring">"org.springframework.boot:spring-boot-gradle-plugin:<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>springBootVersion<span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span>        <span class="token function">classpath</span><span class="token punctuation">(</span><span class="token string gstring">"cn.mycommons:mpg:<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>mpgVesion<span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后配置相关属性即可，本配置可以参考<a href="https://mp.baomidou.com/guide/generator.html">MyBatis Plus 代码生成官方文档</a>，基本配置和官方配置一样。</p><p>示例：表名为<code>tb_app_info</code>，前缀为<code>tb_</code>，生成的entity为<code>AppInfo</code>,mapper为<code>AppInfoMapper.xml</code>。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'mpg'</span>mpg <span class="token punctuation">&#123;</span>    enable <span class="token operator">=</span> <span class="token boolean">true</span>    globalConfig <span class="token punctuation">&#123;</span>        outputDir <span class="token operator">=</span> projectDir<span class="token punctuation">.</span>path <span class="token operator">+</span> <span class="token string gstring">"/src/main/java"</span>        author <span class="token operator">=</span> <span class="token string gstring">"Admin"</span>        open <span class="token operator">=</span> <span class="token boolean">false</span>        baseResultMap <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    dataSourceConfig <span class="token punctuation">&#123;</span>        driverName <span class="token operator">=</span> <span class="token string gstring">"com.mysql.jdbc.Driver"</span>        url <span class="token operator">=</span> <span class="token string gstring">"jdbc:mysql://localhost:3306/mpg_test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false"</span>        username <span class="token operator">=</span> <span class="token string gstring">"root"</span>        password <span class="token operator">=</span> <span class="token string gstring">"admin"</span>    <span class="token punctuation">&#125;</span>    packageConfig <span class="token punctuation">&#123;</span>        parent <span class="token operator">=</span> <span class="token string gstring">"cn.mycommons.springdemo.mpg"</span>        entity <span class="token operator">=</span> <span class="token string gstring">"mybatis.entity"</span>        mapper <span class="token operator">=</span> <span class="token string gstring">"mybatis.mapper"</span>    <span class="token punctuation">&#125;</span>    xmlMapperConfig <span class="token punctuation">&#123;</span>        path <span class="token operator">=</span> projectDir<span class="token punctuation">.</span>path <span class="token operator">+</span> <span class="token string gstring">"/src/main/resources/mapper/"</span>        name <span class="token operator">=</span> <span class="token string gstring">"AppInfoMapper.xml"</span>    <span class="token punctuation">&#125;</span>    strategyConfig <span class="token punctuation">&#123;</span>        include <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string gstring">"tb_app_info"</span><span class="token punctuation">]</span>        tablePrefix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string gstring">"tb_"</span><span class="token punctuation">]</span>        entityLombokModel <span class="token operator">=</span> <span class="token boolean">true</span>        restControllerStyle <span class="token operator">=</span> <span class="token boolean">true</span>        superEntityClass <span class="token operator">=</span> <span class="token string gstring">"cn.mycommons.basic.dto.BaseEntity"</span>        logicDeleteFieldName <span class="token operator">=</span> <span class="token string gstring">"is_delete"</span>        superEntityColumns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string gstring">"create_by"</span><span class="token punctuation">,</span> <span class="token string gstring">"create_time"</span><span class="token punctuation">,</span> <span class="token string gstring">"update_by"</span><span class="token punctuation">,</span> <span class="token string gstring">"update_time"</span><span class="token punctuation">,</span> <span class="token string gstring">"remark"</span><span class="token punctuation">,</span> <span class="token string gstring">"is_delete"</span><span class="token punctuation">]</span>        <span class="token function">entityTableFieldAnnotationEnable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        controllerMappingHyphenStyle <span class="token operator">=</span> <span class="token boolean">true</span>        superControllerClass <span class="token operator">=</span> <span class="token string gstring">"cn.mycommons.basic.controller.BaseController"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面为自定义配置，表示生成xmlMapper的文件路径。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">xmlMapperConfig <span class="token punctuation">&#123;</span>    path <span class="token operator">=</span> projectDir<span class="token punctuation">.</span>path <span class="token operator">+</span> <span class="token string gstring">"/src/main/resources/mapper/"</span>    name <span class="token operator">=</span> <span class="token string gstring">"AppInfoMapper.xml"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行Gradle Task <code>mpg</code> 即可。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/mybatis-plus-gradle-generator/master/doc/1.png" alt="mpg"></p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://mp.baomidou.com/">MyBatis Plus</a></p><p><a href="https://mp.baomidou.com/config/">MyBatis Plus 文档</a></p><p><a href="https://github.com/LiushuiXiaoxia/mybatis-plus-gradle-generator">MyBatis Plus Gradle Plugin</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis plus </tag>
            
            <tag> gradle plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins can&#39;t parse argument number changelog.url 问题</title>
      <link href="/2018/11/26/changelog-url/"/>
      <url>/2018/11/26/changelog-url/</url>
      
        <content type="html"><![CDATA[<p>最近使用了Jenkins，碰到一问题，提示如下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>jelly<span class="token punctuation">.</span></span>JellyTagException</span><span class="token operator">:</span> jar<span class="token operator">:</span>file<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>xiaqiulei<span class="token operator">/</span><span class="token punctuation">.</span>jenkins<span class="token operator">/</span>war<span class="token operator">/</span>WEB<span class="token operator">-</span>INF<span class="token operator">/</span>lib<span class="token operator">/</span>jenkins<span class="token operator">-</span>core<span class="token operator">-</span><span class="token number">2.147</span><span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>hudson<span class="token operator">/</span>model<span class="token operator">/</span><span class="token class-name">UpdateCenter</span><span class="token operator">/</span><span class="token class-name">CoreUpdateMonitor</span><span class="token operator">/</span>message<span class="token punctuation">.</span>jelly<span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">20</span><span class="token operator">:</span> <span class="token operator">&lt;</span>j<span class="token operator">:</span>otherwise<span class="token operator">></span> can't parse argument number<span class="token operator">:</span> changelog<span class="token punctuation">.</span>urlat <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>jelly<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>TagScript</span><span class="token punctuation">.</span><span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">TagScript</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">726</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>jelly<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>TagScript</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">TagScript</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">281</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>jelly<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>ScriptBlock</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ScriptBlock</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">95</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>jelly<span class="token punctuation">.</span></span>TagSupport</span><span class="token punctuation">.</span><span class="token function">invokeBody</span><span class="token punctuation">(</span><span class="token class-name">TagSupport</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">161</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>jelly<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ChooseTag</span><span class="token punctuation">.</span><span class="token function">doTag</span><span class="token punctuation">(</span><span class="token class-name">ChooseTag</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">38</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>jelly<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>TagScript</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">TagScript</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">269</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>jelly<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>ScriptBlock</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ScriptBlock</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">95</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>kohsuke<span class="token punctuation">.</span>stapler<span class="token punctuation">.</span>jelly<span class="token punctuation">.</span></span>ReallyStaticTagLibrary</span>$<span class="token number">1.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ReallyStaticTagLi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>排查了好久，才发现问题，原因是升级了一个插件导致的，经过一个多小时的排查，终于找到了，是jeknins中文语言包，卸载或者降级即可。</p><span id="more"></span><pre class="line-numbers language-none"><code class="language-none">Localization: Chinese (Simplified)Jenkins 及其插件的简体中文语言包。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是页面出现了问题，就不能接入插件管理的页面，可以直接打开jenkins目录，删除插件文件，然后重启服务即可。</p><p>我的电脑是mac，插件地址如下，删除<code>localization-zh-cn</code>和<code>localization-zh-cn.jpi</code>即可。</p><pre class="line-numbers language-none"><code class="language-none">~&#x2F;.jenkins&#x2F;plugins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然还有一种办法可以解决，jenkins系统管理页面是进入不了，如下所示</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;localhost:8080&#x2F;manage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是可以直接访问地址的</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;localhost:8080&#x2F;pluginManager&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jeknins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh自动登录</title>
      <link href="/2018/11/25/ssh-login/"/>
      <url>/2018/11/25/ssh-login/</url>
      
        <content type="html"><![CDATA[<h1 id="ssh自动登录"><a href="#ssh自动登录" class="headerlink" title="ssh自动登录"></a>ssh自动登录</h1><hr><p>登录服务器的时候，经常使用<code>ssh</code>进行远程的登录，经常输入密码，比较麻烦，可以使用<code>sshpass</code>配合<code>iTerm2</code>简化操作。</p><span id="more"></span><h2 id="安装sshpass"><a href="#安装sshpass" class="headerlink" title="安装sshpass"></a>安装sshpass</h2><p>首先下载<code>sshpass</code>，不同系统可能不一样，大致差不多，可以直接使用包管理工具安装。我用的是mac os, 可直接使用<code>brew</code>。</p><pre class="line-numbers language-none"><code class="language-none">brew install sshpassError: No available formula for sshpass  We won&#39;t add sshpass because it makes it too easy for novice SSH users to  ruin SSH&#39;s security.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>说明不安全，可不管，直接下载安装。</p><pre class="line-numbers language-none"><code class="language-none">brew install https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kadwanev&#x2F;bigboybrew&#x2F;master&#x2F;Library&#x2F;Formula&#x2F;sshpass.rb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="sshpass使用姿势"><a href="#sshpass使用姿势" class="headerlink" title="sshpass使用姿势"></a>sshpass使用姿势</h2><h3 id="直接远程连接某主机"><a href="#直接远程连接某主机" class="headerlink" title="直接远程连接某主机"></a>直接远程连接某主机</h3><pre class="line-numbers language-none"><code class="language-none">sshpass -p &#123;密码&#125; ssh &#123;用户名&#125;@&#123;主机IP&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="远程连接指定ssh的端口"><a href="#远程连接指定ssh的端口" class="headerlink" title="远程连接指定ssh的端口"></a>远程连接指定ssh的端口</h3><pre class="line-numbers language-none"><code class="language-none">sshpass -p &#123;密码&#125; ssh -p $&#123;端口&#125; &#123;用户名&#125;@&#123;主机IP&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="从密码文件读取文件内容作为密码去远程连接主机"><a href="#从密码文件读取文件内容作为密码去远程连接主机" class="headerlink" title="从密码文件读取文件内容作为密码去远程连接主机"></a>从密码文件读取文件内容作为密码去远程连接主机</h3><pre class="line-numbers language-none"><code class="language-none">sshpass -f $&#123;密码文本文件&#125; ssh &#123;用户名&#125;@&#123;主机IP&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="从远程主机上拉取文件到本地"><a href="#从远程主机上拉取文件到本地" class="headerlink" title="从远程主机上拉取文件到本地"></a>从远程主机上拉取文件到本地</h3><pre class="line-numbers language-none"><code class="language-none">sshpass -p &#123;密码&#125; scp &#123;用户名&#125;@&#123;主机IP&#125;:$&#123;远程主机目录&#125; $&#123;本地主机目录&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="将主机目录文件拷贝至远程主机目录"><a href="#将主机目录文件拷贝至远程主机目录" class="headerlink" title="将主机目录文件拷贝至远程主机目录"></a>将主机目录文件拷贝至远程主机目录</h3><pre class="line-numbers language-none"><code class="language-none">sshpass -p &#123;密码&#125; scp $&#123;本地主机目录&#125; &#123;用户名&#125;@&#123;主机IP&#125;:$&#123;远程主机目录&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="远程连接主机并执行命令"><a href="#远程连接主机并执行命令" class="headerlink" title="远程连接主机并执行命令"></a>远程连接主机并执行命令</h3><pre class="line-numbers language-none"><code class="language-none">sshpass -p &#123;密码&#125; ssh -o StrictHostKeyChecking&#x3D;no &#123;用户名&#125;@&#123;主机IP&#125; &#39;rm -rf &#x2F;tmp&#x2F;test&#39;-o StrictHostKeyChecking&#x3D;no ：忽略密码提示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="iTerm2结合使用"><a href="#iTerm2结合使用" class="headerlink" title="iTerm2结合使用"></a>iTerm2结合使用</h2><p>参考上面，使用<code>sshpass -p &#123;密码&#125; ssh &#123;用户名&#125;@&#123;主机IP&#125;</code>即可满足我们的需求，每次只要运行同样的命令即可。如:</p><pre class="line-numbers language-none"><code class="language-none">sshpass -p root ssh  admin@192.168.1.100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>iTerm2</code>中的<code>Profile</code>，添加一条新的配置，如下所示。</p><p><img src="/images/ssh_login_iterm2.png"></p><p>命令如下，sshpass和ssh需要指定具体路径。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;sshpass -p root &#x2F;usr&#x2F;bin&#x2F;ssh  admin@192.168.1.100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> sshpass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GsonSerializedNameGen</title>
      <link href="/2018/10/25/GsonSerializedNameGen/"/>
      <url>/2018/10/25/GsonSerializedNameGen/</url>
      
        <content type="html"><![CDATA[<h1 id="Gson-SerializedName-Gen"><a href="#Gson-SerializedName-Gen" class="headerlink" title="Gson SerializedName Gen"></a>Gson SerializedName Gen</h1><hr><p>GsonSerializedNameGen 是一个自动生成Gson SerializedName注解的插件。</p><p><a href="https://github.com/LiushuiXiaoxia/SerializedNameGen/tree/master/jars">下载地址</a></p><p><a href="https://plugins.jetbrains.com/plugin/11225-gsonserializednamegen">插件地址</a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>有时候经常会维护一些老的项目，可能由于历史或开发人员能力问题，代码会稍微不规范。</p><p>比如在请求网络数据时会需要把json反序列化成实体，然后下面是常见的一种方式。</p><span id="more"></span><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> max_age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerA</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Name</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> max_age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerB</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Name</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> max_age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码是很规范的，首先代码中字段名字命名规则是不满足驼峰规则的，其次需要添加json别名注解，比如常见的<code>Gson</code>，需要添加<code>@SerializedName</code>注解，否则不能进行代码混淆。</p><p>一些有强迫症的程序员就会手动修改这些代码，但是是历史代码，可能一不小心就改坏了，修改需要一定的工作量，并且是重复劳动的工作，那么此工具就是干这样的事情的，使用工具优化后，就变成了下面样子。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bean</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Name</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"max_age"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> max_age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerA</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Name</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"max_age"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> max_age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerB</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Name</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"max_age"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> max_age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="使用姿势"><a href="#使用姿势" class="headerlink" title="使用姿势"></a>使用姿势</h1><h2 id="支持特性"><a href="#支持特性" class="headerlink" title="支持特性"></a>支持特性</h2><p>当前版本为基本版本，仅仅支持Java语言生成<code>SerializedName</code>注解。</p><h2 id="插件下载"><a href="#插件下载" class="headerlink" title="插件下载"></a>插件下载</h2><p><a href="https://github.com/LiushuiXiaoxia/SerializedNameGen/tree/master/jars">下载地址</a></p><p><a href="https://plugins.jetbrains.com/plugin/11225-gsonserializednamegen">插件地址</a></p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-90c095b6e0db2d11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="插件安装"></p><h2 id="示例演示"><a href="#示例演示" class="headerlink" title="示例演示"></a>示例演示</h2><p><img src="http://upload-images.jianshu.io/upload_images/1520343-ac17ec6e0c9ba492.gif?imageMogr2/auto-orient/strip" alt="示例演示"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>第一个版本，实现有点仓促，如果有问题，欢迎交流，<a href="mailto:&#120;&#105;&#x61;&#113;&#x69;&#x75;&#108;&#x65;&#105;&#64;&#49;&#x32;&#54;&#46;&#99;&#111;&#x6d;">&#120;&#105;&#x61;&#113;&#x69;&#x75;&#108;&#x65;&#105;&#64;&#49;&#x32;&#54;&#46;&#99;&#111;&#x6d;</a>。</p><h2 id="后续规划"><a href="#后续规划" class="headerlink" title="后续规划"></a>后续规划</h2><ul><li><p>支持Kotlin语言</p></li><li><p>支持其他方式json序列化工具</p></li><li><p>支持删除某一种json序列化工具别名</p></li></ul><h2 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h2><p><a href="https://github.com/LiushuiXiaoxia/SerializedNameGen">SerializedNameGen</a></p><p><a href="https://github.com/LiushuiXiaoxia/AutoValueConvert">AutoValueConvert</a></p><p><a href="https://github.com/LiushuiXiaoxia/DatabindingConvert">DatabindingConvert</a></p><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><ul><li>v0.1</li></ul><p>第一个版本，实现基本功能</p>]]></content>
      
      
      <categories>
          
          <category> 插件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Andorid Studio plugin </tag>
            
            <tag> gson </tag>
            
            <tag> jackson </tag>
            
            <tag> fastjson </tag>
            
            <tag> plugin </tag>
            
            <tag> 注解生成工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac Git终端代理问题</title>
      <link href="/2018/09/25/git-proxy/"/>
      <url>/2018/09/25/git-proxy/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac-Git终端代理问题"><a href="#Mac-Git终端代理问题" class="headerlink" title="Mac Git终端代理问题"></a>Mac Git终端代理问题</h1><p>最近换了新电脑，使用的是自己的vpn，但是发现clone github上面的代码比较慢，经常失败，使用brew也会出错了，后面发现在终端上面使用的git不是走系统的代理，需要配置如下，即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global http.https://github.com.proxy socks5://127.0.0.1:1086<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> proxy </tag>
            
            <tag> socks5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 项目自动发布与Supervisor</title>
      <link href="/2018/06/01/SpringBootSupervisor/"/>
      <url>/2018/06/01/SpringBootSupervisor/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-项目自动发布与Supervisor"><a href="#Spring-Boot-项目自动发布与Supervisor" class="headerlink" title="Spring Boot 项目自动发布与Supervisor"></a>Spring Boot 项目自动发布与Supervisor</h1><hr><p>前面写了一遍关于Spring Boot项目自动发布的<a href="https://www.jianshu.com/p/51459fc4560d">文章</a>，<a href="https://github.com/LiushuiXiaoxia/springboot-deploy-demo">这里是Github地址</a>。<br>还是受到不少欢迎的，有不少点赞的朋友，这次再接再厉，跟着上一篇，介绍使用Supervisor管理Spring Boot项目。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>supervisor是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。</p><p>什么意思呢？就是说，原先启动的Spring boot项目，正常情况下可以一直运行，但是如果程序中出现了Bug，程序会自动退出，那么服务就不可用了，可以使用用Supervisor来管理服务，当程序退出后服务可以自动重启。</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装supervisor很简单，我这边使用的是ubuntu，直接用<code>apt-get</code>安装即可，命令是<code>sudo apt-get install supervisor</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> supervisor正在读取软件包列表<span class="token punctuation">..</span>. 完成正在分析软件包的依赖关系树正在读取状态信息<span class="token punctuation">..</span>. 完成建议安装：  supervisor-doc下列【新】软件包将被安装：  supervisor升级了 <span class="token number">0</span> 个软件包，新安装了 <span class="token number">1</span> 个软件包，要卸载 <span class="token number">0</span> 个软件包，有 <span class="token number">0</span> 个软件包未被升级。需要下载 <span class="token number">253</span> kB 的归档。解压缩后会消耗 <span class="token number">1,401</span> kB 的额外空间。获取:1 http://mirrors.aliyun.com/ubuntu xenial-updates/universe amd64 supervisor all <span class="token number">3.2</span>.0-2ubuntu0.2 <span class="token punctuation">[</span><span class="token number">253</span> kB<span class="token punctuation">]</span>已下载 <span class="token number">253</span> kB，耗时 <span class="token number">0</span>秒 <span class="token punctuation">(</span><span class="token number">508</span> kB/s<span class="token punctuation">)</span>正在选中未选择的软件包 supervisor。<span class="token punctuation">(</span>正在读取数据库 <span class="token punctuation">..</span>. 系统当前共安装有 <span class="token number">229783</span> 个文件和目录。<span class="token punctuation">)</span>正准备解包 <span class="token punctuation">..</span>./supervisor_3.2.0-2ubuntu0.2_all.deb  <span class="token punctuation">..</span>.正在解包 supervisor <span class="token punctuation">(</span><span class="token number">3.2</span>.0-2ubuntu0.2<span class="token punctuation">)</span> <span class="token punctuation">..</span>.正在处理用于 man-db <span class="token punctuation">(</span><span class="token number">2.7</span>.5-1<span class="token punctuation">)</span> 的触发器 <span class="token punctuation">..</span>.正在处理用于 systemd <span class="token punctuation">(</span><span class="token number">229</span>-4ubuntu21.2<span class="token punctuation">)</span> 的触发器 <span class="token punctuation">..</span>.正在处理用于 ureadahead <span class="token punctuation">(</span><span class="token number">0.100</span>.0-19<span class="token punctuation">)</span> 的触发器 <span class="token punctuation">..</span>.正在设置 supervisor <span class="token punctuation">(</span><span class="token number">3.2</span>.0-2ubuntu0.2<span class="token punctuation">)</span> <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装成功后可以在 <code>/etc/supervisor/</code> 目录下找到<code>supervisord.conf</code>配置文件，用<code>vi</code>命令来编辑。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># xiaqiulei @ ubuntu in /etc/supervisor [15:08:39]</span>$ <span class="token builtin class-name">cd</span> /etc/supervisor/<span class="token comment"># xiaqiulei @ ubuntu in /etc/supervisor [15:08:46]</span>$ <span class="token function">cat</span> supervisord.conf<span class="token punctuation">;</span> supervisor config <span class="token function">file</span><span class="token punctuation">[</span>unix_http_server<span class="token punctuation">]</span><span class="token assign-left variable">file</span><span class="token operator">=</span>/var/run/supervisor.sock   <span class="token punctuation">;</span> <span class="token punctuation">(</span>the path to the socket <span class="token function">file</span><span class="token punctuation">)</span><span class="token assign-left variable">chmod</span><span class="token operator">=</span>0700                       <span class="token punctuation">;</span> sockef <span class="token function">file</span> mode <span class="token punctuation">(</span>default 0700<span class="token punctuation">)</span><span class="token punctuation">[</span>supervisord<span class="token punctuation">]</span><span class="token assign-left variable">logfile</span><span class="token operator">=</span>/var/log/supervisor/supervisord.log <span class="token punctuation">;</span> <span class="token punctuation">(</span>main log <span class="token function">file</span><span class="token punctuation">;</span>default <span class="token variable">$CWD</span>/supervisord.log<span class="token punctuation">)</span><span class="token assign-left variable">pidfile</span><span class="token operator">=</span>/var/run/supervisord.pid <span class="token punctuation">;</span> <span class="token punctuation">(</span>supervisord pidfile<span class="token punctuation">;</span>default supervisord.pid<span class="token punctuation">)</span><span class="token assign-left variable">childlogdir</span><span class="token operator">=</span>/var/log/supervisor            <span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token string">'AUTO'</span> child log dir, default <span class="token variable">$TEMP</span><span class="token punctuation">)</span><span class="token punctuation">;</span> the below section must remain <span class="token keyword">in</span> the config <span class="token function">file</span> <span class="token keyword">for</span> RPC<span class="token punctuation">;</span> <span class="token punctuation">(</span>supervisorctl/web interface<span class="token punctuation">)</span> to work, additional interfaces may be<span class="token punctuation">;</span> added by defining them <span class="token keyword">in</span> separate rpcinterface: sections<span class="token punctuation">[</span>rpcinterface:supervisor<span class="token punctuation">]</span>supervisor.rpcinterface_factory <span class="token operator">=</span> supervisor.rpcinterface:make_main_rpcinterface<span class="token punctuation">[</span>supervisorctl<span class="token punctuation">]</span><span class="token assign-left variable">serverurl</span><span class="token operator">=</span>unix:///var/run/supervisor.sock <span class="token punctuation">;</span> use a unix:// URL  <span class="token keyword">for</span> a unix socket<span class="token punctuation">;</span> The <span class="token punctuation">[</span>include<span class="token punctuation">]</span> section can just contain the <span class="token string">"files"</span> setting.  This<span class="token punctuation">;</span> setting can list multiple files <span class="token punctuation">(</span>separated by whitespace or<span class="token punctuation">;</span> newlines<span class="token punctuation">)</span>.  It can also contain wildcards.  The filenames are<span class="token punctuation">;</span> interpreted as relative to this file.  Included files *cannot*<span class="token punctuation">;</span> include files themselves.<span class="token punctuation">[</span>include<span class="token punctuation">]</span>files <span class="token operator">=</span> /etc/supervisor/conf.d/*.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在<code>supervisord.conf</code>这个文件的最后加上以下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>program:you program name<span class="token punctuation">]</span> <span class="token comment"># 你的程序名，随便命名</span><span class="token assign-left variable">command</span><span class="token operator">=</span>python /home/pi/test.py <span class="token comment"># 你的命令，可以是任何运行在终端的命令</span><span class="token assign-left variable">autostart</span><span class="token operator">=</span>true <span class="token comment"># 自动启动</span><span class="token assign-left variable">autorestart</span><span class="token operator">=</span>true<span class="token assign-left variable">user</span><span class="token operator">=</span>root<span class="token assign-left variable">log_stderr</span><span class="token operator">=</span>true<span class="token assign-left variable">logfile</span><span class="token operator">=</span>/var/log/testpy.log <span class="token comment"># 日志文件的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在前面，是使用<code>start.sh</code>来启动程序，现在也只需要在supervisor中配置执行这个文件即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># xiaqiulei @ ubuntu in ~/deploy [15:18:35]</span>$ <span class="token function">ls</span>application-prod.properties  application.properties  log  logback-spring.xml  restart.sh  springboot-deploy-demo-0.0.1-SNAPSHOT.jar  start.sh  stop.sh<span class="token comment"># xiaqiulei @ ubuntu in ~/deploy [15:18:36]</span>$ <span class="token function">ls</span> -al总用量 <span class="token number">15764</span>drwxrwxr-x  <span class="token number">3</span> xiaqiulei xiaqiulei     <span class="token number">4096</span> <span class="token number">4</span>月  <span class="token number">24</span> <span class="token number">22</span>:24 <span class="token builtin class-name">.</span>drwxr-xr-x <span class="token number">34</span> xiaqiulei xiaqiulei     <span class="token number">4096</span> <span class="token number">6</span>月   <span class="token number">1</span> <span class="token number">15</span>:18 <span class="token punctuation">..</span>-rw-r--r--  <span class="token number">1</span> xiaqiulei xiaqiulei       <span class="token number">63</span> <span class="token number">6</span>月   <span class="token number">1</span> <span class="token number">15</span>:17 application-prod.properties-rw-r--r--  <span class="token number">1</span> xiaqiulei xiaqiulei       <span class="token number">27</span> <span class="token number">6</span>月   <span class="token number">1</span> <span class="token number">15</span>:17 application.propertiesdrwxrwxr-x  <span class="token number">2</span> xiaqiulei xiaqiulei     <span class="token number">4096</span> <span class="token number">6</span>月   <span class="token number">1</span> <span class="token number">15</span>:16 log-rw-r--r--  <span class="token number">1</span> xiaqiulei xiaqiulei      <span class="token number">881</span> <span class="token number">6</span>月   <span class="token number">1</span> <span class="token number">15</span>:17 logback-spring.xml-rwxr-xr-x  <span class="token number">1</span> xiaqiulei xiaqiulei       <span class="token number">32</span> <span class="token number">6</span>月   <span class="token number">1</span> <span class="token number">15</span>:17 restart.sh-rw-r--r--  <span class="token number">1</span> xiaqiulei xiaqiulei <span class="token number">16103697</span> <span class="token number">6</span>月   <span class="token number">1</span> <span class="token number">15</span>:17 springboot-deploy-demo-0.0.1-SNAPSHOT.jar-rwxr--r--  <span class="token number">1</span> xiaqiulei xiaqiulei      <span class="token number">970</span> <span class="token number">6</span>月   <span class="token number">1</span> <span class="token number">15</span>:17 start.sh-rwxr-xr-x  <span class="token number">1</span> xiaqiulei xiaqiulei      <span class="token number">291</span> <span class="token number">6</span>月   <span class="token number">1</span> <span class="token number">15</span>:17 stop.sh<span class="token comment"># xiaqiulei @ ubuntu in ~/deploy [15:18:39]</span>$ ./start.shINFO: /home/xiaqiulei/deploy/springboot-deploy-demo-0.0.1-SNAPSHOT.jar is running<span class="token operator">!</span> <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token number">114791</span>http://127.0.0.1:8088/heartbeathttp code: 000http code: 000http code: 000http code: 000http code: <span class="token number">200</span>server start success<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要先修改下<code>start.sh</code>文件，然后在修改下supervisor配置。因为原先的<code>start.sh</code>启动方式会将java程序作为一个后台进程。<br>主要语句是去除 <code>2&gt;&amp;1 &amp;</code>，原先的校验功能也需要去除。如果此功能是必要的，可单独写成一个文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token comment"># start.sh</span><span class="token comment">#get pwd</span><span class="token assign-left variable">DIR_HOME</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">BASH_SOURCE</span>-$0&#125;</span>"</span><span class="token assign-left variable">DIR_HOME</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">"<span class="token variable">$DIR_HOME</span>"</span><span class="token variable">)</span></span>"</span><span class="token assign-left variable">PRGDIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$&#123;DIR_HOME&#125;</span>"</span><span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>"</span><span class="token assign-left variable">jarfile</span><span class="token operator">=</span><span class="token variable">$PRGDIR</span>/springboot-deploy-demo-0.0.1-SNAPSHOT.jar<span class="token comment">#get runing pid</span><span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> java <span class="token operator">|</span> <span class="token function">grep</span> $jarfile <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">)</span></span><span class="token comment">#create log dir</span><span class="token function">mkdir</span> -p <span class="token variable">$PRGDIR</span>/log/<span class="token function">nohup</span> java -jar <span class="token variable">$jarfile</span> -Dfile.encoding<span class="token operator">=</span>UTF-8 --spring.config.location<span class="token operator">=</span><span class="token variable">$PRGDIR</span>/ <span class="token operator">></span><span class="token variable">$PRGDIR</span>/log/start.log<span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> java <span class="token operator">|</span> <span class="token function">grep</span> $jarfile <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">)</span></span><span class="token builtin class-name">echo</span> <span class="token string">"INFO: <span class="token variable">$jarfile</span> is running! pid=<span class="token variable">$pid</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单独的校验文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><span class="token comment"># validate.sh</span><span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">"http://127.0.0.1:8088/heartbeat"</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token variable">$url</span><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token boolean">true</span> <span class="token punctuation">]</span><span class="token keyword">do</span>    <span class="token function">sleep</span> <span class="token number">1</span>    <span class="token assign-left variable">HTTP_CODE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">curl</span> -G -m <span class="token number">10</span> -o /dev/null -s -w %<span class="token punctuation">&#123;</span>http_code<span class="token punctuation">&#125;</span> $url<span class="token variable">`</span></span>    <span class="token builtin class-name">echo</span> <span class="token string">"http code: <span class="token variable">$&#123;HTTP_CODE&#125;</span>"</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;HTTP_CODE&#125;</span> -eq <span class="token number">200</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"server start success..."</span>        <span class="token builtin class-name">exit</span> <span class="token number">0</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成脚本的修改操作后，就可以修改supervisor的配置。 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>program:spring_boot_demo<span class="token punctuation">]</span>user <span class="token operator">=</span> xiaqiuleidirectory <span class="token operator">=</span> /home/xiaqiulei/deploy<span class="token builtin class-name">command</span> <span class="token operator">=</span> <span class="token function">bash</span> -c ./start.shautostart <span class="token operator">=</span> <span class="token boolean">true</span>autorestart <span class="token operator">=</span>  <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后重新加载配置，最后开启服务即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> supervisorctl status$ <span class="token function">sudo</span> supervisorctl reloadRestarted supervisord$ <span class="token function">sudo</span> supervisorctl statusspring_boot_demo                 STOPPED   Jun 01 04:25 PM$ <span class="token function">sudo</span> supervisorctl start spring_boot_demospring_boot_demo: started$ <span class="token function">sudo</span> supervisorctl statusspring_boot_demo                 RUNNING   pid <span class="token number">119403</span>, <span class="token function">uptime</span> <span class="token number">0</span>:00:10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以测试下，当程序退出的时候，服务会自动重启，如下所示，kill掉当前的进程，然后在看下状态，服务还在，并且pid是和原先不一样的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> supervisorctl statusspring_boot_demo                 RUNNING   pid <span class="token number">119607</span>, <span class="token function">uptime</span> <span class="token number">0</span>:03:16$ <span class="token function">sudo</span> supervisorctl$ <span class="token function">kill</span> -9 <span class="token number">119607</span>$ <span class="token function">sudo</span> supervisorctl statusspring_boot_demo                 RUNNING   pid <span class="token number">119807</span>, <span class="token function">uptime</span> <span class="token number">0</span>:00:02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用校验文件，检查下服务。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./validate.shhttp://127.0.0.1:8088/heartbeathttp code: <span class="token number">200</span>server start success<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="设置supervisor开机自启"><a href="#设置supervisor开机自启" class="headerlink" title="设置supervisor开机自启"></a>设置supervisor开机自启</h1><p>编辑<code>/etc/rc.local</code>文件 ，让 <code>supervisor</code> 开机启动，这样就可以使脚本在开机的时候随supervisor启动运行。<br>在这个配置文件的<code>exit 0</code>前面一行加上 <code>service supervisor start</code>保存。</p><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/LiushuiXiaoxia/springboot-deploy-demo">源码地址 https://github.com/LiushuiXiaoxia/springboot-deploy-demo</a></p><p><a href="https://github.com/LiushuiXiaoxia/springboot-deploy-demo/blob/master/README2.md">Spring Boot 项目自动发布与Supervisor</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Supervisor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于JSON RPC的一种Android跨进程调用解决方案了解一下？</title>
      <link href="/2018/05/30/Android-JSON-RPC/"/>
      <url>/2018/05/30/Android-JSON-RPC/</url>
      
        <content type="html"><![CDATA[<h1 id="基于JSON-RPC的一种Android跨进程调用解决方案了解一下？"><a href="#基于JSON-RPC的一种Android跨进程调用解决方案了解一下？" class="headerlink" title="基于JSON RPC的一种Android跨进程调用解决方案了解一下？"></a>基于JSON RPC的一种Android跨进程调用解决方案了解一下？</h1><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>今天上午，看票圈有朋友分享爱奇艺的跨进程通信框架——<a href="https://github.com/iqiyi/Andromeda">Andromeda</a>，觉的还是有点意思的。<br>以前项目中用到跨进程这种解决方案比较少，今天看了下Andromeda，发现调用方式很简单。</p><p>恰好最近一年都是在做后端工作，想到了Json RPC的方案，其实Android跨进程接也是一种rpc调用方式，那么参考json rpc协议，通过aidl通道也可以很简单一种跨进程通信方式，而且使用方式也很简单。</p><p>说干就干，但是作为了高级程序员，肯定要给项目起个名字高大上的名字——Bifrost（彩虹桥），参考复联电影雷神上面的彩虹桥，寓意可以传送到各地，也表达Android跨进程通信可以畅通无阻。</p><span id="more"></span><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>在Android系统的跨进程调用需要用到AIDL方式，但是呢，操作起来非常麻烦，可以传递基本类型，如果需要自定义类，那么还需要实现<code>Parcelable</code>接口，同时也要写不少代码，操作起来繁琐。</p><p>像平常一样，先定义一个接口和实现类就行了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">INumberApi</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NumberApiImpl</span> <span class="token keyword">implements</span> <span class="token class-name">INumberApi</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册下接口和实现类，因为暂时没有用到依赖注入工具，同时我也不想把功能做的很复杂，暂时手动注册吧，做注册前，先做好初始化工作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Bifrost</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Bifrost</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">IUserApi</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserApiImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Bifrost</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">INumberApi</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">NumberApiImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Bifrost暂时支持2个注册方式，kv都是class类型，还有就是k是class，v是接口实现类的一个对象。</p><p>调用方式也很简单。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">IUserApi</span> userApi <span class="token operator">=</span> <span class="token class-name">Bifrost</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteInstance</span><span class="token punctuation">(</span><span class="token class-name">IUserApi</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user <span class="token operator">=</span> userApi<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Timber</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"user = %s"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">INumberApi</span> numberApi <span class="token operator">=</span> <span class="token class-name">Bifrost</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteInstance</span><span class="token punctuation">(</span><span class="token class-name">INumberApi</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> numberApi<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"1 + 2 = "</span> <span class="token operator">+</span> ret<span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>原理很简单，见下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/1520343-d88a960f5ee9606d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原理图"></p><p>当在原始的进程中，定义一个接口，然后获取该对象的时候，其实返回值是一个用Java动态代理实现的一个值，当有使用方调用接口中的方法时候，会构造成一个<code>RpcRequest</code>对象，这个对象很简单，就是标识这个调用的必要信息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcRequest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"jsonRpc"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> jsonRpc <span class="token operator">=</span> <span class="token string">"1.0"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> id <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"clazz"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> clazz<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> method<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"params"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> params<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"RpcRequest&#123;"</span> <span class="token operator">+</span>                <span class="token string">"jsonRpc='"</span> <span class="token operator">+</span> jsonRpc <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", id='"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", clazz='"</span> <span class="token operator">+</span> clazz <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", method='"</span> <span class="token operator">+</span> method <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", params='"</span> <span class="token operator">+</span> params <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如上面的接口方法<code>INumberApi.add</code>，那么生成的最终的json信息如下。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"clazz"</span><span class="token operator">:</span> <span class="token string">"cn.mycommons.bifrost.demo.api.INumberApi"</span><span class="token punctuation">,</span>  <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"0af23e0d-03ab-4cb9-8f52-2c7f7e094023"</span><span class="token punctuation">,</span>  <span class="token property">"jsonRpc"</span><span class="token operator">:</span> <span class="token string">"1.0"</span><span class="token punctuation">,</span>  <span class="token property">"method"</span><span class="token operator">:</span> <span class="token string">"add"</span><span class="token punctuation">,</span>  <span class="token property">"params"</span><span class="token operator">:</span> <span class="token string">"[1,2]"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后这个对象又会转化成<code>Req</code>对象，这个对象是实现<code>Parcelable</code>接口的，用于2个进程之间通信。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Req</span> <span class="token keyword">implements</span> <span class="token class-name">Parcelable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> uuid<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> payload<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Req</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> uuid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUuid</span><span class="token punctuation">(</span><span class="token class-name">String</span> uuid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uuid <span class="token operator">=</span> uuid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> payload<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPayload</span><span class="token punctuation">(</span><span class="token class-name">String</span> payload<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>payload <span class="token operator">=</span> payload<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Creator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Req</span><span class="token punctuation">></span></span> <span class="token function">getCREATOR</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> CREATOR<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Req&#123;"</span> <span class="token operator">+</span>                <span class="token string">"uuid='"</span> <span class="token operator">+</span> uuid <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", payload='"</span> <span class="token operator">+</span> payload <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token class-name">Req</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> in<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        uuid <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        payload <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Creator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Req</span><span class="token punctuation">></span></span> CREATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Creator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Req</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Req</span> <span class="token function">createFromParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> in<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Req</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Req</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Req</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">describeContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> dest<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dest<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>        dest<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的请求最终的信息变成了这样，这个不是json，是Java的toString方法返回的。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">Req<span class="token punctuation">&#123;</span>uuid='f6a8028a-3cba-4abf-912b-ee7979923fb5'<span class="token punctuation">,</span> payload='<span class="token punctuation">&#123;</span><span class="token property">"clazz"</span><span class="token operator">:</span><span class="token string">"cn.mycommons.bifrost.demo.api.INumberApi"</span><span class="token punctuation">,</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"0af23e0d-03ab-4cb9-8f52-2c7f7e094023"</span><span class="token punctuation">,</span><span class="token property">"jsonRpc"</span><span class="token operator">:</span><span class="token string">"1.0"</span><span class="token punctuation">,</span><span class="token property">"method"</span><span class="token operator">:</span><span class="token string">"add"</span><span class="token punctuation">,</span><span class="token property">"params"</span><span class="token operator">:</span><span class="token string">"[1,2]"</span><span class="token punctuation">&#125;</span>'<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当另外一个进程获取到这些数据后，那么会做对应的反序列化，再次转化成<code>Req</code>，然后又可以得到<code>RpcRequest</code>。</p><p>当取到RpcRequest时候，可以根据里面的信息，获取当前调用接口的实现类，然后利用反射完成调用操作，得到结果后再次把结果转成json。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BifrostAidlImpl</span> <span class="token keyword">extends</span> <span class="token class-name">BifrostAidl<span class="token punctuation">.</span>Stub</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Resp</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token class-name">Req</span> req<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Timber</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"%s-->exec"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Timber</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"req = %s"</span><span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> data <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RpcRequest</span> rpcRequest <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token class-name">RpcRequest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Timber</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"rpcRequest = %s"</span><span class="token punctuation">,</span> rpcRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">.</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> m <span class="token operator">:</span> clazz<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    method <span class="token operator">=</span> m<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">TextUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">JSONArray</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONArray</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">String</span> o <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                        args<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> types<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">Object</span> instance <span class="token operator">=</span> <span class="token class-name">Bifrost</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Timber</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"instance = %s"</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Timber</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"method = %s"</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Timber</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"types = %s"</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>types<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Timber</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"params = %s"</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Timber</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"result = %s"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token class-name">RespUtil</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getUuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rpcRequest<span class="token punctuation">.</span>id<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"method "</span> <span class="token operator">+</span> rpcRequest<span class="token punctuation">.</span>method <span class="token operator">+</span> <span class="token string">" cant not find"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Timber</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// e.printStackTrace();</span>            <span class="token keyword">return</span> <span class="token class-name">RespUtil</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getUuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rpcRequest<span class="token punctuation">.</span>id<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>json也会转成<code>Resp</code>，返回到原始的进程。然后解析数据，当做函数返回值。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体来说，这个流程还是蛮清晰的，就是利用一个aidl通道，然后自己定义调用协议，我这边参考了JSON RPC协议。当然了也可以参考其他的，这里不再表述。</p><p>整理下优缺点吧：</p><p><strong>优点</strong></p><ul><li><p>使用和调用简单，无上手压力</p></li><li><p>无需实现<code>Parcelable</code>接口，代码简洁</p></li></ul><p><strong>缺点</strong></p><ul><li><p>因为涉及到json转换，所以需要依赖<code>gson</code></p></li><li><p>调用过程中含有多次json序列化与反序列化，有反射操作，可能会有性能影响</p></li><li><p>接口方法中的参数和返回值必须要是基本的类型，支持josn序列化和反序列化，但原始的<code>AIDL</code>方式基本上也是一样，所以这条可以接受</p></li></ul><h2 id="后续安排"><a href="#后续安排" class="headerlink" title="后续安排"></a>后续安排</h2><p>暂时只是实现简单的Demo，只是验证这个思路是否可行，后续会做些优化操作，如有朋友有兴趣，可以一起参与，本人联系方式 <a href="mailto:&#x78;&#x69;&#97;&#x71;&#105;&#x75;&#108;&#x65;&#105;&#x40;&#x31;&#x32;&#x36;&#46;&#99;&#111;&#109;">&#x78;&#x69;&#97;&#x71;&#105;&#x75;&#108;&#x65;&#105;&#x40;&#x31;&#x32;&#x36;&#46;&#99;&#111;&#109;</a>。</p><ul><li><p>支持异步操作，支持回调函数，可参考Retroft调用方式，可支持RxJava操作</p></li><li><p>被调用进程支持线程池，增加并发量</p></li><li><p>单独的日志操作，不依赖Timber</p></li><li><p>支持同进程和夸进程调用</p></li><li><p>支持事件的通知、发送，可参考BroadcastReceiver，EventBus等。</p></li><li><p>….</p></li></ul><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="http://wiki.geekdream.com/Specification/json-rpc_2.0.html">JSON RPC 规范</a></p><p><a href="https://github.com/LiushuiXiaoxia/Bifrost">Bifrost Github</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 跨进程通信 </tag>
            
            <tag> JSON RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 项目自动发布</title>
      <link href="/2018/04/24/SpringBootDeploy/"/>
      <url>/2018/04/24/SpringBootDeploy/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-项目自动发布"><a href="#Spring-Boot-项目自动发布" class="headerlink" title="Spring Boot 项目自动发布"></a>Spring Boot 项目自动发布</h1><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在公司从移动端转后端已经快一年了，使用的技术框架一直是Spring Boot，和以前大学时候基于Tomcat的不太一样。</p><p>这篇文章简单介绍下如何发布Spring Boot 项目，原先使用Tomcat时候，发布的文件是war文件，现在使用Spring Boot就变得很简单了，直接是一个jar文件，启动方式按照启动jar文件方式即可。</p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>使用Idea创建一个带Spring Boot的项目，使用gradle管理项目。</p><p>使用gradle依赖很简单，同时创建两个Controller，一个用户表示线上api接口，一个表示心跳接口，用于测试。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    <span class="token function">compileOnly</span><span class="token punctuation">(</span><span class="token string">'org.projectlombok:lombok'</span><span class="token punctuation">)</span>    <span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">'org.springframework.boot:spring-boot-starter-web'</span><span class="token punctuation">)</span>    <span class="token function">testCompile</span><span class="token punctuation">(</span><span class="token string">'org.springframework.boot:spring-boot-starter-test'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;app.env&#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> env<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello>>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"env"</span><span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"map = "</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeartbeatController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/heartbeat"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">heartbeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时配置好对应的配置文件，我这有三个配置文件，一个dev环境，一个表示prod环境，还有一个表示开关。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-029afdd83e348a09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>Spring支持选择对应的config文件，开发时候，配置成dev，则生效的文件<code>application-dev.properties</code>。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token comment">#spring.profiles.active=prod</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>dev</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span><span class="token attr-name">app.env</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token attr-name">logging.config</span><span class="token punctuation">=</span><span class="token attr-value">classpath:logback-spring.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>prod</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8088</span><span class="token attr-name">app.env</span><span class="token punctuation">=</span><span class="token attr-value">prod</span><span class="token attr-name">logging.config</span><span class="token punctuation">=</span><span class="token attr-value">classpath:logback-spring.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我这边用<code>app.env</code>字段表示不同环境的内容，实际情况，可以配置数据库的内容，开发和线上的数据库是不一样的。</p><p>启动程序，然后测试下请求。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://127.0.0.1:8080/hello    <span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token builtin class-name">:</span><span class="token string">"world"</span>,<span class="token string">"env"</span><span class="token builtin class-name">:</span><span class="token string">"dev"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>数据是正常的，env读取的也是dev数据。</p><h2 id="编译和发布"><a href="#编译和发布" class="headerlink" title="编译和发布"></a>编译和发布</h2><p>由于项目使用gradle管理，那么在发布时候，直接使用gradle命令编译即可，命令如下，clean是可选的，不过一般在本地开发然后再发布，建议先clean下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./gradlew clean build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译成功后，在项目生成目录中可以找到对应的jar文件，路径是<code>./build/libs/springboot-deploy-demo-0.0.1-SNAPSHOT.jar</code>。</p><p>可以直接使用java命令来启动。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-0d1142420338eedd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>为了方便起见我在项目中写个简单脚本，编译成功后，复制目标文件到相应的目录，然后直接同步到服务器即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span>./gradlew clean build<span class="token function">cp</span> build/libs/* deploy/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>deploy 目录除了有目标文件外，还有线上环境的配置文件，几个服务启动停止shell文件。</p><p>start.sh，很简单，在启动前，检查是否已经启动，在没有启动情况下，在启动服务。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token comment">#get pwd</span><span class="token assign-left variable">DIR_HOME</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">BASH_SOURCE</span>-$0&#125;</span>"</span><span class="token assign-left variable">DIR_HOME</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">"<span class="token variable">$DIR_HOME</span>"</span><span class="token variable">)</span></span>"</span><span class="token assign-left variable">PRGDIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$&#123;DIR_HOME&#125;</span>"</span><span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>"</span><span class="token assign-left variable">jarfile</span><span class="token operator">=</span><span class="token variable">$PRGDIR</span>/springboot-deploy-demo-0.0.1-SNAPSHOT.jar<span class="token comment">#get runing pid</span><span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> java <span class="token operator">|</span> <span class="token function">grep</span> $jarfile <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">)</span></span><span class="token comment">#create log dir</span><span class="token function">mkdir</span> -p <span class="token variable">$PRGDIR</span>/log/<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$pid</span>"</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"ERROR: <span class="token variable">$jarfile</span> is running! pid=<span class="token variable">$pid</span>. You must stop it first!"</span><span class="token keyword">else</span>    <span class="token function">nohup</span> java -jar <span class="token variable">$jarfile</span> -Dfile.encoding<span class="token operator">=</span>UTF-8 --spring.config.location<span class="token operator">=</span><span class="token variable">$PRGDIR</span>/ <span class="token operator">></span><span class="token variable">$PRGDIR</span>/log/start.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>    <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> java <span class="token operator">|</span> <span class="token function">grep</span> $jarfile <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">)</span></span>    <span class="token builtin class-name">echo</span> <span class="token string">"INFO: <span class="token variable">$jarfile</span> is running! pid=<span class="token variable">$pid</span>"</span>    <span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">"http://127.0.0.1:8088/heartbeat"</span><span class="token punctuation">;</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$url</span>    <span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token boolean">true</span> <span class="token punctuation">]</span>    <span class="token keyword">do</span>        <span class="token function">sleep</span> <span class="token number">1</span>        <span class="token assign-left variable">HTTP_CODE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">curl</span> -G -m <span class="token number">10</span> -o /dev/null -s -w %<span class="token punctuation">&#123;</span>http_code<span class="token punctuation">&#125;</span> $url<span class="token variable">`</span></span>        <span class="token builtin class-name">echo</span> <span class="token string">"http code: <span class="token variable">$&#123;HTTP_CODE&#125;</span>"</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;HTTP_CODE&#125;</span> -eq <span class="token number">200</span> <span class="token punctuation">]</span>        <span class="token keyword">then</span>            <span class="token builtin class-name">echo</span> <span class="token string">"server start success..."</span>            <span class="token builtin class-name">exit</span> <span class="token number">0</span>        <span class="token keyword">fi</span>    <span class="token keyword">done</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时启动前，需要配置spring boot运行的参数，最重要的有Spring Boot启动的配置文件的位置<code>--spring.config.location</code>，我配置的位置是<code>./</code>。</p><p>需要注意的是，prod的配置文件，一些参数需要注意路径，开发中路径是<code>classpath:</code>开头，线上是不需要的，当然了也是根据实际情况来看。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8088</span><span class="token attr-name">app.env</span><span class="token punctuation">=</span><span class="token attr-value">prod</span><span class="token attr-name">logging.config</span><span class="token punctuation">=</span><span class="token attr-value">logback-spring.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在启动服务后，会尝试调用相应的接口，测试启动是否成功。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">"http://127.0.0.1:8088/heartbeat"</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token variable">$url</span><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token boolean">true</span> <span class="token punctuation">]</span><span class="token keyword">do</span>    <span class="token function">sleep</span> <span class="token number">1</span>    <span class="token assign-left variable">HTTP_CODE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">curl</span> -G -m <span class="token number">10</span> -o /dev/null -s -w %<span class="token punctuation">&#123;</span>http_code<span class="token punctuation">&#125;</span> $url<span class="token variable">`</span></span>    <span class="token builtin class-name">echo</span> <span class="token string">"http code: <span class="token variable">$&#123;HTTP_CODE&#125;</span>"</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;HTTP_CODE&#125;</span> -eq <span class="token number">200</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"server start success..."</span>        <span class="token builtin class-name">exit</span> <span class="token number">0</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>stop.sh</p><p>停止服务很简单，直接查找对应的进程，然后杀掉，这里需要注意进程名字是以jar文件来查找的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token assign-left variable">process</span><span class="token operator">=</span>springboot-deploy-demo-0.0.1-SNAPSHOT.jar<span class="token assign-left variable">ifrun</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> $process <span class="token operator">|</span> <span class="token function">grep</span> java<span class="token variable">)</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$ifrun</span>"</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token function">kill</span> -9 <span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> $process <span class="token operator">|</span> <span class="token function">grep</span> java <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">`</span></span>    <span class="token builtin class-name">echo</span> <span class="token string">"INFO: <span class="token variable">$process</span> is stoped!"</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"WARN: Not found <span class="token variable">$process</span> running."</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>restart.sh</p><p>这个比较简单，就是先停止，再启动。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>./stop.sh./start.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="同步到服务器"><a href="#同步到服务器" class="headerlink" title="同步到服务器"></a>同步到服务器</h2><p>这里做简单演示，我使用的是Ubuntu虚拟机，使用scp命令上传到服务器上，实际情况可以根据自己需求来选择，比如使用svn，ftp等。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> deploy/* xiaqiulei@192.168.153.134:~/deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后ssh登陆上<code>192.168.153.134</code>机器，进入<code>deploy</code>目录，执行<code>./start</code>即可。</p><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">scp</span> deploy/* xiaqiulei@192.168.153.134:~/deployxiaqiulei@192.168.153.134<span class="token string">'s password: application-prod.properties                                                                                                                                                                  100%   63    84.7KB/s   00:00    application.properties                                                                                                                                                                       100%   27    26.4KB/s   00:00    deploy/log: not a regular filelogback-spring.xml                                                                                                                                                                           100%  881   753.4KB/s   00:00    restart.sh                                                                                                                                                                                   100%   32    23.3KB/s   00:00    springboot-deploy-demo-0.0.1-SNAPSHOT.jar                                                                                                                                                    100%   15MB  32.5MB/s   00:00    start.sh                                                                                                                                                                                     100%  970     1.5MB/s   00:00    stop.sh                                                                                                                                                                                      100%  291   169.0KB/s   00:00    $ ssh xiaqiulei@192.168.153.134xiaqiulei@192.168.153.134'</span>s password: Welcome to Ubuntu <span class="token number">16.04</span>.3 LTS <span class="token punctuation">(</span>GNU/Linux <span class="token number">4.4</span>.0-109-generic x86_64<span class="token punctuation">)</span> * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantage<span class="token number">299</span> packages can be updated.<span class="token number">161</span> updates are security updates.Last login: Tue Apr <span class="token number">24</span> <span class="token number">23</span>:04:57 <span class="token number">2018</span> from <span class="token number">192.168</span>.153.1<span class="token comment"># xiaqiulei @ ubuntu in ~ [23:07:59] </span>$ <span class="token builtin class-name">cd</span> deploy <span class="token comment"># xiaqiulei @ ubuntu in ~/deploy [23:08:01] </span>$ ./start.sh INFO: /home/xiaqiulei/deploy/springboot-deploy-demo-0.0.1-SNAPSHOT.jar is running<span class="token operator">!</span> <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token number">4645</span>http://127.0.0.1:8088/heartbeathttp code: 000http code: 000http code: 000http code: 000http code: 000http code: <span class="token number">200</span>server start success<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文只是简单介绍使相关脚本发布Spring Boot服务到linux机器上，基本满足小项目需求。</p><p>当然了，还有不够完善的地方，比如启动的方式是<code>nohup</code>，当进程挂掉以后，不能够自动重启，高级的用法是使用<code>supervisor</code>。</p><p>再比如，scp同步的时候，都是简单的文件覆盖，比较友好的方式是，先备份原先的文件，然后再同步文件，这样如果服务有问题，还可以回滚。</p><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/LiushuiXiaoxia/springboot-deploy-demo">源码地址 https://github.com/LiushuiXiaoxia/springboot-deploy-demo</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Boot Deploy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android KTX简介</title>
      <link href="/2018/02/07/Android-KTX/"/>
      <url>/2018/02/07/Android-KTX/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-KTX简介"><a href="#Android-KTX简介" class="headerlink" title="Android KTX简介"></a>Android KTX简介</h1><hr><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>昨天Google爸爸又发布了一个Android工具库，是使用Kotlin实现了。自从17年5月份声明支持Kotlin作为Android官方开发语言以来，Google爸爸对Kotlin的态度还是很积极的。<br>而且Jake大神后面也加入了Google，从博客的内容来看，也是这个类库也是出自Jake大神之手，所以特来拜读下。</p><span id="more"></span><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p>从官方简介来看，主要是对Android原始的Api做了一些扩展，方便开发调用，使代码更加自然和简单,下面列举几个例子，详细的API介绍可以参考官方API文档。</p><h3 id="字符串转为URI"><a href="#字符串转为URI" class="headerlink" title="字符串转为URI"></a>字符串转为URI</h3><p>通常情况下为<code>Uri.parse(uriString)</code>，但是Android KTX 会为字符串添加一个扩展函数，使字符串更加自然地转换为 URI。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// Kotlin</span><span class="token keyword">val</span> uri <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>uriString<span class="token punctuation">)</span><span class="token comment">// android KTX</span><span class="token keyword">val</span> uri <span class="token operator">=</span> uriString<span class="token punctuation">.</span><span class="token function">toUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SharedPreferences"><a href="#SharedPreferences" class="headerlink" title="SharedPreferences"></a>SharedPreferences</h3><p>SharedPreferences也经常使用，使用 Android KTX后，代码也简介不少。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// kotlin</span>sharedPreferences<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">putBoolean</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// KTX</span>sharedPreferences<span class="token punctuation">.</span><span class="token function">edit</span> <span class="token punctuation">&#123;</span>    <span class="token function">putBoolean</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><p>两个路径之间的距离改变了100px</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// kotlin</span><span class="token keyword">val</span> pathDifference <span class="token operator">=</span> <span class="token function">Path</span><span class="token punctuation">(</span>myPath1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">&#123;</span>    <span class="token function">op</span><span class="token punctuation">(</span>myPath2<span class="token punctuation">,</span> Path<span class="token punctuation">.</span>Op<span class="token punctuation">.</span>DIFFERENCE<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>canvas<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">val</span> checkpoint <span class="token operator">=</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0F</span><span class="token punctuation">,</span> <span class="token number">100F</span><span class="token punctuation">)</span>  <span class="token function">drawPath</span><span class="token punctuation">(</span>pathDifference<span class="token punctuation">,</span> myPaint<span class="token punctuation">)</span>  <span class="token function">restoreToCount</span><span class="token punctuation">(</span>checkpoint<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// KTX</span><span class="token keyword">val</span> pathDifference <span class="token operator">=</span> myPath1 <span class="token operator">-</span> myPath2canvas<span class="token punctuation">.</span><span class="token function">withTranslation</span><span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token number">100F</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">drawPath</span><span class="token punctuation">(</span>pathDifference<span class="token punctuation">,</span> myPaint<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="View的onPreDraw监听"><a href="#View的onPreDraw监听" class="headerlink" title="View的onPreDraw监听"></a>View的onPreDraw监听</h3><p>触发了视图中 onPreDraw 的回调</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; kotlinview.viewTreeObserver.addOnPreDrawListener(    object : ViewTreeObserver.OnPreDrawListener &#123;        override fun onPreDraw(): Boolean &#123;            viewTreeObserver.removeOnPreDrawListener(this)            actionToBeTriggered()            return true        &#125;    &#125;)&#x2F;&#x2F; KTXview.doOnPreDraw &#123;     actionToBeTriggered()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码接入"><a href="#代码接入" class="headerlink" title="代码接入"></a>代码接入</h2><p>代码接入也很简单，首先项目代码必须接入kotlin，这里不做介绍，直接使用Android Studio创建基于Kotlin的项目即可，然后添加相关依赖，现在的版本还是<code>0.1</code>。</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">repositories &#123;    google()&#125;dependencies &#123;    implementation &#39;androidx.core:core-ktx:0.1&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h2><p>透过现象看本质，这样使用起来就不会迷惑，而且遇到问题也能方便排查。</p><p>主要使用Kotlin语言的几个特性，了解了这些特性后，我们自己也能很方便的进行封装，这样就形成了我们自己的类库，便于自己技术的沉淀。</p><h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h3><p>上面的第一个例子，uri的封装就是利用了这个，Kotlin的<a href="http://kotlinlang.org/docs/reference/extensions.html">官方文档</a>也有介绍。</p><p>直接看源码就行了。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span> String<span class="token punctuation">.</span><span class="token function">toUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Uri <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其实就是对String做了一个扩展，如果使用Java的就很容易理解，如下所示，这种方式在日常开发中也很容易见到。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringUtil</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Uri</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">String</span> uriString<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>uriString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Lambdas"><a href="#Lambdas" class="headerlink" title="Lambdas"></a>Lambdas</h3><p>第二个例子主要使用了Lambdas这个特性，Kotlin文档在<a href="http://kotlinlang.org/docs/reference/lambdas.html">这里</a>。</p><p>还是贴代码，首先对<code>SharedPreferences</code>做了扩展，然后这个扩展函数的参数是一个闭包，当函数最后一个参数是闭包的时候，函数的括号可以直接省略，然后在后面接上闭包就行了。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span> SharedPreferences<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span>action<span class="token operator">:</span> SharedPreferences<span class="token punctuation">.</span>Editor<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> editor <span class="token operator">=</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">action</span><span class="token punctuation">(</span>editor<span class="token punctuation">)</span>    editor<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Default-Arguments"><a href="#Default-Arguments" class="headerlink" title="Default Arguments"></a>Default Arguments</h3><p>这个特性上面的例子没有，可以单独列举，如下所示。官方文档<a href="http://kotlinlang.org/docs/reference/functions.html#default-arguments">介绍</a>。<br>也是就说，当一个函数中含有多个参数时候，不需要像Java中那样，依次赋值，可以仅仅赋需要的即可，Java中常见的解决的方法是方法重载，挨个传入默认值。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> ViewTest <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> context <span class="token operator">=</span> InstrumentationRegistry<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> view <span class="token operator">=</span> <span class="token function">View</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>    <span class="token annotation builtin">@Test</span>    <span class="token keyword">fun</span> <span class="token function">updatePadding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        view<span class="token punctuation">.</span><span class="token function">updatePadding</span><span class="token punctuation">(</span>top <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> view<span class="token punctuation">.</span>paddingLeft<span class="token punctuation">)</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> view<span class="token punctuation">.</span>paddingTop<span class="token punctuation">)</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> view<span class="token punctuation">.</span>paddingRight<span class="token punctuation">)</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> view<span class="token punctuation">.</span>paddingBottom<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看<code>updatePadding</code>方法定义。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> View<span class="token punctuation">.</span><span class="token function">updatePadding</span><span class="token punctuation">(</span>    <span class="token annotation builtin">@Px</span> left<span class="token operator">:</span> Int <span class="token operator">=</span> paddingLeft<span class="token punctuation">,</span>    <span class="token annotation builtin">@Px</span> top<span class="token operator">:</span> Int <span class="token operator">=</span> paddingTop<span class="token punctuation">,</span>    <span class="token annotation builtin">@Px</span> right<span class="token operator">:</span> Int <span class="token operator">=</span> paddingRight<span class="token punctuation">,</span>    <span class="token annotation builtin">@Px</span> bottom<span class="token operator">:</span> Int <span class="token operator">=</span> paddingBottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setPadding</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于默认参数，还可以这样玩，比如在Java中，常见的有建造在模式，对每个参数进行赋值，然后创建一个对象，如果使用这种特性，不需要改变的值，可以直接用默认值表示，这样在编码的时候，就会显得很简洁。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://android-developers.googleblog.com/">官方博客</a></p><p><a href="https://github.com/android/android-ktx/">Github链接</a></p><p><a href="https://android.github.io/android-ktx/core-ktx/">API参考文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> Kotlin </tag>
            
            <tag> KTX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot集成Kafka</title>
      <link href="/2017/11/26/SpringBoot-Kafka/"/>
      <url>/2017/11/26/SpringBoot-Kafka/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot集成Kafka"><a href="#Spring-Boot集成Kafka" class="headerlink" title="Spring Boot集成Kafka"></a>Spring Boot集成Kafka</h1><hr><h2 id="前提介绍"><a href="#前提介绍" class="headerlink" title="前提介绍"></a>前提介绍</h2><p>由于公司使用了微服务架构，很多业务拆成了很多小模块。<br>有个场景是这样的A服务主要负责写入或者修改数据库中的数据，B服务主要负责读取，B服务使用缓存技术，当A发生了修改后，需要通知B来清除缓存。<br>中间两个服务之间通知使用了Kafka，这个是本篇文章主要介绍的，关于 <a href="https://github.com/LiushuiXiaoxia/SpringCacheDemo">缓存技术</a> 我也简单介绍过。</p><span id="more"></span><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://kafka.apache.org/intro">Kafka官网</a></p><p>Kafka is a distributed,partitioned,replicated commit logservice。它提供了类似于JMS的特性，但是在实现上完全不同，此外它并不是JMS规范的实现。<br>kafka对消息保存时根据Topic进行归类，发送消息者成为Producer,消息接受者成为Consumer,此外kafka集群有多个kafka实例组成，每个实例成为broker。<br>无论是kafka集群，还是producer和consumer都依赖于zookeeper来保证系统可用性集群保存一些meta信息。</p><p><img src="https://kafka.apache.org/10/images/kafka-apis.png"></p><h3 id="Topics-amp-logs"><a href="#Topics-amp-logs" class="headerlink" title="Topics &amp; logs"></a>Topics &amp; logs</h3><p>一个Topic可以认为是一类消息，每个topic将被分成多个partition(区),每个partition在存储层面是append log文件。任何发布到此partition的消息都会被直接追加到log文件的尾部，每条消息在文件中的位置称为offset（偏移量），offset为一个long型数字，它是唯一标记一条消息。它唯一的标记一条消息。kafka并没有提供其他额外的索引机制来存储offset，因为在kafka中几乎不允许对消息进行“随机读写”。</p><p><img src="https://kafka.apache.org/10/images/log_anatomy.png"></p><p> kafka和JMS（Java Message Service）实现(activeMQ)不同的是:即使消息被消费,消息仍然不会被立即删除.日志文件将会根据broker中的配置要求,保留一定的时间之后删除;比如log文件保留2天,那么两天后,文件会被清除,无论其中的消息是否被消费.kafka通过这种简单的手段,来释放磁盘空间,以及减少消息消费之后对文件内容改动的磁盘IO开支.</p><p>对于consumer而言,它需要保存消费消息的offset,对于offset的保存和使用,有consumer来控制;当consumer正常消费消息时,offset将会”线性”的向前驱动,即消息将依次顺序被消费.事实上consumer可以使用任意顺序消费消息,它只需要将offset重置为任意值..(offset将会保存在zookeeper中,参见下文)</p><p>kafka集群几乎不需要维护任何consumer和producer状态信息,这些信息有zookeeper保存;因此producer和consumer的实现非常轻量级,它们可以随意离开,而不会对集群造成额外的影响.</p><p>partitions的目的有多个.最根本原因是kafka基于文件存储.通过分区,可以将日志内容分散到多个上,来避免文件尺寸达到单机磁盘的上限,每个partiton都会被当前server(kafka实例)保存;可以将一个topic切分多任意多个partitions,来消息保存/消费的效率.此外越多的partitions意味着可以容纳更多的consumer,有效提升并发消费的能力.(具体原理参见下文).</p><h3 id="Distribution"><a href="#Distribution" class="headerlink" title="Distribution"></a>Distribution</h3><p>一个Topic的多个partitions,被分布在kafka集群中的多个server上;每个server(kafka实例)负责partitions中消息的读写操作;此外kafka还可以配置partitions需要备份的个数(replicas),每个partition将会被备份到多台机器上,以提高可用性.</p><p>基于replicated方案,那么就意味着需要对多个备份进行调度;每个partition都有一个为”leader”;leader负责所有的读写操作,如果leader失效,那么将会有其他follower来接管(成为新的leader);follower只是单调的和leader跟进,同步消息即可..由此可见作为leader的server承载了全部的请求压力,因此从集群的整体考虑,有多少个partitions就意味着有多少个”leader”,kafka会将”leader”均衡的分散在每个实例上,来确保整体的性能稳定.</p><h3 id="Producers"><a href="#Producers" class="headerlink" title="Producers"></a>Producers</h3><p>Producer将消息发布到指定的Topic中,同时Producer也能决定将此消息归属于哪个partition;比如基于”round-robin”方式或者通过其他的一些算法等.</p><h3 id="Consumers"><a href="#Consumers" class="headerlink" title="Consumers"></a>Consumers</h3><p>本质上kafka只支持Topic.每个consumer属于一个consumer group;反过来说,每个group中可以有多个consumer.发送到Topic的消息,只会被订阅此Topic的每个group中的一个consumer消费.</p><p>如果所有的consumer都具有相同的group,这种情况和queue模式很像;消息将会在consumers之间负载均衡.<br>如果所有的consumer都具有不同的group,那这就是”发布-订阅”;消息将会广播给所有的消费者.<br>在kafka中,一个partition中的消息只会被group中的一个consumer消费;每个group中consumer消息消费互相独立;我们可以认为一个group是一个”订阅”者,一个Topic中的每个partions,只会被一个”订阅者”中的一个consumer消费,不过一个consumer可以消费多个partitions中的消息.kafka只能保证一个partition中的消息被某个consumer消费时,消息是顺序的.事实上,从Topic角度来说,消息仍不是有序的.</p><p>kafka的原理决定,对于一个topic,同一个group中不能有多于partitions个数的consumer同时消费,否则将意味着某些consumer将无法得到消息.</p><h3 id="Guarantees"><a href="#Guarantees" class="headerlink" title="Guarantees"></a>Guarantees</h3><ul><li><p>发送到partitions中的消息将会按照它接收的顺序追加到日志中</p></li><li><p>对于消费者而言,它们消费消息的顺序和日志中消息顺序一致.</p></li><li><p>如果Topic的”replicationfactor”为N,那么允许N-1个kafka实例失效.</p></li></ul><h2 id="Kafka安装与使用"><a href="#Kafka安装与使用" class="headerlink" title="Kafka安装与使用"></a>Kafka安装与使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>我使用的是Mac，下面介绍如何使用安装。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">brew updatebrew install kafka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">To have launchd start kafka now and restart at login:  brew services start kafkaOr, if you don&#39;t want&#x2F;need a background service you can just run:  zookeeper-server-start &#x2F;usr&#x2F;local&#x2F;etc&#x2F;kafka&#x2F;zookeeper.properties &amp; kafka-server-start &#x2F;usr&#x2F;local&#x2F;etc&#x2F;kafka&#x2F;server.properties&#x3D;&#x3D;&gt; Summary🍺  &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;kafka&#x2F;0.11.0.1: 149 files, 35.5MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果显示，需要有2个配置文件</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">&#x2F;usr&#x2F;local&#x2F;etc&#x2F;kafka&#x2F;server.properties&#x2F;usr&#x2F;local&#x2F;etc&#x2F;kafka&#x2F;zookeeper.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h3><p>这里为了简单，直接使用<code>brew services start kafka</code>和<code>brew services start zookeeper</code>来启动服务。</p><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>首先找到kafka安装目录，可以直接使用<code>brew info kafka</code>，可以看出安装目录为<code>/usr/local/Cellar/kafka/0.11.0.1</code>，然后cd到这个目录下面。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">brew info kafkakafka: stable 0.11.0.1 (bottled)Publish-subscribe messaging rethought as a distributed commit loghttps:&#x2F;&#x2F;kafka.apache.org&#x2F;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;kafka&#x2F;0.11.0.1 (156 files, 36.0MB) *  Poured from bottle on 2017-11-26 at 14:09:18From: https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;homebrew-core&#x2F;blob&#x2F;master&#x2F;Formula&#x2F;kafka.rb&#x3D;&#x3D;&gt; DependenciesRequired: zookeeper ✔&#x3D;&#x3D;&gt; RequirementsRequired: java &#x3D; 1.8 ✔&#x3D;&#x3D;&gt; CaveatsTo have launchd start kafka now and restart at login:  brew services start kafkaOr, if you don&#39;t want&#x2F;need a background service you can just run:  zookeeper-server-start &#x2F;usr&#x2F;local&#x2F;etc&#x2F;kafka&#x2F;zookeeper.properties &amp; kafka-server-start &#x2F;usr&#x2F;local&#x2F;etc&#x2F;kafka&#x2F;server.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个<code>abc123</code>的topic</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">&#x2F;bin&#x2F;kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic abc123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看创建的topic</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">.&#x2F;bin&#x2F;kafka-topics --list --zookeeper localhost:2181<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/SpringKafkaDemo/master/doc/1.png" alt="kafka"></p><h3 id="消息发送与消费"><a href="#消息发送与消费" class="headerlink" title="消息发送与消费"></a>消息发送与消费</h3><p>Kafka提供了一个命令行客户端，它将从文件或标准输入接收输入，并将其作为消息发送到Kafka集群。默认情况下，每行都将作为单独的消息发送。</p><p>运行生产者，然后在控制台中键入一些消息发送到服务器。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">.&#x2F;bin&#x2F;kafka-console-producer --broker-list localhost:9092 --topic abc123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Kafka还有一个命令行消费者，将消息转储到标准输出。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">.&#x2F;bin&#x2F;kafka-console-consumer --bootstrap-server localhost:9092 --topic abc123 --from-beginning<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/SpringKafkaDemo/master/doc/2.png" alt="kafka"></p><p>如图，上面的是生产者，下面的是消费者，依次发送aaa,bbb,….ggg，消费者依次会收到对应的消息。</p><h2 id="Spring-Boot集成"><a href="#Spring-Boot集成" class="headerlink" title="Spring Boot集成"></a>Spring Boot集成</h2><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>直接使用Idea创建一个Spring Boot项目即可，同时添加<code>Lombok</code>和<code>Kafka</code>库。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/SpringKafkaDemo/master/doc/spring_boot_1.png"></p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/SpringKafkaDemo/master/doc/spring_boot_2.png"></p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/SpringKafkaDemo/master/doc/spring_boot_3.png"></p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/SpringKafkaDemo/master/doc/spring_boot_4.png"></p><p>也可以接添加依赖库。</p><p>Gralde 依赖</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">dependencies &#123;compile(&#39;org.springframework.boot:spring-boot-starter&#39;)compile(&#39;org.springframework.kafka:spring-kafka&#39;)compile(&#39;org.projectlombok:lombok&#39;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Maven 依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>配置<code>application.properties</code>文件中kafka属性。</p><pre class="line-numbers language-none"><code class="language-none"># kafkaspring.kafka.bootstrap-servers&#x3D;localhost:9092spring.kafka.consumer.group-id&#x3D;myGroupspring.kafka.consumer.key-deserializer&#x3D;org.apache.kafka.common.serialization.StringDeserializerspring.kafka.consumer.value-deserializer&#x3D;org.apache.kafka.common.serialization.StringDeserializerspring.kafka.producer.key-serializer&#x3D;org.apache.kafka.common.serialization.StringSerializerspring.kafka.producer.value-serializer&#x3D;org.apache.kafka.common.serialization.StringSerializer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>创建一个消息结构体</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> sendTime<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个消息发送者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaSender</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> kafkaTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setSendTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"abc123"</span><span class="token punctuation">,</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个消息消费者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaReceiver</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"abc123"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token keyword">record</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> kafkaMessage <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>kafkaMessage<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> message <span class="token operator">=</span> kafkaMessage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"record ="</span> <span class="token operator">+</span> <span class="token keyword">record</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"message ="</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在主程序中调用发送方法，模拟生产者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringKafkaDemoApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringKafkaDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KafkaSender</span> sender <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">KafkaSender</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行输出如下</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">record &#x3D;ConsumerRecord(topic &#x3D; abc123, partition &#x3D; 0, offset &#x3D; 17, CreateTime &#x3D; 1511678827095, checksum &#x3D; 2229762760, serialized key size &#x3D; -1, serialized value size &#x3D; 102, key &#x3D; null, value &#x3D; &#123;&quot;id&quot;:1511678826816,&quot;msg&quot;:&quot;2ff150e4-d7f9-4b4d-9604-b8d13a1d4538&quot;,&quot;sendTime&quot;:&quot;Nov 26, 2017 2:47:06 PM&quot;&#125;)message &#x3D;&#123;&quot;id&quot;:1511678826816,&quot;msg&quot;:&quot;2ff150e4-d7f9-4b4d-9604-b8d13a1d4538&quot;,&quot;sendTime&quot;:&quot;Nov 26, 2017 2:47:06 PM&quot;&#125;record &#x3D;ConsumerRecord(topic &#x3D; abc123, partition &#x3D; 0, offset &#x3D; 18, CreateTime &#x3D; 1511678830109, checksum &#x3D; 1589760372, serialized key size &#x3D; -1, serialized value size &#x3D; 102, key &#x3D; null, value &#x3D; &#123;&quot;id&quot;:1511678830108,&quot;msg&quot;:&quot;e1b93a1c-d88e-4b9b-8e1d-98e05edeb7c6&quot;,&quot;sendTime&quot;:&quot;Nov 26, 2017 2:47:10 PM&quot;&#125;)message &#x3D;&#123;&quot;id&quot;:1511678830108,&quot;msg&quot;:&quot;e1b93a1c-d88e-4b9b-8e1d-98e05edeb7c6&quot;,&quot;sendTime&quot;:&quot;Nov 26, 2017 2:47:10 PM&quot;&#125;record &#x3D;ConsumerRecord(topic &#x3D; abc123, partition &#x3D; 0, offset &#x3D; 19, CreateTime &#x3D; 1511678833110, checksum &#x3D; 4176540846, serialized key size &#x3D; -1, serialized value size &#x3D; 102, key &#x3D; null, value &#x3D; &#123;&quot;id&quot;:1511678833109,&quot;msg&quot;:&quot;f77fbb85-0eb9-402c-8265-c37987011551&quot;,&quot;sendTime&quot;:&quot;Nov 26, 2017 2:47:13 PM&quot;&#125;)message &#x3D;&#123;&quot;id&quot;:1511678833109,&quot;msg&quot;:&quot;f77fbb85-0eb9-402c-8265-c37987011551&quot;,&quot;sendTime&quot;:&quot;Nov 26, 2017 2:47:13 PM&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时原先的命令行消费者也会受到程序发送的消息。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/SpringKafkaDemo/master/doc/kafka_cli.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本人是刚刚入门的后端工程师，原先做过几年Java，说的比较简单，如有出错的地方，欢迎指正。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://kafka.apache.org/intro">Kafka官网</a></p><p><a href="https://www.cnblogs.com/likehua/p/3999538.html">kafka入门：简介、使用场景、设计原理、主要配置及集群搭建</a></p><p><a href="http://blog.csdn.net/u010046908/article/details/62229015">mac kafka 环境搭建</a></p><p><a href="http://blog.csdn.net/zoubf/article/details/54576270">spring boot与kafka集成</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cache与Redis结合使用</title>
      <link href="/2017/11/19/Spring-Cache-Redis/"/>
      <url>/2017/11/19/Spring-Cache-Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cache与Redis结合使用"><a href="#Spring-Cache与Redis结合使用" class="headerlink" title="Spring Cache与Redis结合使用"></a>Spring Cache与Redis结合使用</h1><hr><p>前不久做了一个需要查询多，更新少的功能，老司机同事建议用Redis来做缓存，同时结合Spring Cache来做，特来总结下。</p><span id="more"></span><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>Redis 是一个高性能key-value数据库，个人感觉就像java中的Map，不过比它更加强大。</p><p>由于我用的是Mac，下面介绍如何安装Redis。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew updatebrew <span class="token function">install</span> redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>开启服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew services start redisbrew services list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下面是我本机的运行截图</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-0681b36a99876f74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="创建Spring项目"><a href="#创建Spring项目" class="headerlink" title="创建Spring项目"></a>创建Spring项目</h2><p>我这边为了简单方便，直接使用了Spring Boot，直接用IntelJ Idea，需要添加<code>Redis</code>、<code>Cache</code>和<code>Lombok</code>库。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-a53244d3d8035cb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-bf26e80d9fdabdf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-a4070880af6988f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="集成Redis"><a href="#集成Redis" class="headerlink" title="集成Redis"></a>集成Redis</h2><p>集成Redis，直接在配置文件配置即可。</p><p>application.properties</p><pre class="line-numbers language-none"><code class="language-none">#redisspring.redis.host&#x3D;localhostspring.redis.port&#x3D;6379spring.redis.password&#x3D;spring.redis.timeout&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后测试下Redis是否集成功。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringcacheApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"value = "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"value = "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下，如果没有出错，则表示集成功。</p><pre class="line-numbers language-none"><code class="language-none">2017-11-19 14:56:10.075  INFO 73896 --- [           main] c.m.s.SpringcacheApplicationTests        : value &#x3D; world2017-11-19 14:56:10.076  INFO 73896 --- [           main] c.m.s.SpringcacheApplicationTests        : value &#x3D; null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Cache部分代码"><a href="#Cache部分代码" class="headerlink" title="Cache部分代码"></a>Cache部分代码</h2><p>配置CacheManager，它的实现部分是由RedisCacheManager来实现的，我们先设置缓存时间为3s，超过这个时间，缓存自动失效。</p><pre class="line-numbers language-none"><code class="language-none">@Configuration@EnableCachingpublic class CachingConfig &#123;    @Bean    public CacheManager cacheManager(RedisTemplate redisTemplate) &#123;        RedisCacheManager redisCacheManager &#x3D; new RedisCacheManager(redisTemplate);        redisCacheManager.setDefaultExpiration(3);        return redisCacheManager;    &#125;    @Bean    public CacheErrorHandler errorHandler() &#123;        return new RedisCacheErrorHandler();    &#125;    @Slf4j    private static class RedisCacheErrorHandler extends SimpleCacheErrorHandler &#123;        @Override        public void handleCacheGetError(RuntimeException exception, Cache cache, Object key) &#123;            log.error(&quot;handleCacheGetError key &#x3D; &#123;&#125;, value &#x3D; &#123;&#125;&quot;, key, cache);            log.error(&quot;cache get error&quot;, exception);        &#125;        @Override        public void handleCachePutError(RuntimeException exception, Cache cache, Object key, Object value) &#123;            log.error(&quot;handleCachePutError key &#x3D; &#123;&#125;, value &#x3D; &#123;&#125;&quot;, key, cache);            log.error(&quot;cache put error&quot;, exception);        &#125;        @Override        public void handleCacheEvictError(RuntimeException exception, Cache cache, Object key) &#123;            log.error(&quot;handleCacheEvictError key &#x3D; &#123;&#125;, value &#x3D; &#123;&#125;&quot;, key, cache);            log.error(&quot;cache evict error&quot;, exception);        &#125;        @Override        public void handleCacheClearError(RuntimeException exception, Cache cache) &#123;            log.error(&quot;handleCacheClearError value &#x3D; &#123;&#125;&quot;, cache);            log.error(&quot;cache clear error&quot;, exception);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加一个简单的实体，然后添加服务接口和实现类。</p><p><code>@Data</code>是lombok提供的，可以减少简洁代码。注意实体必须实现<code>Serializable</code>接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">></span></span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"addUser.user = "</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        db<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"user_cache"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"findById.id = "</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"user_cache"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"delete.id = "</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        db<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面<code>Cacheable</code>和<code>CacheEvict</code>就是Spring Cache提供的注解。具体说明如下。</p><ul><li><p>@Cacheable 作用和配置方法</p><ul><li><p>value、cacheNames<br>缓存的名称，在 spring 配置文件中定义，必须指定至少一个<br>例如: @Cacheable(value=”mycache”) @Cacheable(value={”cache1”,”cache2”}</p></li><li><p>key<br>缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合<br>例如: @Cacheable(value=”testcache”,key=”#userName”)</p></li><li><p>condition<br>缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存<br>例如：@Cacheable(value=”testcache”,condition=”#userName.length()&gt;2”)</p></li></ul></li><li><p>@CacheEvict 作用和配置方法</p><ul><li><p>value<br>缓存的名称，在 spring 配置文件中定义，必须指定至少一个<br>例如: @CacheEvict(value=”my cache”)</p></li><li><p>key<br>缓存的 key，可以为空，如果指定要按照 SpEL 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合<br>例如: @CacheEvict(value=”testcache”,key=”#userName”)</p></li><li><p>condition<br>缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存<br>例如: @CacheEvict(value=”testcache”,condition=”#userName.length()&gt;2”)</p></li><li><p>allEntries<br>是否清空所有缓存内容，缺省为 false，如果指定为 true，则方法调用后将立即清空所有缓存<br>例如: @CachEvict(value=”testcache”,allEntries=true)</p></li><li><p>beforeInvocation<br>是否在方法执行前就清空，缺省为 false，如果指定为 true，则在方法还没有执行的时候就清空缓存，缺省情况下，如果方法执行抛出异常，则不会清空缓存<br>例如: @CachEvict(value=”testcache”，beforeInvocation=true)</p></li></ul></li></ul><p>测试用例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建一个实体</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"admin@123.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加一个</span>        userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根据Id查询</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"user1 = "</span> <span class="token operator">+</span> userService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 等1s再次查询</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"user2 = "</span> <span class="token operator">+</span> userService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 等5s再次查询</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"user3 = "</span> <span class="token operator">+</span> userService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加一个</span>        userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根据Id查询</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"user4 = "</span> <span class="token operator">+</span> userService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 删除</span>        userService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根据Id查询</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"user5 = "</span> <span class="token operator">+</span> userService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果</p><pre class="line-numbers language-none"><code class="language-none">2017-11-19 15:08:35.732  INFO 76558 --- [           main] c.m.s.service.impl.UserServiceImpl       : addUser.user &#x3D; User(id&#x3D;100, name&#x3D;admin, email&#x3D;admin@123.com)2017-11-19 15:08:35.921  INFO 76558 --- [           main] c.m.s.service.impl.UserServiceImpl       : findById.id &#x3D; 1002017-11-19 15:08:35.951  INFO 76558 --- [           main] cn.mycommons.springcache.CacheTest       : user1 &#x3D; User(id&#x3D;100, name&#x3D;admin, email&#x3D;admin@123.com)2017-11-19 15:08:37.016  INFO 76558 --- [           main] cn.mycommons.springcache.CacheTest       : user2 &#x3D; User(id&#x3D;100, name&#x3D;admin, email&#x3D;admin@123.com)2017-11-19 15:08:42.019  INFO 76558 --- [           main] c.m.s.service.impl.UserServiceImpl       : findById.id &#x3D; 1002017-11-19 15:08:42.021  INFO 76558 --- [           main] cn.mycommons.springcache.CacheTest       : user3 &#x3D; User(id&#x3D;100, name&#x3D;admin, email&#x3D;admin@123.com)2017-11-19 15:08:42.021  INFO 76558 --- [           main] c.m.s.service.impl.UserServiceImpl       : addUser.user &#x3D; User(id&#x3D;100, name&#x3D;admin, email&#x3D;admin@123.com)2017-11-19 15:08:42.022  INFO 76558 --- [           main] cn.mycommons.springcache.CacheTest       : user4 &#x3D; User(id&#x3D;100, name&#x3D;admin, email&#x3D;admin@123.com)2017-11-19 15:08:42.023  INFO 76558 --- [           main] c.m.s.service.impl.UserServiceImpl       : delete.id &#x3D; 1002017-11-19 15:08:42.025  INFO 76558 --- [           main] c.m.s.service.impl.UserServiceImpl       : findById.id &#x3D; 1002017-11-19 15:08:42.025  INFO 76558 --- [           main] cn.mycommons.springcache.CacheTest       : user5 &#x3D; null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从结果来看，添加一个数据后，第一次，查询是从UserServiceImpl中获取，再次查询，则没有直接调用UserServiceImpl，直接返回了缓存结果。</p><p>当超过缓存时间后，再次去查询，我们这边设置缓存时间为3s，等待5s后，再次查询，发现又从UserServiceImpl中获取数据。</p><p>当我们主动调用删除记录，同时同步清楚缓存数据后，发现查询是没有数据的。说明删除和清楚缓存操作实现了同步。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring cache </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>是时候来一波Android插件化了</title>
      <link href="/2017/10/25/Android-RePlugin/"/>
      <url>/2017/10/25/Android-RePlugin/</url>
      
        <content type="html"><![CDATA[<h1 id="是时候来一波Android插件化了"><a href="#是时候来一波Android插件化了" class="headerlink" title="是时候来一波Android插件化了"></a>是时候来一波Android插件化了</h1><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今年（2017年）6月时候，有幸参加了在北京举行的GMTC大会，恰巧360的张炅轩大神分享了360的插件化方案—— <a href="https://github.com/Qihoo360/RePlugin">RePlugin</a> ，听了以后，受益匪浅。</p><p>因为是公司组织参加大会的，参会后需要技术分享，所以就选择介绍RePlugin以及Android插件化相关内容，本文也是主要介绍RePlugin以及自己对插件化的理解。</p><p>因为插件化涉及到的东西比较多，由于篇幅的限制，很多知识点只是简单介绍一下，同时会给出相关链接，读者可以点击作参考。</p><p>这几年，世面上就已经出现了不少几款插件化方案，同时热更新技术也是遍地开花。当时是比较抵触这类技术的，个人觉的这样会破坏Android的生态圈，但是毕竟出现了这么多的插件化方案，出现总是有道理的。本着学习的态度，还是要学习下插件化相关技术。</p><span id="more"></span><h2 id="Android开发演进"><a href="#Android开发演进" class="headerlink" title="Android开发演进"></a>Android开发演进</h2><p>Android开发初期，基本上没有什么框架的，什么东西都往Activity里面塞，最后Activity就变得很大。后面有些人借鉴了Java后端的思想，使用MVC模式，一定程度上解决了代码乱堆的问题，<br>使用了一段时间MVC后，Activity依旧变的很大，因为Activity里面不光有UI的逻辑，还有数据的逻辑。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-1a38c2a3efdf8bbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MVC"></p><p>再后来有了MVP，MVP解决了UI逻辑和数据逻辑在一起的问题，同时也解决了Android代码测试困难问题。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-48e72c0042eaac1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MVP"></p><p>随着业务的增多，架构中有了Domain的概念，Domain从Data中获取数据，Data可能会是Net，File，Cache各种IO等，然后项目架构变成了这样。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-8e9ae535efc19490.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MVP2"></p><h2 id="模块化介绍"><a href="#模块化介绍" class="headerlink" title="模块化介绍"></a>模块化介绍</h2><p>MVP升级版用了一段时间以后，新问题又出现了。随着业务的增多，代码变的越来越复杂，每个模块之间的代码耦合变得越来越严重，解耦问题急需解决，同时编译时间也会越来越长。</p><p>开发人员增多，每个业务的组件各自实现一套，导致同一个App的UI风格不一样，技术实现也不一样，团队技术也无法得到沉淀，重复早轮子严重。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-aa479b31cdbeecf5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Modular"></p><p>然后模块化（组件化）解决方案就出现了。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-7232a81c66f98a47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Modular2"></p><h2 id="插件化介绍"><a href="#插件化介绍" class="headerlink" title="插件化介绍"></a>插件化介绍</h2><p>讲道理，模块化已经是最终完美的解决方案了，为啥还需要插件化呢？</p><p>还是得从业务说起，如果一个公司有很多业务，并且每个业务可以汇总成一个大的App，又或者某一个小业务又需要单独做成一个小的App。</p><p>按照上面的说的模块化解决方案，需要把这个业务设计成一个模块，代码最终打包成一个aar，主App和业务App设计成一个运行壳子，编译打包时候使用Gradle做maven依赖即可。</p><p>举例说明美团和猫眼电影。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidPluginArticle/master/doc/6.png" alt="美团和猫眼"></p><p>实际上这样做比较麻烦，主App和业务模块会或多或少依赖一点公共代码，如果公共代码出现变动，则需要对应做出修改。<br>同时业务代码会设计成Android Lib project，开发、编译、调试也有点麻烦，那么能不能这样设计，某个业务模块单独做出一个Apk，主App直接使用插件的方式，如果需要某种功能，那么直接加载某一个apk，而不是直接依赖代码的形式。</p><h2 id="前提技术介绍"><a href="#前提技术介绍" class="headerlink" title="前提技术介绍"></a>前提技术介绍</h2><p>通过上面的业务演进，最终我们需要做的就是一个Apk调用另外一个Apk文件，这也就是我们今天的主题——插件化。</p><p>一个常识，大家都知道，Apk只有在安装的情况下，才可以被运行调用。如果一个Apk只是一个文件，放置在存储卡上，我们如何才能调用起来呢？</p><p>对于这个问题，先保留，后面会做讲解，当然了已经有几种方案是可以这样做的。但是为了了解插件化的原理，先回顾一下基础知识。</p><h3 id="APK构成"><a href="#APK构成" class="headerlink" title="APK构成"></a>APK构成</h3><p>Apk是App代码最终编译打包生成的文件，主要包含代码（dex、so）、配置文件、资源问题、签名校验等。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-5e31f0795f7befc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h4 id="Manifest"><a href="#Manifest" class="headerlink" title="Manifest"></a>Manifest</h4><p>App中系统组件配置文件，包括Application、Activity、Service、Receiver、Provider等。</p><p>App中所有可运行的Activity必须要在这里定义，否则就不能运行，也包括其他组件，Receiver也可以动态注册。（敲黑板，这里很重要，记住这句话。）</p><h4 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h4><p>App启动，代码中可以获取到被运行调用的第一个类，常用来做一些初始化操作。</p><h4 id="四大组件"><a href="#四大组件" class="headerlink" title="四大组件"></a>四大组件</h4><p>四大系统组件Activity、Service、Receiver、Provider，代码中继承系统中的父类。如上面所说，必须要在manifest中配置定义，否则不可以被调用。</p><h4 id="so"><a href="#so" class="headerlink" title="so"></a>so</h4><p>App中C、C++代码编译生成的二进制文件，与手机的CPU架构相关，不同CPU架构生成的文件有些不同。开发中常常会生成多份文件，然后打包到Apk中，不同CPU类型，会调用不同的文件。</p><h4 id="resource"><a href="#resource" class="headerlink" title="resource"></a>resource</h4><p>Android中资源文件比较多，通常放在res和assets文件夹下面。常见的有布局、图片、字符、样式、主题等。</p><h4 id="安装路径"><a href="#安装路径" class="headerlink" title="安装路径"></a>安装路径</h4><p>上面的介绍的Apk结构，那么Apk安装以后，它的安装位置在哪，资源和数据又放在哪里呢？</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-f78caf0b6a8668fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装路径"></p><p><code>/data/app/&#123;package&#125;/</code>主要放置Apk文件，同时Cpu对应的so文件也会被解压到对应的文件夹中，Android高级版本中还会对dex做优化，生成odex文件也在这个文件夹中。</p><p><code>data/data/&#123;package&#125;/</code>主要存放App生成的数据，比如SharedPreferences、cache等其他文件。</p><p>那么问题来了，如果调用为安装的Apk，假设能够运行，那么他们的运行文件放在哪里？代码中生成的数据文件又要放在哪里？</p><h3 id="App启动流程介绍"><a href="#App启动流程介绍" class="headerlink" title="App启动流程介绍"></a>App启动流程介绍</h3><p>App的二进制文件Apk安装以后，就可以直接启动了，直接点击Launcher上面的图片即可，但是我们需要的是一个App启动另外一个apk文件，所以有必要了解下App的启动流程。</p><h4 id="IPC-amp-Binder"><a href="#IPC-amp-Binder" class="headerlink" title="IPC &amp; Binder"></a>IPC &amp; Binder</h4><p>在Android系统中，每一个应用程序都是由一些Activity和Service组成的，这些Activity和Service有可能运行在同一个进程中，也有可能运行在不同的进程中。那么，不在同一个进程的Activity或者Service是如何通信的呢？</p><p>Android系统提供一种Binder机制，能够使进程之间相互通信。</p><p><a href="http://blog.csdn.net/luoshengyang/article/details/6618363">Android进程间通信资料</a></p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-af48722dca715bea.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h4 id="AMS"><a href="#AMS" class="headerlink" title="AMS"></a>AMS</h4><p>Activity启动流程说个一天也说不完，过程很长，也很繁琐，不过我们只要记住了AMS就可以了。</p><p><a href="http://blog.csdn.net/AllenWells/article/details/68926952">Android系统应用框架篇：Activity启动流程</a></p><p>盗一张图</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-6821aef3d92c294a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AMS"></p><h3 id="插件化技术问题与解决方案"><a href="#插件化技术问题与解决方案" class="headerlink" title="插件化技术问题与解决方案"></a>插件化技术问题与解决方案</h3><h4 id="代码加载"><a href="#代码加载" class="headerlink" title="代码加载"></a>代码加载</h4><p>按照正常思路，如果一个主Apk需要运行一个插件Apk，那么怎么样才能把里面的代码加载过来呢？</p><h5 id="Java-ClassLoader"><a href="#Java-ClassLoader" class="headerlink" title="Java ClassLoader"></a>Java ClassLoader</h5><p>Java中提供了ClassLoader方式来加载代码，然后就可以运行其中的代码了。这里有一份资料(<a href="http://blog.csdn.net/xyang81/article/details/7292380">深入分析Java ClassLoader原理</a>) ，可以简单了解下。</p><ul><li>原理介绍</li></ul><p>ClassLoader使用的是双亲委托模型来搜索类的，每个ClassLoader实例都有一个父类加载器的引用（不是继承的关系，是一个包含的关系），虚拟机内置的类加载器（Bootstrap ClassLoader）本身没有父类加载器，但可以用作其它ClassLoader实例的的父类加载器。<br>当一个ClassLoader实例需要加载某个类时，它会试图亲自搜索某个类之前，先把这个任务委托给它的父类加载器，这个过程是由上至下依次检查的，首先由最顶层的类加载器Bootstrap ClassLoader试图加载，<br>如果没加载到，则把任务转交给Extension ClassLoader试图加载，如果也没加载到，则转交给App ClassLoader 进行加载，如果它也没有加载得到的话，则返回给委托的发起者，由它到指定的文件系统或网络等URL中加载该类。<br>如果它们都没有加载到这个类时，则抛出ClassNotFoundException异常。否则将这个找到的类生成一个类的定义，并将它加载到内存当中，最后返回这个类在内存中的Class实例对象。</p><ul><li>为什么要使用双亲委托这种模型呢？</li></ul><p>因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。<br>考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，<br>因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。</p><ul><li>但是JVM在搜索类的时候，又是如何判定两个class是相同的呢？</li></ul><p>JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。<br>只有两者同时满足的情况下，JVM才认为这两个class是相同的。就算两个class是同一份class字节码，如果被两个不同的ClassLoader实例所加载，JVM也会认为它们是两个不同class。<br>比如网络上的一个Java类org.classloader.simple.NetClassLoaderSimple，javac编译之后生成字节码文件NetClassLoaderSimple.class，ClassLoaderA和ClassLoaderB这两个类加载器并读取了NetClassLoaderSimple.class文件，<br>并分别定义出了java.lang.Class实例来表示这个类，对于JVM来说，它们是两个不同的实例对象，但它们确实是同一份字节码文件，如果试图将这个Class实例生成具体的对象进行转换时，<br>就会抛运行时异常java.lang.ClassCaseException，提示这是两个不同的类型。</p><h5 id="Android-ClassLoader"><a href="#Android-ClassLoader" class="headerlink" title="Android ClassLoader"></a>Android ClassLoader</h5><p>Android 的 Dalvik/ART 虚拟机如同标准 Java 的 JVM 虚拟机一样，也是同样需要加载 class 文件到内存中来使用，但是在 ClassLoader 的加载细节上会有略微的差别。</p><p><a href="http://jaeger.itscoder.com/android/2016/08/27/android-classloader.html">热修复入门：Android 中的 ClassLoader</a>比较详细介绍了Android中ClassLoader。</p><p>在Android开发者官网上的<a href="https://developer.android.com/reference/java/lang/ClassLoader.html">ClassLoader</a>的文档说明中我们可以看到，<br>ClassLoader是个抽象类，其具体实现的子类有 BaseDexClassLoader和SecureClassLoader。</p><p>SecureClassLoader的子类是URLClassLoader，其只能用来加载jar文件，这在Android的 Dalvik/ART 上没法使用的。</p><p>BaseDexClassLoader的子类是PathClassLoader和DexClassLoader 。</p><h6 id="PathClassLoader"><a href="#PathClassLoader" class="headerlink" title="PathClassLoader"></a>PathClassLoader</h6><p>PathClassLoader 在应用启动时创建，从<code>/data/app/&#123;package&#125;</code>安装目录下加载 apk 文件。</p><p>有2个构造函数，如下所示，这里遵从之前提到的双亲委托模型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">PathClassLoader</span><span class="token punctuation">(</span><span class="token class-name">String</span> dexPath<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>dexPath<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">PathClassLoader</span><span class="token punctuation">(</span><span class="token class-name">String</span> dexPath<span class="token punctuation">,</span> <span class="token class-name">String</span> libraryPath<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>dexPath<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> libraryPath<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>dexPath : 包含dex的jar文件或apk文件的路径集，多个以文件分隔符分隔，默认是“：”</p></li><li><p>libraryPath : 包含 C/C++ 库的路径集，多个同样以文件分隔符分隔，可以为空</p></li></ul><p>PathClassLoader 里面除了这2个构造方法以外就没有其他的代码了，具体的实现都是在 BaseDexClassLoader 里面，其dexPath比较受限制，一般是已经安装应用的 apk 文件路径。</p><p>在Android中，App安装到手机后，apk里面的class.dex中的class均是通过PathClassLoader来加载的。</p><h6 id="DexClassLoader"><a href="#DexClassLoader" class="headerlink" title="DexClassLoader"></a>DexClassLoader</h6><p>介绍 DexClassLoader 之前，先来看看其官方描述：</p><blockquote><p>A class loader that loads classes from .jar and .apk filescontaining a classes.dex entry. This can be used to execute code notinstalled as part of an application.</p></blockquote><p>很明显，对比 PathClassLoader 只能加载已经安装应用的dex或apk文件，DexClassLoader则没有此限制，可以从SD卡上加载包含class.dex的.jar和.apk 文件，这也是插件化和热修复的基础，在不需要安装应用的情况下，完成需要使用的dex的加载。</p><p>DexClassLoader 的源码里面只有一个构造方法，这里也是遵从双亲委托模型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">DexClassLoader</span><span class="token punctuation">(</span><span class="token class-name">String</span> dexPath<span class="token punctuation">,</span> <span class="token class-name">String</span> optimizedDirectory<span class="token punctuation">,</span> <span class="token class-name">String</span> libraryPath<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>dexPath<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>optimizedDirectory<span class="token punctuation">)</span><span class="token punctuation">,</span> libraryPath<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li><p>String dexPath : 包含 class.dex 的 apk、jar 文件路径 ，多个用文件分隔符(默认是 ：)分隔</p></li><li><p>String optimizedDirectory : 用来缓存优化的 dex 文件的路径，即从 apk 或 jar 文件中提取出来的 dex 文件。该路径不可以为空，且应该是应用私有的，有读写权限的路径（实际上也可以使用外部存储空间</p></li><li><p>String libraryPath : 存储 C/C++ 库文件的路径集</p></li><li><p>ClassLoader parent : 父类加载器，遵从双亲委托模型</p></li></ul><h4 id="资源获取"><a href="#资源获取" class="headerlink" title="资源获取"></a>资源获取</h4><p>我们知道，Android Apk里面除了代码，剩下的就是资源，而且资源占了很大一部分空间，我们可以利用ClassLoader来加载代码，那么如何来加载apk中的资源，而且Android中的资源种类又可以分为很多种，比如布局、图片，字符、样式、主题等。</p><p>在组件中获取资源时使用getResource获得Resource对象，通过这个对象我们可以访问相关资源，比如文本、图片、颜色等。</p><p>通过跟踪源码发现，其实getResource方法是Context的一个抽象方法，getResource的实现是在ContextImp中实现的。<br>获取的Resource对象是应用的全局变量，然后继续跟踪源码，发现 Resource中有一个AssetManager的全局变量，在Resource的构造函数中传入的，所以最终获取资源都是通过AssetManager获取的，于是我们把注意力放到AssetManager上。</p><p>我们要解决下面两个问题。</p><p>一、如何获取AssetManager对象。</p><p>二、如何通过AssetManager对象获取插件中apk的资源。</p><p>通过对AssetManager的相关源码跟踪，我们找到答案。</p><p>一、AssetManager的构造函数没有对api公开，不能使用new创建；context.getAssets()可用获取当前上下文环境的 AssetManager；利用反射 AssetManager.class.newInstance()这样可用获取对象。</p><p>二、如何获取插件apk中的资源。我们发现AssetManager中有个重要的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Add an additional set of assets to the asset manager.  This can be * either a directory or ZIP file.  Not for use by applications.  Returns * the cookie of the added asset, or 0 on failure. * &#123;@hide&#125; */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">addAssetPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span>  <span class="token function">addAssetPathInternal</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以把一个包含资源的文件包添加到assets中。这就是AssetManager查找资源的第一个路径。这个方法是一个隐藏方法，我们可以通过反射调用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AssetManager</span> assetManager <span class="token operator">=</span> <span class="token class-name">AssetManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">// context .getAssets()？</span><span class="token class-name">AssetManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"addAssetPath"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>assetManager<span class="token punctuation">,</span> apkPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Resources</span> pluginResources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resources</span><span class="token punctuation">(</span>assetManager<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h4><p>Hook就是可以修改函数的调用，通常可以通过代理模式就可以达到修改的目的。</p><p>比如有个Java示例代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"ServiceImpl"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"fun: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正常调用直接这样就可以了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">IService</span> iService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        iService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">callService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">callService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        iService<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中MainActivity中含有iService字段，可以利用反射机制来替换它，然后当有其他地方调用iService的时候，就可以对调用方法进拦截和处理。</p><p>可以先实现自己的代理类，对需要Hook的地方添加下代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceProxy</span> <span class="token keyword">implements</span> <span class="token class-name">IService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"ServiceProxy"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">private</span> <span class="token class-name">IService</span> base<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ServiceProxy</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">IService</span> base<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>base <span class="token operator">=</span> base<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"fun: before"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        base<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"fun: after"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再修改MainActivity中的iService的值，首先获取iService字段的值，传给自己定义的Proxy对象，然后把Proxy对象再赋值给原先的iService字段，这样调用iService中方法的时候，就会执行Proxy的方法，然后由Proxy再进行处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">reflectHock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">MainActivity</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> field <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IService</span> service <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IService</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IService</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceProxy</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然有时候，实现自己的Proxy类是很麻烦的，可以利用Java的动态代理技术来搞定。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"MyInvocationHandler"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">private</span> <span class="token class-name">IService</span> service<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">IService</span> service<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service <span class="token operator">=</span> service<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"invoke: before"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"invoke: after"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">proxyHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">MainActivity</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> field <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IService</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IService</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> instance <span class="token operator">=</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主流框架方案"><a href="#主流框架方案" class="headerlink" title="主流框架方案"></a>主流框架方案</h2><h3 id="Fragment加载"><a href="#Fragment加载" class="headerlink" title="Fragment加载"></a>Fragment加载</h3><p>早在2012年时候，出现了一个简单的Android插件化方案，原理大致这样的。</p><p>我们知道Android基本的页面元素是Activity，如果要动态加载一个界面，那么需要动态加载加载一个Activity，但是Activity是需要注册在Manifest中的。</p><p>所以就把目标瞄向了Fragment，首先Fragment是不需要注册的，使用的时候直接new出一个对象即可，然后放到了Activity容器中即可，那么能否从一个apk钟加载出来一个FragmentClass，然后使用反射实例化，然后放入到Activity中呢？</p><p>答案是可以的，首先在Manifest中定义个容器HostContainerActivity，然后页面跳转的时候通过intent，把目标的页面的fragment的class写成路径，<br>当 HostContainerActivity 页面启动，从intent中获取Fragment的路径，然后利用反射，动态new出一个示例放入到布局中即可。</p><p><a href="https://github.com/mmin18/AndroidDynamicLoader">AndroidDynamicLoader</a>就是这样一个解决方案，但是这个方案是有限制的，所有的页面必须是Fragment，这样肯定不符合要求，所以这个方案就没有流行起来。</p><h3 id="Activity代理"><a href="#Activity代理" class="headerlink" title="Activity代理"></a>Activity代理</h3><p>上面说道了使用Fragment加载的形式，来显示插件中的页面，但是这个解决方案是有限制的，界面全部只能用Fragment，不能用Activity，不能称的上是一种完美的插件化解决方案。</p><p>那到底能不能用到Activity的方式，答案是肯定的。</p><p>可以这样，上面介绍了Fragment动态加载原理，我们把Fragment的路径换成Activity的路径，然后用原先的那个容器Activity，做为一个代理Activity，当HostContainerActivity启动时候，<br>初始化将要显示的Activity，然后当容器Activity依次执行对应的生命周期时候，容器Activity做一个代理Activity，也要相应执行动态加载的Activity。</p><p>大致代码示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HostContainerActivity</span> <span class="token keyword">extends</span> <span class="token class-name">BaseActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> EXTRA_BASE_ACTIVITY <span class="token operator">=</span> <span class="token string">"extra_base_activity"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">BaseActivity</span> remote<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> clazz <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span>EXTRA_BASE_ACTIVITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            remote <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BaseActivity</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            remote<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remote<span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remote<span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remote<span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remote<span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remote<span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/singwhatiwanna/dynamic-load-apk">dynamic-load-apk</a>  这个动态化框架就是利用这个原理来实现的。</p><p>但是这个方案还是有限制的，因为插件中的Activity并不是系统直接运行的，而是由另外一个Activity作为代理运行的，这个Activity不是一个真正的Activity，<br>很多的功能是限制的，比如需要在Activity弹出一个Toast，则是不行的，因为当前的Activity没有context，所以dynamic-load-apk提出了1个关键字——that，<br>java中this表示对象本身，但是本对象不能当做context使用，因为当前的Activity只是一个Java对象，而that是真正运行的Activity对象。</p><h3 id="Activity占坑"><a href="#Activity占坑" class="headerlink" title="Activity占坑"></a>Activity占坑</h3><p>上面介绍Activity代理的方法，虽然插件中可以正常使用Activity，但是限制还是很多，用起来很不方便。</p><p>那到底有没有最优解，既可以不需要注册Activity，又可以动态的加载Activity，答案是肯定的。我们可以来一个偷梁换柱，既然要注册咱们就先注册一个，然后启动的时候，<br>把需要的运行的Activity当做参数传递过去，让系统启动那个替身Activity，当时机恰当的时候，我们再把那个Activity的对象给换回来即可，这个叫做瞒天过海。</p><p>这里有一篇<a href="http://weishu.me/2016/03/21/understand-plugin-framework-activity-management/">文章</a>详细记载了Activity占坑方案是怎么运行的以及方案的原理。</p><h2 id="360RePlugin介绍"><a href="#360RePlugin介绍" class="headerlink" title="360RePlugin介绍"></a>360RePlugin介绍</h2><p>Ok，上面说了这么多，全部都是引子，下面着重介绍今天的主角——RePlugin。</p><p>RePlugin是一套完整的、稳定的、适合全面使用的，占坑类插件化方案，由360手机卫士的RePlugin Team研发，也是业内首个提出”全面插件化“（全面特性、全面兼容、全面使用）的方案。</p><h3 id="主要优势"><a href="#主要优势" class="headerlink" title="主要优势"></a>主要优势</h3><ul><li>极其灵活：</li></ul><p>主程序无需升级（无需在Manifest中预埋组件），即可支持新增的四大组件，甚至全新的插件</p><ul><li>非常稳定：</li></ul><p>Hook点仅有一处（ClassLoader），无任何Binder Hook！如此可做到其崩溃率仅为“万分之一”，并完美兼容市面上近乎所有的Android ROM</p><ul><li>特性丰富：</li></ul><p>支持近乎所有在“单品”开发时的特性。包括静态Receiver、Task-Affinity坑位、自定义Theme、进程坑位、AppCompat、DataBinding等</p><ul><li>易于集成：</li></ul><p>无论插件还是主程序，只需“数行”就能完成接入</p><ul><li>管理成熟：</li></ul><p>拥有成熟稳定的“插件管理方案”，支持插件安装、升级、卸载、版本管理，甚至包括进程通讯、协议版本、安全校验等</p><ul><li>数亿支撑：</li></ul><p>有360手机卫士庞大的数亿用户做支撑，三年多的残酷验证，确保App用到的方案是最稳定、最适合使用的</p><h3 id="集成与Demo演示"><a href="#集成与Demo演示" class="headerlink" title="集成与Demo演示"></a>集成与Demo演示</h3><p>集成也非常简单，比如有2个工程，一个是主工程host，一个是插件工程sub。</p><p>本人写作的时候，RePlugin版本为<code>2.1.5</code>，可能会与最新版本不一致。</p><ul><li>添加Host根目录Gradle依赖</li></ul><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">buildscript &#123;    repositories &#123;        jcenter()    &#125;    dependencies &#123;        classpath &#39;com.android.tools.build:gradle:2.3.3&#39;        &#x2F;&#x2F; NOTE: Do not place your application dependencies here; they belong        &#x2F;&#x2F; in the individual module build.gradle files        classpath &#39;com.qihoo360.replugin:replugin-host-gradle:2.1.5&#39;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加Host项目Gradle依赖</li></ul><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">apply plugin: &#39;com.android.application&#39;apply plugin: &#39;replugin-host-gradle&#39;android &#123;    compileSdkVersion 26    buildToolsVersion &quot;26.0.0&quot;    defaultConfig &#123;        applicationId &quot;cn.mycommons.replugindemo&quot;        minSdkVersion 15        targetSdkVersion 26        versionCode 1        versionName &quot;1.0&quot;        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;    &#125;    buildTypes &#123;        release &#123;            minifyEnabled false            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;        &#125;    &#125;&#125;repluginHostConfig &#123;    useAppCompat &#x3D; true&#125;dependencies &#123;    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])    compile &#39;com.android.support:appcompat-v7:26.+&#39;    compile &#39;com.android.support.constraint:constraint-layout:1.0.2&#39;    compile &#39;com.qihoo360.replugin:replugin-host-lib:2.1.5&#39;    testCompile &#39;junit:junit:4.12&#39;    androidTestCompile(&#39;com.android.support.test.espresso:espresso-core:2.2.2&#39;, &#123;        exclude group: &#39;com.android.support&#39;, module: &#39;support-annotations&#39;    &#125;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加Sub根目录Gradle依赖</li></ul><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">buildscript &#123;    repositories &#123;        jcenter()    &#125;    dependencies &#123;        classpath &#39;com.android.tools.build:gradle:2.3.3&#39;        &#x2F;&#x2F; NOTE: Do not place your application dependencies here; they belong        &#x2F;&#x2F; in the individual module build.gradle files        classpath &#39;com.qihoo360.replugin:replugin-plugin-gradle:2.1.5&#39;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加Sub项目Gradle依赖</li></ul><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">apply plugin: &#39;com.android.application&#39;apply plugin: &#39;replugin-plugin-gradle&#39;android &#123;    compileSdkVersion 26    buildToolsVersion &quot;26.0.0&quot;    defaultConfig &#123;        applicationId &quot;cn.mycommons.repluginsdemo.sub&quot;        minSdkVersion 15        targetSdkVersion 26        versionCode 1        versionName &quot;1.0&quot;        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;    &#125;    buildTypes &#123;        release &#123;            minifyEnabled false            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;        &#125;    &#125;&#125;repluginPluginConfig &#123;    &#x2F;&#x2F;插件名    pluginName &#x3D; &quot;app&quot;    &#x2F;&#x2F;宿主app的包名    hostApplicationId &#x3D; &quot;cn.mycommons.replugindemo&quot;    &#x2F;&#x2F;宿主app的启动activity    hostAppLauncherActivity &#x3D; &quot;cn.mycommons.replugindemo.MainActivity&quot;    &#x2F;&#x2F; Name of &#39;App Module&#39;，use &#39;&#39; if root dir is &#39;App Module&#39;. &#39;:app&#39; as default.    appModule &#x3D; &#39;:app&#39;    &#x2F;&#x2F; Injectors ignored    &#x2F;&#x2F; LoaderActivityInjector: Replace Activity to LoaderActivity    &#x2F;&#x2F; ProviderInjector: Inject provider method call.    &#x2F;&#x2F; ignoredInjectors &#x3D; [&#39;LoaderActivityInjector&#39;]&#125;dependencies &#123;    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])    compile &#39;com.android.support:appcompat-v7:26.+&#39;    compile &#39;com.android.support.constraint:constraint-layout:1.0.2&#39;    compile &#39;com.qihoo360.replugin:replugin-plugin-lib:2.1.5&#39;    testCompile &#39;junit:junit:4.12&#39;    androidTestCompile(&#39;com.android.support.test.espresso:espresso-core:2.2.2&#39;, &#123;        exclude group: &#39;com.android.support&#39;, module: &#39;support-annotations&#39;    &#125;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><p>RePlugin源码主要分为4部分，对比其他插件化，它的强大和特色，在于它只Hook住了ClassLoader。One Hook这个坚持，最大程度保证了稳定性、兼容性和可维护性。</p><h4 id="host-lib"><a href="#host-lib" class="headerlink" title="host lib"></a>host lib</h4><p>插件宿主库，主要是对插件的管理，以及对ClassLoader的Hook，具体原理和管理逻辑不做详细解释。</p><h4 id="host-gradle"><a href="#host-gradle" class="headerlink" title="host gradle"></a>host gradle</h4><p>对插件宿主代码编译过程进行处理，主要有config.json文件生成、RePluginHostConfig.java代码生成、以及Activity坑位代码插入到Manifest中。</p><p>比如我们内置一个插件，按照官方文档，这样操作的。</p><ul><li><p>将APK改名为：[插件名].jar</p></li><li><p>放入主程序的assets/plugins目录</p></li></ul><p>我们可以看看Host apk中包含哪些资源。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-7c8316e2a4fdf48c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>插件自动生成了plugin-builtin.json文件</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-1cd50f773eacea05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>同时也在Manifest中插入很多坑位。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidPluginArticle/master/doc/903.png"></p><p>RePluginHostConfig.java代码生成逻辑。</p><h4 id="plugin-lib"><a href="#plugin-lib" class="headerlink" title="plugin lib"></a>plugin lib</h4><p>同宿主库一样，这个是给插件App提供基本的支持。</p><h4 id="plugin-gradle"><a href="#plugin-gradle" class="headerlink" title="plugin gradle"></a>plugin gradle</h4><p>对插件App代码编译过程进行处理，主要修改插件中四大组建的父类，没错，就是这样。</p><p>比如有个<code>LoginActivity</code>，它是继承<code>Activity</code>的，那么会修改它的父类为<code>PluginActivity</code>，如果是<code>AppCompatActivity</code>，那么会替换成<code>PluginAppCompatActivity</code></p><p>如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反编译Apk可以看到修改后的结果。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-44dd1a8a5e8dfa44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>源码里面也有体现</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-b33e1015da5c2652.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h2 id="其他插件化方案"><a href="#其他插件化方案" class="headerlink" title="其他插件化方案"></a>其他插件化方案</h2><p>上次大致是RePlugin的原理，当然除了RePlugin的解决方案以外，还有其他几家厂商的解决方案。</p><h3 id="Instant-App"><a href="#Instant-App" class="headerlink" title="Instant App"></a>Instant App</h3><p><a href="https://developer.android.com/topic/instant-apps/index.html">Android Instant App 官网</a></p><p>16年IO的时候，Google提出了Instant App特性，在17年IO正式发布这项技术，不过这项技术在我写这篇文章的时候，还是beta版本。</p><p>它的使用方式很简单，你在 Android 手机上，朋友给你发来一个链接，比方说一家外卖店面。而恰好外卖App应用也支持了 Instant Apps。你点击了这个链接，就直接进入了外卖应用，即便手机并没有安装它。</p><p>实现原理大致是利用App linker唤起打开app的intent，Google Play检测到支持该intent,而且没有安装后，直接通过类似Android插件化的原理，打开相关页面。</p><p>但是这个Instant App必须发布在Google Play上， 国内暂时没有办法使用。</p><h3 id="淘宝Atlas"><a href="#淘宝Atlas" class="headerlink" title="淘宝Atlas"></a>淘宝Atlas</h3><p><a href="https://github.com/alibaba/atlas">淘宝Atlas</a></p><p>Atlas是伴随着手机淘宝的不断发展而衍生出来的一个运行于Android系统上的一个容器化框架，我们也叫动态组件化(Dynamic Bundle)框架。它主要提供了解耦化、组件化、动态性的支持。覆盖了工程师的工程编码期、Apk运行期以及后续运维期的各种问题。</p><p>在工程期，实现工程独立开发，调试的功能，工程模块可以独立。</p><p>在运行期，实现完整的组件生命周期的映射，类隔离等机制。</p><p>在运维期，提供快速增量的更新修复能力，快速升级。</p><p>Atlas是工程期和运行期共同起作用的框架，我们尽量将一些工作放到工程期，这样保证运行期更简单，更稳定。</p><p>相比multidex，atlas在解决了方法数限制的同时以OSGI为参考，明确了业务开发的边界，使得业务在满足并行迭代，快速开发的同时，能够进行灵活发布，动态更新以及提供了线上故障快速修复的能力。</p><p>与外界某些插件框架不同的是，atlas是一个组件框架，atlas不是一个多进程的框架，他主要完成的就是在运行环境中按需地去完成各个bundle的安装，加载类和资源。</p><h3 id="滴滴VirtualAPK"><a href="#滴滴VirtualAPK" class="headerlink" title="滴滴VirtualAPK"></a>滴滴VirtualAPK</h3><p><a href="https://github.com/didi/VirtualAPK">VirtualAPK</a></p><p><a href="http://geek.csdn.net/news/detail/130917">VirtualAPK介绍</a></p><p>VirtualAPK是滴滴17年开源出来的一款插件化方案。</p><h3 id="Small"><a href="#Small" class="headerlink" title="Small"></a>Small</h3><p><a href="https://github.com/wequick/Small">Small</a></p><blockquote><p>世界那么大，组件那么小。Small，做最轻巧的跨平台插件化框架。 ——Galenlin</p></blockquote><p>这是Small作者，林光亮老师，给Small一句概括。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文只是简单的介绍下插件化相关内容，很多内容也是参照大神的博客的，感觉80%都是从别人那边复制过来的，同时插件不只是简单的加载界面和资源，包括BroadCastReceiver、Service等组件使用。</p><p>RePlugin使用方法还是蛮简单的，大部分情况下，插件的开发，相当于单独的一个App开发。</p><p>相对于其他厂商的方案，个人比较偏向于RePlugin，主要是因为开发简单，比较稳定，Hook点少，支持特性较多等。</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p><a href="https://github.com/LiushuiXiaoxia/AndroidModular">关于Android模块化我有一些话不知当讲不当讲</a></p><p><a href="http://weishu.me/2016/01/28/understand-plugin-framework-proxy-hook/">Android插件化原理解析——Hook机制之动态代理</a></p><p><a href="http://blog.csdn.net/bupt073114/article/details/42298337">APK文件结构和安装过程</a></p><p><a href="http://blog.csdn.net/luoshengyang/article/details/6618363">Android进程间通信资料</a></p><p><a href="http://blog.csdn.net/AllenWells/article/details/68926952">Android系统应用框架篇：Activity启动流程</a></p><p><a href="http://weishu.me/2016/03/07/understand-plugin-framework-ams-pms-hook/">Android 插件化原理解析——Hook机制之AMS&amp;PMS</a></p><p><a href="http://blog.csdn.net/xyang81/article/details/7292380">深入分析Java ClassLoader原理</a></p><p><a href="http://jaeger.itscoder.com/android/2016/08/27/android-classloader.html">热修复入门：Android中的ClassLoader</a></p><p><a href="http://www.liuguangli.win/archives/370">ANDROID应用程序插件化研究之ASSETMANAGER</a></p><p><a href="https://github.com/Qihoo360/DroidPlugin">DroidPlugin</a></p><p><a href="https://github.com/CtripMobile/DynamicAPK">DynamicAPK</a></p><p><a href="https://github.com/mmin18/AndroidDynamicLoader">AndroidDynamicLoader，利用动态加载Fragment来解决</a></p><p><a href="https://github.com/singwhatiwanna/dynamic-load-apk">dynamic-load-apk</a></p><p><a href="https://github.com/houkx/android-pluginmgr">android-pluginmgr</a></p><p><a href="https://github.com/wequick/Small">Small</a></p><p><a href="https://github.com/CtripMobile/DynamicAPK">DynamicAPK</a></p><p><a href="https://github.com/alibaba/atlas">淘宝Atlas</a></p><p><a href="https://github.com/didi/VirtualAPK">VirtualAPK</a></p><p><a href="http://geek.csdn.net/news/detail/130917">VirtualAPK介绍</a></p><p><a href="https://developer.android.com/topic/instant-apps/index.html">Android Instant App 官网</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android插件化 </tag>
            
            <tag> Replugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB查询总结</title>
      <link href="/2017/10/24/MongoDB-Query/"/>
      <url>/2017/10/24/MongoDB-Query/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB查询总结"><a href="#MongoDB查询总结" class="headerlink" title="MongoDB查询总结"></a>MongoDB查询总结</h1><hr><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>前面写过一篇关于Mongodb的例子——<a href="http://www.jianshu.com/p/9e1d34eb1d4c">浅谈MongoDB数据库</a>，当时使用的只是简单的查询，然后后面业务变的有点复杂，原先没有仔细研究过Mongodb的查询，以为就是简单调用下<code>find</code>就可以了，乃衣服。</p><p>所以今天特地举例说明一下Mongo中查询问题。</p><p>Mongo查询可以分为2种：</p><ul><li><p>普通查询，类似于Sql中的 <code>select where</code></p></li><li><p>聚合查询，类似于Sql中的 <code>group by</code></p></li></ul><span id="more"></span><h2 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h2><p>首先放一下<a href="https://docs.mongodb.com/manual/tutorial/query-documents/">官方文档</a>，普通查询主要用到<code>db.collection.find()</code>函数。</p><p>定义下示例数据库，下面是是初始化数据，可以在Mongo中的控制台执行。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>inventory<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span><span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> <span class="token string">"journal"</span><span class="token punctuation">,</span> qty<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> size<span class="token operator">:</span> <span class="token punctuation">&#123;</span> h<span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span> w<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span> uom<span class="token operator">:</span> <span class="token string">"cm"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> status<span class="token operator">:</span> <span class="token string">"A"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> <span class="token string">"notebook"</span><span class="token punctuation">,</span> qty<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> size<span class="token operator">:</span> <span class="token punctuation">&#123;</span> h<span class="token operator">:</span> <span class="token number">8.5</span><span class="token punctuation">,</span> w<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span> uom<span class="token operator">:</span> <span class="token string">"in"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> status<span class="token operator">:</span> <span class="token string">"A"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> <span class="token string">"paper"</span><span class="token punctuation">,</span> qty<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> size<span class="token operator">:</span> <span class="token punctuation">&#123;</span> h<span class="token operator">:</span> <span class="token number">8.5</span><span class="token punctuation">,</span> w<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span> uom<span class="token operator">:</span> <span class="token string">"in"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> status<span class="token operator">:</span> <span class="token string">"D"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> <span class="token string">"planner"</span><span class="token punctuation">,</span> qty<span class="token operator">:</span> <span class="token number">75</span><span class="token punctuation">,</span> size<span class="token operator">:</span> <span class="token punctuation">&#123;</span> h<span class="token operator">:</span> <span class="token number">22.85</span><span class="token punctuation">,</span> w<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> uom<span class="token operator">:</span> <span class="token string">"cm"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> status<span class="token operator">:</span> <span class="token string">"D"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> <span class="token string">"postcard"</span><span class="token punctuation">,</span> qty<span class="token operator">:</span> <span class="token number">45</span><span class="token punctuation">,</span> size<span class="token operator">:</span> <span class="token punctuation">&#123;</span> h<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> w<span class="token operator">:</span> <span class="token number">15.25</span><span class="token punctuation">,</span> uom<span class="token operator">:</span> <span class="token string">"cm"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> status<span class="token operator">:</span> <span class="token string">"A"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询所有</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>inventory<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>映射Sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> inventory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>条件查询</li></ul><p>语法格式</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span> <span class="token operator">&lt;</span>field1<span class="token operator">></span><span class="token operator">:</span> <span class="token operator">&lt;</span>value1<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如查询<code>status</code>为<code>D</code>记录。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>inventory<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> status<span class="token operator">:</span> <span class="token string">"D"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>映射Sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> inventory <span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"D"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用操作符进行条件查询</li></ul><p>语法格式</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span> <span class="token operator">&lt;</span>field1<span class="token operator">></span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">&lt;</span>operator1<span class="token operator">></span><span class="token operator">:</span> <span class="token operator">&lt;</span>value1<span class="token operator">></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如查询满足<code>status</code>是数组<code>[A,D]</code>中的记录</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>inventory<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> status<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $<span class="token keyword">in</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"D"</span> <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>映射Sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> inventory <span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>AND 条件查询</li></ul><p>直接在find函数指定多个字段满足即可，这样就是 and 条件。</p><p>比如下面语句就是 <code>status</code> 为 <code>A</code>，<code>qty</code> 小于 <code>30</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>inventory<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> status<span class="token operator">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span> qty<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $lt<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>映射Sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> inventory <span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">AND</span> qty <span class="token operator">&lt;</span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>OR 条件查询</li></ul><p>OR 和 AND 就不一样了，需要用到操作符 <code>$or</code>，如下所示。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>inventory<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> $or<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> status<span class="token operator">:</span> <span class="token string">"A"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> qty<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $lt<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类似于SQL中的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> inventory <span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">OR</span> qty <span class="token operator">&lt;</span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>OR 和 AND 集合一起</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>inventory<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span>     status<span class="token operator">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>     $or<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> qty<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $lt<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> item<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^p</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>表示这样的意思。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> inventory <span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">AND</span> <span class="token punctuation">(</span> qty <span class="token operator">&lt;</span> <span class="token number">30</span> <span class="token operator">OR</span> item <span class="token operator">LIKE</span> <span class="token string">"p%"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查询举例"><a href="#查询举例" class="headerlink" title="查询举例"></a>查询举例</h3><ul><li>查询全部</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> people<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>指定字段</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>       user_id<span class="token punctuation">,</span>       <span class="token keyword">status</span><span class="token keyword">FROM</span> people<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> user_id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> status<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> user_id<span class="token punctuation">,</span> <span class="token keyword">status</span><span class="token keyword">FROM</span> people<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>指定字段，不显示<code>_id</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> user_id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> status<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> _id<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>条件查询全部</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> people<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span> status<span class="token operator">:</span> <span class="token string">"A"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>条件查询指定字段</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> user_id<span class="token punctuation">,</span> <span class="token keyword">status</span><span class="token keyword">FROM</span> people<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span> status<span class="token operator">:</span> <span class="token string">"A"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> user_id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> status<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> _id<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>条件查询不等于</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> people<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">!=</span> <span class="token string">"A"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span> status<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $ne<span class="token operator">:</span> <span class="token string">"A"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>条件查询 AND</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> people<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span><span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span> status<span class="token operator">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>条件查询 OR</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> people<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span><span class="token operator">OR</span> age <span class="token operator">=</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span> $or<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> status<span class="token operator">:</span> <span class="token string">"A"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">,</span>             <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>条件查询 &gt;</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> people<span class="token keyword">WHERE</span> age <span class="token operator">></span> <span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $gt<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>条件查询 &lt;</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> people<span class="token keyword">WHERE</span> age <span class="token operator">&lt;</span> <span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>   <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $lt<span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>复杂的条件查询</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> people<span class="token keyword">WHERE</span> age <span class="token operator">></span> <span class="token number">25</span><span class="token operator">AND</span>   age <span class="token operator">&lt;=</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>   <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $gt<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> $lte<span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>条件查询 LIKE</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> people<span class="token keyword">WHERE</span> user_id <span class="token operator">like</span> <span class="token string">"%bc%"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> user_id<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">bc</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token comment">// OR</span>db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> user_id<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $regex<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">bc</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> people<span class="token keyword">WHERE</span> user_id <span class="token operator">like</span> <span class="token string">"bc%"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> user_id<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^bc</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token comment">// OR</span>db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> user_id<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $regex<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^bc</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>排序</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> people<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> user_id <span class="token keyword">ASC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> status<span class="token operator">:</span> <span class="token string">"A"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> user_id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> people<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> user_id <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> status<span class="token operator">:</span> <span class="token string">"A"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> user_id<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>统计数量</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> people<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// or</span>db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>user_id<span class="token punctuation">)</span><span class="token keyword">FROM</span> people<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> user_id<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $exists<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span>or<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> user_id<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $exists<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> people<span class="token keyword">WHERE</span> age <span class="token operator">></span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $gt<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token comment">// or</span>db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $gt<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>去除重复distinct</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span><span class="token punctuation">(</span><span class="token keyword">status</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> people<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span> <span class="token string">"status"</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> people<span class="token keyword">LIMIT</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>限制数量</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// or</span>db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> people<span class="token keyword">LIMIT</span> <span class="token number">5</span>SKIP <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>EXPLAIN</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> people<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">"A"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> status<span class="token operator">:</span> <span class="token string">"A"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">explain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><p>上面普通查询使用<code>find</code>函数即可，但是聚合查询使用另外一个函数<code>aggregate</code>，这里是<a href="https://docs.mongodb.com/manual/core/aggregation-pipeline/">官方文档</a>。</p><p>初始化数据如下，有2个表 <code>orders</code> 和 <code>order_lineitem</code> ，外键关联<code>order_lineitem.order_id and the orders.id </code>。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  cust_id<span class="token operator">:</span> <span class="token string">"abc123"</span><span class="token punctuation">,</span>  ord_date<span class="token operator">:</span> ISODate(<span class="token string">"2012-11-02T17:04:11.102Z"</span>)<span class="token punctuation">,</span>  status<span class="token operator">:</span> 'A'<span class="token punctuation">,</span>  price<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>  items<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> sku<span class="token operator">:</span> <span class="token string">"xxx"</span><span class="token punctuation">,</span> qty<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>           <span class="token punctuation">&#123;</span> sku<span class="token operator">:</span> <span class="token string">"yyy"</span><span class="token punctuation">,</span> qty<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>统计数量</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>     $group<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        _id<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        count<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $sum<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>映射Sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> count<span class="token keyword">FROM</span> orders<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>计算总和</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>     $group<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        _id<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        total<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $sum<span class="token operator">:</span> <span class="token string">"$price"</span> <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>映射Sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> total<span class="token keyword">FROM</span> orders<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>分组计算总和</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>     $group<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        _id<span class="token operator">:</span> <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>        total<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $sum<span class="token operator">:</span> <span class="token string">"$price"</span> <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>映射Sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span>       <span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> total<span class="token keyword">FROM</span> orders<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>分组计算总和并排序</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>     $group<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        _id<span class="token operator">:</span> <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>        total<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $sum<span class="token operator">:</span> <span class="token string">"$price"</span> <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span> $sort<span class="token operator">:</span> <span class="token punctuation">&#123;</span> total<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>映射Sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span>       <span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> total<span class="token keyword">FROM</span> orders<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> tota<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多个字段分组</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>     $group<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        _id<span class="token operator">:</span> <span class="token punctuation">&#123;</span>           cust_id<span class="token operator">:</span> <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>           ord_date<span class="token operator">:</span> <span class="token punctuation">&#123;</span>               month<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $month<span class="token operator">:</span> <span class="token string">"$ord_date"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>               day<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $dayOfMonth<span class="token operator">:</span> <span class="token string">"$ord_date"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>               year<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $year<span class="token operator">:</span> <span class="token string">"$ord_date"</span><span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        total<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $sum<span class="token operator">:</span> <span class="token string">"$price"</span> <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>映射Sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span>       ord_date<span class="token punctuation">,</span>       <span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> total<span class="token keyword">FROM</span> orders<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id<span class="token punctuation">,</span>         ord_date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>条件分组——HAVING</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>     $group<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        _id<span class="token operator">:</span> <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>        count<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $sum<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span> $match<span class="token operator">:</span> <span class="token punctuation">&#123;</span> count<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $gt<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>映射Sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span>       <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> orders<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id<span class="token keyword">HAVING</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>复杂条件分组统计</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>     $group<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        _id<span class="token operator">:</span> <span class="token punctuation">&#123;</span>           cust_id<span class="token operator">:</span> <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>           ord_date<span class="token operator">:</span> <span class="token punctuation">&#123;</span>               month<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $month<span class="token operator">:</span> <span class="token string">"$ord_date"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>               day<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $dayOfMonth<span class="token operator">:</span> <span class="token string">"$ord_date"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>               year<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $year<span class="token operator">:</span> <span class="token string">"$ord_date"</span><span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        total<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $sum<span class="token operator">:</span> <span class="token string">"$price"</span> <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span> $match<span class="token operator">:</span> <span class="token punctuation">&#123;</span> total<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $gt<span class="token operator">:</span> <span class="token number">250</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>映射Sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span>       ord_date<span class="token punctuation">,</span>       <span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> total<span class="token keyword">FROM</span> orders<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id<span class="token punctuation">,</span>         ord_date<span class="token keyword">HAVING</span> total <span class="token operator">></span> <span class="token number">250</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>复杂条件分组统计示例1</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span> $match<span class="token operator">:</span> <span class="token punctuation">&#123;</span> status<span class="token operator">:</span> <span class="token string">'A'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>     $group<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        _id<span class="token operator">:</span> <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>        total<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $sum<span class="token operator">:</span> <span class="token string">"$price"</span> <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>映射Sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span>       <span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> total<span class="token keyword">FROM</span> orders<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>复杂条件分组统计示例2</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span> $match<span class="token operator">:</span> <span class="token punctuation">&#123;</span> status<span class="token operator">:</span> <span class="token string">'A'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>     $group<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        _id<span class="token operator">:</span> <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>        total<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $sum<span class="token operator">:</span> <span class="token string">"$price"</span> <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span> $match<span class="token operator">:</span> <span class="token punctuation">&#123;</span> total<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $gt<span class="token operator">:</span> <span class="token number">250</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>映射Sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span>       <span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> total<span class="token keyword">FROM</span> orders<span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id<span class="token keyword">HAVING</span> total <span class="token operator">></span> <span class="token number">250</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>表关联</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span> $unwind<span class="token operator">:</span> <span class="token string">"$items"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>     $group<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        _id<span class="token operator">:</span> <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>        qty<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $sum<span class="token operator">:</span> <span class="token string">"$items.qty"</span> <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>映射Sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span>       <span class="token function">SUM</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>qty<span class="token punctuation">)</span> <span class="token keyword">as</span> qty<span class="token keyword">FROM</span> orders o<span class="token punctuation">,</span>     order_lineitem li<span class="token keyword">WHERE</span> li<span class="token punctuation">.</span>order_id <span class="token operator">=</span> o<span class="token punctuation">.</span>id<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>嵌套查询</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>     $group<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        _id<span class="token operator">:</span> <span class="token punctuation">&#123;</span>           cust_id<span class="token operator">:</span> <span class="token string">"$cust_id"</span><span class="token punctuation">,</span>           ord_date<span class="token operator">:</span> <span class="token punctuation">&#123;</span>               month<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $month<span class="token operator">:</span> <span class="token string">"$ord_date"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>               day<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $dayOfMonth<span class="token operator">:</span> <span class="token string">"$ord_date"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>               year<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $year<span class="token operator">:</span> <span class="token string">"$ord_date"</span><span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>     $group<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        _id<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        count<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $sum<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>映射Sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span>             ord_date      <span class="token keyword">FROM</span> orders      <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id<span class="token punctuation">,</span>               ord_date<span class="token punctuation">)</span>      <span class="token keyword">as</span> DerivedTable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Map-Reduce"><a href="#Map-Reduce" class="headerlink" title="Map-Reduce"></a>Map-Reduce</h2><p>Mongo中聚合查询还有一种叫Map-Reduce，官方文档在<a href="https://docs.mongodb.com/manual/core/map-reduce/">这里</a>，在思想上它跟Hadoop一样，从一个单一集合中输入数据，然后将结果输出到一个集合中。通常在使用类似SQL中<code>Group By</code>操作时，Map/Reduce会是一个好的工具。</p><p><img src="https://docs.mongodb.com/manual/_images/map-reduce.bakedsvg.svg" alt="Map-Reduce"></p><h3 id="接口方法定义"><a href="#接口方法定义" class="headerlink" title="接口方法定义"></a>接口方法定义</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>collection<span class="token punctuation">.</span><span class="token function">mapReduce</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>map<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token operator">&lt;</span>reduce<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        out<span class="token operator">:</span> <span class="token operator">&lt;</span>collection<span class="token operator">></span><span class="token punctuation">,</span>        query<span class="token operator">:</span> <span class="token operator">&lt;</span>document<span class="token operator">></span><span class="token punctuation">,</span>        sort<span class="token operator">:</span> <span class="token operator">&lt;</span>document<span class="token operator">></span><span class="token punctuation">,</span>        limit<span class="token operator">:</span> <span class="token operator">&lt;</span>number<span class="token operator">></span><span class="token punctuation">,</span>        finalize<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token keyword">function</span><span class="token operator">></span><span class="token punctuation">,</span>        scope<span class="token operator">:</span> <span class="token operator">&lt;</span>document<span class="token operator">></span><span class="token punctuation">,</span>        jsMode<span class="token operator">:</span> <span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token punctuation">,</span>        verbose<span class="token operator">:</span> <span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token punctuation">,</span>        bypassDocumentValidation<span class="token operator">:</span> <span class="token operator">&lt;</span>boolean<span class="token operator">></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul><li><p>mapReduce： 要执行Map/Reduce集合的名字</p></li><li><p>map: map 函数     (下面会详细介绍）</p></li><li><p>reduce: reduce函数(下面会详细介绍）</p></li><li><p>out: 存放结果的集合 (下面会详细介绍）</p></li><li><p>query: 设置查询条件   &lt;可选&gt;</p></li><li><p>sort: 按某个键来排序 &lt;可选&gt;</p></li><li><p>limit: 指明从集合检索文档个数的最大值 &lt;可选&gt;</p></li><li><p>finalize: 对reduce结果做进一步处理  &lt;可选&gt;</p></li><li><p>scope: 指明通过map/reduce/finalize可以访问到的变量 &lt;可选&gt;</p></li><li><p>jsMode: 指明Map/Reduce执行过程中文档保持JSON状态   &lt;可选&gt;</p></li><li><p>verbose: 提供关于任务执行的统计数据  &lt;可选&gt;</p></li></ul><h2 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h2><p>举例说明Map-Reduce的用途，虽然代码比较多，也行用上面的聚合查询，一下子就搞定了，但是这里只是举例。</p><p>比如有个订单表，如下所示，我们需要计算每个人的订单总价。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>     _id<span class="token operator">:</span> ObjectId(<span class="token string">"50a8240b927d5d8b5891743c"</span>)<span class="token punctuation">,</span>     cust_id<span class="token operator">:</span> <span class="token string">"abc123"</span><span class="token punctuation">,</span>     ord_date<span class="token operator">:</span> new Date(<span class="token string">"Oct 04, 2012"</span>)<span class="token punctuation">,</span>     status<span class="token operator">:</span> 'A'<span class="token punctuation">,</span>     price<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>     items<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> sku<span class="token operator">:</span> <span class="token string">"mmm"</span><span class="token punctuation">,</span> qty<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">2.5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#123;</span> sku<span class="token operator">:</span> <span class="token string">"nnn"</span><span class="token punctuation">,</span> qty<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">2.5</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先定义Map方法，就说我们后面的聚合计算需要哪些字段，由于需要计算每个人的订单总结，那么个人信息和加个肯定是我们需要的。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">mapFunction1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后定义reduce方法，计算每个人的订单价格。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">reduceFunction1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">keyCustId<span class="token punctuation">,</span> valuesPrices</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>valuesPrices<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后存储最后的计算结果。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">mapReduce</span><span class="token punctuation">(</span>    mapFunction1<span class="token punctuation">,</span>    reduceFunction1<span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> out<span class="token operator">:</span> <span class="token string">"map_reduce_example"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一个简单的Map-Reduce实例就完成了，结果放在<code>map_reduce_example</code>中。</p><p>上面示例比较简单，那么我们来一个复杂一点的例子。</p><p>一条订单记录中，有sdk的名称、数量、价格，那么要查询出日期大于<code>01/01/2012</code>，所有订单的总数，以及平均sdk价格。</p><p>首先还是定义个map函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">mapFunction2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> idx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>sku<span class="token punctuation">;</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                        count<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                        qty<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>qty                    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">emit</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后算出sku的数量，和总价格。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">reduceFunction2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">keySKU<span class="token punctuation">,</span> countObjVals</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    reducedVal <span class="token operator">=</span> <span class="token punctuation">&#123;</span> count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> qty<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> countObjVals<span class="token punctuation">.</span>length<span class="token punctuation">;</span> idx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        reducedVal<span class="token punctuation">.</span>count <span class="token operator">+=</span> countObjVals<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>        reducedVal<span class="token punctuation">.</span>qty <span class="token operator">+=</span> countObjVals<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>qty<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> reducedVal<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总价格出来后，还要计算出平均价格。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">finalizeFunction2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> reducedVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    reducedVal<span class="token punctuation">.</span>avg <span class="token operator">=</span> reducedVal<span class="token punctuation">.</span>qty <span class="token operator">/</span> reducedVal<span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token keyword">return</span> reducedVal<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还有日期的条件过滤，最后得出完整的map-reduce。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">mapReduce</span><span class="token punctuation">(</span>    mapFunction2<span class="token punctuation">,</span>    reduceFunction2<span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        out<span class="token operator">:</span> <span class="token punctuation">&#123;</span> merge<span class="token operator">:</span> <span class="token string">"map_reduce_example"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        query<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            ord_date<span class="token operator">:</span><span class="token punctuation">&#123;</span> $gt<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'01/01/2012'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        finalize<span class="token operator">:</span> finalizeFunction2    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是我对MongoDB的示例总结，本人是一个初学者，也有很多地方不懂，如果有错误的地方，欢迎指出。</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p><a href="http://www.jianshu.com/p/9e1d34eb1d4c">浅谈MongoDB数据库</a></p><p><a href="https://docs.mongodb.com/manual/tutorial/query-documents/">普通查询官方文档</a></p><p><a href="https://docs.mongodb.com/manual/reference/sql-comparison/">Sql和Mongo隐射表</a></p><p><a href="https://docs.mongodb.com/manual/core/aggregation-pipeline/">聚合官方文档</a></p><p><a href="https://docs.mongodb.com/manual/core/map-reduce/">Map-Reduce官方文档</a></p><p><a href="https://docs.mongodb.com/manual/reference/method/db.collection.mapReduce/#db.collection.mapReduce">Map-Reduce API</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> Map reduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用MyMockServer模拟数据</title>
      <link href="/2017/10/13/MyMockServer/"/>
      <url>/2017/10/13/MyMockServer/</url>
      
        <content type="html"><![CDATA[<h1 id="使用MyMockServer模拟数据"><a href="#使用MyMockServer模拟数据" class="headerlink" title="使用MyMockServer模拟数据"></a>使用MyMockServer模拟数据</h1><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在开发的时候，前端、移动端、后端开发分离，开发流程是先定义好接口API，然后按照接口约定进行开发。所以经常需要根据接口Mock数据，有从代码层进行Mock，也有从网络层进行代理的。</p><p>本人使用方式是在网络代理进行Mock，因为在代码层Mock，数据不是很灵活，如果要改变数据，那么需要重新编译再启动（本人是移动开发），浪费不少时间。</p><span id="more"></span><p>在网络层Mock，使用的软件是Charles，然后对需要Mock的数据进行mapping就行了，可以是一个远程接口，也可以是一个本地文件。关于Charles使用，这里有一篇文章<a href="http://blog.csdn.net/guijiaoba/article/details/43198503">介绍</a>。</p><p>上面的Mcok方式已经足够友好了，基本上可以满足90%的日常开发，但是还有些数据是不能满足的，比如服务器需要返回一个动态的时间戳，这个用刚刚的方式就不行。所以很多开发者自己启动一个服务，然后返回对应的数据，这样也是可以的，但是有几个缺点。</p><ul><li><p>自己启动服务，需要重新映射修改域名，同时对开发者要求也比较高，需要有服务器开发相关知识。</p></li><li><p>如果只想部分接口Mock数据，部分接口走真是数据，就需要修改代码或者做些配置，这样代码耦合性太高或者配置麻烦</p></li></ul><p>于是世面出现了很多使用脚本实现一个代理服务器，对所有的接口进行过滤，添加一些白名单功能，对特定的接口返回特定的数据。常见的如阿里巴巴开源的anyproxy。MyMockServer也是这样的，作为用代理服务器实现的Mock功能的服务器，以后简称mms，不过相对于使用脚本实现代理服务器，mms主要优势在于：</p><ul><li><p>使用DSL配置，相对于json配置，最大优势，简单易懂，用户体验会更好</p></li><li><p>在DSL中可以使用Groovy语言修改相关逻辑处理，动态的返回数据</p></li><li><p>动态监听配置文件，修改文件后，立马生效，不需要重启服务，节省时间</p></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用Mac HomeBrew安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// <span class="token function">add</span> tapbrew tap LiushuiXiaoxia/mms// brew <span class="token function">install</span>brew <span class="token function">install</span> mms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他平台直接下载压缩包即可，然后把压缩包中的bin目录添加到系统环境变量中，然后直接调用<code>MyMockServer</code>或者<code>MyMockServer.bat</code>。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>可以直接使用<code>mms</code>即可启动服务，<code>mms</code>支持参数如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mms -hPath: /usr/local/bin/.Cmd: mms -hLog level <span class="token builtin class-name">:</span> INFOusage: mms <span class="token punctuation">[</span>options<span class="token punctuation">]</span> -c,--config <span class="token operator">&lt;</span>arg<span class="token operator">></span>   mock server path, default is current directory -h,--help           output usage information -i,--init           init some path as mock workspace -l,--level <span class="token operator">&lt;</span>arg<span class="token operator">></span>    log level ALL,DEBUG,INFO,WARN,ERROR,FATAL,OFF,TRACE -p,--port <span class="token operator">&lt;</span>arg<span class="token operator">></span>     mock server port, default is <span class="token number">9090</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先定义一个工作目录，默认情况下使用当前目录作为工作目录，工作目录用于保存配置文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> proxy$ <span class="token builtin class-name">cd</span> proxy$ mms -iPath: /Users/xiaqiulei/proxy/.Cmd: mms -iLog level <span class="token builtin class-name">:</span> INFO$ <span class="token function">ls</span>template.groovy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然了也可以手动指定工作目录，这两种方式一样。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> proxy$ mms -i -c ./proxyPath: /Users/xiaqiulei/test/.Cmd: mms -i -c ./proxyLog level <span class="token builtin class-name">:</span> INFO$ <span class="token function">ls</span> proxytemplate.groovy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在工作目录中会自动生成模板文件<code>template.groovy</code>。</p><p>其实这个代理服务器使用的就是用Groovy实现的DSL功能。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">mock <span class="token punctuation">&#123;</span><span class="token comment">//    enable true</span>    desc <span class="token string gstring">"template"</span>    request <span class="token punctuation">&#123;</span><span class="token comment">//        scheme "http"</span>        host <span class="token string gstring">"www.google.com"</span><span class="token comment">//        port 80</span><span class="token comment">//        path "/api/login/"</span>        method <span class="token string gstring">"GET"</span>        params <span class="token punctuation">&#123;</span><span class="token comment">//            param "param_key_1", "param_value_1"</span><span class="token comment">//            param "param_key_2", "param_value_2"</span>        <span class="token punctuation">&#125;</span>        headers <span class="token punctuation">&#123;</span>            header <span class="token string gstring">"header_key_1"</span><span class="token punctuation">,</span> <span class="token string gstring">"header_value_1"</span>            header <span class="token string gstring">"time"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string gstring">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        body <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    response <span class="token punctuation">&#123;</span><span class="token comment">//        version 'HTTP/1.1'</span><span class="token comment">//        code 200</span>        headers <span class="token punctuation">&#123;</span>            header <span class="token string gstring">"header_key_1"</span><span class="token punctuation">,</span> <span class="token string gstring">"header_value_1"</span>            header <span class="token string gstring">"time"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string gstring">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        body <span class="token punctuation">&#123;</span><span class="token comment">//            text "text"</span><span class="token comment">//            textFile "file.txt"</span><span class="token comment">//</span>            json <span class="token string gstring">"""&#123;"key":"value"&#125;"""</span><span class="token comment">//            jsonFile "file.txt"</span><span class="token comment">//</span><span class="token comment">//            xml "&lt;xml/>"</span><span class="token comment">//            xmlFile "file.txt"</span><span class="token comment">//</span><span class="token comment">//            html "&lt;html/>"</span><span class="token comment">//            htmlFile "file.txt"</span><span class="token comment">//</span><span class="token comment">//            file "file.txt"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//    control &#123;</span><span class="token comment">//        delay 3</span><span class="token comment">//    &#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>做Android的同学，看到这个是不是眼熟，跟咱们的gradle是不是很像，没错，gradle也是一种DSL。</p><p>下面依次做讲解，mock下面主要分为4部分：描述，请求匹配、响应信息、控制部分。</p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p><strong>enable</strong>: 是否启用本条mock配置，默认是true，如果需要取消本次配置，可以设置为<code>enable false</code></p><p><strong>desc</strong>: 本次mock配置的描述信息</p><h3 id="请求匹配"><a href="#请求匹配" class="headerlink" title="请求匹配"></a>请求匹配</h3><p><strong>scheme</strong>: 请求scheme，如果指定某一种，则只匹配这种，如果不设置，则默认为<code>http</code>和<code>https</code>都匹配</p><p><strong>host</strong>: 主机类型，如果设置，则匹配host，否则为null，则认为匹配成功</p><p><strong>port</strong>: 请求端口，如果设置，则匹配端口，否则为80</p><p><strong>path</strong>: 请求路径，如果设置，则匹配路径，否则为null，则认为匹配成功</p><p><strong>method</strong>: 请求方法，如果设置，则匹配方法，否则为null，则认为匹配全部方法</p><p><strong>params</strong>: 请求参数，如果设置，则匹配参数，否则为null，则认为匹配成功，暂时无用，保留</p><p><strong>headers</strong>: 请求头部，如果设置，则匹配头部，否则为null，则认为匹配成功，暂时无用，保留</p><p><strong>body</strong>: 请求实体，如果设置，则匹配实体，否则为null，则认为匹配成功，暂时无用，保留</p><p>简单来说，如果设置了，就严格匹配，不设置则认为匹配成功。</p><h3 id="响应信息"><a href="#响应信息" class="headerlink" title="响应信息"></a>响应信息</h3><p>同上面类似，只不过是返回的数据，如果request完全匹配，则返回response中的信息。</p><p><strong>version</strong>: http版本协议，默认为’HTTP/1.1’</p><p><strong>code</strong>: 响应状态吗，默认为200</p><p><strong>headers</strong>: 所有的头部</p><p><strong>header</strong>: 添加头部，一共2个参数，第一个为key，第二个为value</p><p><strong>body</strong>: 响应body</p><p><strong>text</strong>: 设置body为文本内容，参数为字符串类型</p><p><strong>textFile</strong>: 设置body为文本文件内容，参数为文本文件对于的路径</p><p><strong>json</strong>: 设置body为json，参数为json字符串</p><p><strong>jsonFile</strong> 设置body为json文件中的内容，参数为json文件路径</p><p><strong>xml</strong>: 设置body为xml，参数为xml字符串</p><p><strong>xmlFile</strong> 设置body为ml文件中内容，参数为xml文件路径</p><p><strong>html</strong>: 设置body为hml，参数为hml字符串</p><p><strong>htmlFile</strong>: 设置body为hml文件中内容，参数为html文件路径</p><p><strong>file</strong>: 设置body为一个文件的内容，参数为文件路径</p><p>因为配置文件使用的是Groovy，所以可以使用三个双引号来设置字符串，比如设置返回为json字符，json是是包含双引号的，如果按照Java中方式，那么就会出现转码，这样不方便阅读和修改。</p><p>那么可以这样设置，是不是很方便。</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">json &quot;&quot;&quot;&#123;    &quot;key&quot;:&quot;value&quot;,    &quot;hello&quot;:&quot;world&quot;&#125;&quot;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="控制信息"><a href="#控制信息" class="headerlink" title="控制信息"></a>控制信息</h3><p><strong>delay</strong>: 设置响应时间，可以模拟入网环境，如果不设置，那么里面返回数据。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>比如我想Mock接口为<code>http://www.baidu.com</code>一条数据，那么首先启动mms服务。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mmsPath: /usr/local/bin/.Cmd: mmsLog level <span class="token builtin class-name">:</span> INFO          _____                    _____                    _____         /<span class="token punctuation">\</span>    <span class="token punctuation">\</span>                  /<span class="token punctuation">\</span>    <span class="token punctuation">\</span>                  /<span class="token punctuation">\</span>    <span class="token punctuation">\</span>        /::<span class="token punctuation">\</span>____<span class="token punctuation">\</span>                /::<span class="token punctuation">\</span>____<span class="token punctuation">\</span>                /::<span class="token punctuation">\</span>    <span class="token punctuation">\</span>       /::::<span class="token operator">|</span>   <span class="token operator">|</span>               /::::<span class="token operator">|</span>   <span class="token operator">|</span>               /::::<span class="token punctuation">\</span>    <span class="token punctuation">\</span>      /:::::<span class="token operator">|</span>   <span class="token operator">|</span>              /:::::<span class="token operator">|</span>   <span class="token operator">|</span>              /::::::<span class="token punctuation">\</span>    <span class="token punctuation">\</span>     /::::::<span class="token operator">|</span>   <span class="token operator">|</span>             /::::::<span class="token operator">|</span>   <span class="token operator">|</span>             /:::/<span class="token punctuation">\</span>:::<span class="token punctuation">\</span>    <span class="token punctuation">\</span>    /:::/<span class="token operator">|</span>::<span class="token operator">|</span>   <span class="token operator">|</span>            /:::/<span class="token operator">|</span>::<span class="token operator">|</span>   <span class="token operator">|</span>            /:::/__<span class="token punctuation">\</span>:::<span class="token punctuation">\</span>    <span class="token punctuation">\</span>   /:::/ <span class="token operator">|</span>::<span class="token operator">|</span>   <span class="token operator">|</span>           /:::/ <span class="token operator">|</span>::<span class="token operator">|</span>   <span class="token operator">|</span>            <span class="token punctuation">\</span>:::<span class="token punctuation">\</span>   <span class="token punctuation">\</span>:::<span class="token punctuation">\</span>    <span class="token punctuation">\</span>  /:::/  <span class="token operator">|</span>::<span class="token operator">|</span>___<span class="token operator">|</span>______    /:::/  <span class="token operator">|</span>::<span class="token operator">|</span>___<span class="token operator">|</span>______    ___<span class="token punctuation">\</span>:::<span class="token punctuation">\</span>   <span class="token punctuation">\</span>:::<span class="token punctuation">\</span>    <span class="token punctuation">\</span> /:::/   <span class="token operator">|</span>::::::::<span class="token punctuation">\</span>    <span class="token punctuation">\</span>  /:::/   <span class="token operator">|</span>::::::::<span class="token punctuation">\</span>    <span class="token punctuation">\</span>  /<span class="token punctuation">\</span>   <span class="token punctuation">\</span>:::<span class="token punctuation">\</span>   <span class="token punctuation">\</span>:::<span class="token punctuation">\</span>    <span class="token punctuation">\</span>/:::/    <span class="token operator">|</span>:::::::::<span class="token punctuation">\</span>____<span class="token punctuation">\</span>/:::/    <span class="token operator">|</span>:::::::::<span class="token punctuation">\</span>____<span class="token punctuation">\</span>/::<span class="token punctuation">\</span>   <span class="token punctuation">\</span>:::<span class="token punctuation">\</span>   <span class="token punctuation">\</span>:::<span class="token punctuation">\</span>____<span class="token punctuation">\</span><span class="token punctuation">\</span>::/    / ~~~~~/:::/    /<span class="token punctuation">\</span>::/    / ~~~~~/:::/    /<span class="token punctuation">\</span>:::<span class="token punctuation">\</span>   <span class="token punctuation">\</span>:::<span class="token punctuation">\</span>   <span class="token punctuation">\</span>::/    / <span class="token punctuation">\</span>/____/      /:::/    /  <span class="token punctuation">\</span>/____/      /:::/    /  <span class="token punctuation">\</span>:::<span class="token punctuation">\</span>   <span class="token punctuation">\</span>:::<span class="token punctuation">\</span>   <span class="token punctuation">\</span>/____/             /:::/    /               /:::/    /    <span class="token punctuation">\</span>:::<span class="token punctuation">\</span>   <span class="token punctuation">\</span>:::<span class="token punctuation">\</span>    <span class="token punctuation">\</span>            /:::/    /               /:::/    /      <span class="token punctuation">\</span>:::<span class="token punctuation">\</span>   <span class="token punctuation">\</span>:::<span class="token punctuation">\</span>____<span class="token punctuation">\</span>           /:::/    /               /:::/    /        <span class="token punctuation">\</span>:::<span class="token punctuation">\</span>  /:::/    /          /:::/    /               /:::/    /          <span class="token punctuation">\</span>:::<span class="token punctuation">\</span>/:::/    /         /:::/    /               /:::/    /            <span class="token punctuation">\</span>::::::/    /        /:::/    /               /:::/    /              <span class="token punctuation">\</span>::::/    /        <span class="token punctuation">\</span>::/    /                <span class="token punctuation">\</span>::/    /                <span class="token punctuation">\</span>::/    /         <span class="token punctuation">\</span>/____/                  <span class="token punctuation">\</span>/____/                  <span class="token punctuation">\</span>/____/<span class="token punctuation">[</span><span class="token number">2017</span>-09-20 <span class="token number">19</span>:39:45 <span class="token operator">|</span> INFO<span class="token punctuation">]</span> <span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token punctuation">[</span><span class="token number">2017</span>-09-20 <span class="token number">19</span>:39:45 <span class="token operator">|</span> INFO<span class="token punctuation">]</span> Parse GET <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span>http/https<span class="token punctuation">]</span>://www.google.com/<span class="token punctuation">[</span>path<span class="token punctuation">]</span>/ <span class="token punctuation">]</span>  /Users/xiaqiulei/test/proxy/./template.groovy -<span class="token operator">></span> template<span class="token punctuation">[</span><span class="token number">2017</span>-09-20 <span class="token number">19</span>:39:45 <span class="token operator">|</span> INFO<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">[</span><span class="token number">2017</span>-09-20 <span class="token number">19</span>:39:45 <span class="token operator">|</span> INFO<span class="token punctuation">]</span> Starting proxy at address: <span class="token number">0.0</span>.0.0/0.0.0.0:9090<span class="token punctuation">[</span><span class="token number">2017</span>-09-20 <span class="token number">19</span>:39:45 <span class="token operator">|</span> INFO<span class="token punctuation">]</span> Proxy listening with TCP transport<span class="token punctuation">[</span><span class="token number">2017</span>-09-20 <span class="token number">19</span>:39:46 <span class="token operator">|</span> INFO<span class="token punctuation">]</span> Proxy started at address: /0:0:0:0:0:0:0:0:9090<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加配置文件<code>baidu.groovy</code>，注意文件后缀必须是<code>.groovy</code>结尾。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">mock <span class="token punctuation">&#123;</span>    desc <span class="token string gstring">"baidu"</span>    request <span class="token punctuation">&#123;</span>        host <span class="token string gstring">"www.baidu.com"</span>    <span class="token punctuation">&#125;</span>    response <span class="token punctuation">&#123;</span>        code <span class="token number">200</span>        headers <span class="token punctuation">&#123;</span>            header <span class="token string gstring">"header_key_1"</span><span class="token punctuation">,</span> <span class="token string gstring">"header_value_1"</span>            header <span class="token string gstring">"header_key_2"</span><span class="token punctuation">,</span> <span class="token string gstring">"header_value_2"</span>            header <span class="token string gstring">"time"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string gstring">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        body <span class="token punctuation">&#123;</span>            json <span class="token string gstring">"""&#123;    "key":"value",    "hello":"world"&#125;"""</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    control <span class="token punctuation">&#123;</span>        delay <span class="token number">2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过一会控制台就会出现文件修改的事件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">2017</span>-09-20 <span class="token number">19</span>:40:25 <span class="token operator">|</span> INFO<span class="token punctuation">]</span> <span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token punctuation">[</span><span class="token number">2017</span>-09-20 <span class="token number">19</span>:40:25 <span class="token operator">|</span> INFO<span class="token punctuation">]</span> Parse X <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span>http/https<span class="token punctuation">]</span>://baidu.com/<span class="token punctuation">[</span>path<span class="token punctuation">]</span>/ <span class="token punctuation">]</span>  /Users/xiaqiulei/test/proxy/./baidu.groovy -<span class="token operator">></span> baidu<span class="token punctuation">[</span><span class="token number">2017</span>-09-20 <span class="token number">19</span>:40:25 <span class="token operator">|</span> INFO<span class="token punctuation">]</span> Parse GET <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span>http/https<span class="token punctuation">]</span>://www.google.com/<span class="token punctuation">[</span>path<span class="token punctuation">]</span>/ <span class="token punctuation">]</span>  /Users/xiaqiulei/test/proxy/./template.groovy -<span class="token operator">></span> template<span class="token punctuation">[</span><span class="token number">2017</span>-09-20 <span class="token number">19</span>:40:25 <span class="token operator">|</span> INFO<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们用curl来验证下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://www.baidu.com<span class="token function">curl</span> http://www.baidu.com --proxy localhost:9090 -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1520343-63e619ea0a5b37a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>很显然，两次请求返回的数据是不一样的，只不过第二次我们设置了代理，然后代理返回Mock的数据，同样，在移动端，可以设置的网络代理，然后就可以Mock App中的请求数据。</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p><a href="http://blog.csdn.net/guijiaoba/article/details/43198503">利用charles模拟Http请求和响应</a></p><p><a href="https://github.com/alibaba/anyproxy">Anyproxy Github</a></p><p><a href="https://github.com/LiushuiXiaoxia/MyMockServer">MyMockServer Github</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Mock Server </tag>
            
            <tag> MyMockServer </tag>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈MongoDB数据库</title>
      <link href="/2017/09/28/MongoDb/"/>
      <url>/2017/09/28/MongoDb/</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈MongoDB数据库"><a href="#浅谈MongoDB数据库" class="headerlink" title="浅谈MongoDB数据库"></a>浅谈MongoDB数据库</h1><hr><!-- TOC --><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近项目中需要分析Http报文，并且需要用数据库保存，刚刚开始打算用Mysql，后来咨询了老司机，老司机建议使用MongoDB来实现，所以特写一篇文章来总结下。</p><span id="more"></span><h2 id="MongoDB-介绍"><a href="#MongoDB-介绍" class="headerlink" title="MongoDB 介绍"></a>MongoDB 介绍</h2><blockquote><p>MongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。它支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p></blockquote><p>上面是百度百科的介绍，这里是MongoDB的<a href="https://www.mongodb.com/">官网</a>。</p><p>简单来说MongoDB是一种数据库，不过是非关系型数据库，它的一些概念和数据库不太一样。</p><p>MongoDB中一些概念和普通数据库不太一样，普通数据库有database、table、row、field的概念，MongoDB依次叫database、collection、document、field，这个在后面的代码示例会有体现。</p><h3 id="数据库安装"><a href="#数据库安装" class="headerlink" title="数据库安装"></a>数据库安装</h3><p>因为用的是Mac，简单介绍下MongoDB在Mac上面的安装，Windows用户可以参考官网。</p><p>Mac上安装，直接使用Homebrew就可以了，如果不清楚Homebrew是什么，可以参考<a href="https://brew.sh/">这里</a>。</p><p>brew 安装MongoDB</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> mongodb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ brew <span class="token function">install</span> mongodbUpdating Homebrew<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Downloading https://homebrew.bintray.com/bottles/mongodb-3.4.9.sierra.bottle.tar.gz<span class="token comment">######################################################################## 100.0%</span><span class="token operator">==</span><span class="token operator">></span> Pouring mongodb-3.4.9.sierra.bottle.tar.gz<span class="token operator">==</span><span class="token operator">></span> CaveatsTo have launchd start mongodb now and restart at login:  brew services start mongodbOr, <span class="token keyword">if</span> you don't want/need a background <span class="token function">service</span> you can just run:  mongod --config /usr/local/etc/mongod.conf<span class="token operator">==</span><span class="token operator">></span> Summary🍺  /usr/local/Cellar/mongodb/3.4.9: <span class="token number">19</span> files, <span class="token number">284</span>.9MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面给的信息说明很清楚，如果当做一个服务器来用，直接用<code>brew services start mongodb</code>就行了，如果只是作为一个程序，那么用<code>mongod --config /usr/local/etc/mongod.conf</code>启动，<code>/usr/local/etc/mongod.conf</code>是默认配置文件。</p><p>我们可以看下配置文件内容，分别是日志路径、存储路径。最后一个是IP访问设置，默认只能本地访问，如果其他机器需要访问这个数据库，需要在配置文件中添加对应的IP。假如想省事，可以设置为<code>0.0.0.0</code>，那么任意机器都是可以访问的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /usr/local/etc/mongod.confsystemLog:  destination: <span class="token function">file</span>  path: /usr/local/var/log/mongodb/mongo.log  logAppend: <span class="token boolean">true</span>storage:  dbPath: /usr/local/var/mongodbnet:  bindIp: <span class="token number">127.0</span>.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MongoDB使用"><a href="#MongoDB使用" class="headerlink" title="MongoDB使用"></a>MongoDB使用</h2><p>我这里就简单开启一个MongoDB服务，直接调用<code>brew services start mongodb</code>就行了，这样MongoDB就启动了。</p><p>使用<code>mongo</code>命令即可进入MongoDB控制台。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-acd14283311d877c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show dbs                     show database namesshow collections             show collections <span class="token keyword">in</span> current databaseshow <span class="token function">users</span>                   show <span class="token function">users</span> <span class="token keyword">in</span> current databaseshow profile                 show <span class="token function">most</span> recent system.profile entries with <span class="token function">time</span> <span class="token operator">>=</span> 1msshow logs                    show the accessible logger namesshow log <span class="token punctuation">[</span>name<span class="token punctuation">]</span>              prints out the last segment of log <span class="token keyword">in</span> memory, <span class="token string">'global'</span> is defaultuse <span class="token operator">&lt;</span>db_name<span class="token operator">></span>                <span class="token builtin class-name">set</span> current databasedb.foo.find<span class="token punctuation">(</span><span class="token punctuation">)</span>                list objects <span class="token keyword">in</span> collection foo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面简单演示数据库的增删改查，具体用法请参考<a href="https://docs.mongodb.com/manual/crud/">官方CRUD文档</a>。</p><p>创建一个<code>abc123</code>的database</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use abc123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个<code>user</code>的collection，并插入两条数据。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> db.user.insert<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name:<span class="token string">'aaa'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>WriteResult<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"nInserted"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">></span> db.user.insert<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name:<span class="token string">'bbb'</span>,age:22<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>WriteResult<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"nInserted"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看<code>user</code>中的数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> db.user.<span class="token function-name function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token string">"_id"</span> <span class="token builtin class-name">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">"59bf7bde5d6768f6ee06de2b"</span><span class="token punctuation">)</span>, <span class="token string">"name"</span> <span class="token builtin class-name">:</span> <span class="token string">"aaa"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token string">"_id"</span> <span class="token builtin class-name">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">"59bf7d045d6768f6ee06de2c"</span><span class="token punctuation">)</span>, <span class="token string">"name"</span> <span class="token builtin class-name">:</span> <span class="token string">"bbb"</span>, <span class="token string">"age"</span> <span class="token builtin class-name">:</span> <span class="token number">22</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>根据条件查询</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> db.user.find<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name:<span class="token string">'bbb'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token string">"_id"</span> <span class="token builtin class-name">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">"59bf7d045d6768f6ee06de2c"</span><span class="token punctuation">)</span>, <span class="token string">"name"</span> <span class="token builtin class-name">:</span> <span class="token string">"bbb"</span>, <span class="token string">"age"</span> <span class="token builtin class-name">:</span> <span class="token number">22</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> db.user.updateOne<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name:<span class="token string">'aaa'</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token variable">$set</span>:<span class="token punctuation">&#123;</span>age:11<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token string">"acknowledged"</span> <span class="token builtin class-name">:</span> true, <span class="token string">"matchedCount"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span>, <span class="token string">"modifiedCount"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token operator">></span> db.user.find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span> <span class="token string">"_id"</span> <span class="token builtin class-name">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">"59bf7bde5d6768f6ee06de2b"</span><span class="token punctuation">)</span>, <span class="token string">"name"</span> <span class="token builtin class-name">:</span> <span class="token string">"aaa"</span>, <span class="token string">"age"</span> <span class="token builtin class-name">:</span> <span class="token number">11</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token string">"_id"</span> <span class="token builtin class-name">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">"59bf7d045d6768f6ee06de2c"</span><span class="token punctuation">)</span>, <span class="token string">"name"</span> <span class="token builtin class-name">:</span> <span class="token string">"bbb"</span>, <span class="token string">"age"</span> <span class="token builtin class-name">:</span> <span class="token number">22</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> db.user.deleteMany<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name:<span class="token string">'aaa'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token string">"acknowledged"</span> <span class="token builtin class-name">:</span> true, <span class="token string">"deletedCount"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token operator">></span> db.user.<span class="token function-name function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token string">"_id"</span> <span class="token builtin class-name">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">"59bf7d045d6768f6ee06de2c"</span><span class="token punctuation">)</span>, <span class="token string">"name"</span> <span class="token builtin class-name">:</span> <span class="token string">"bbb"</span>, <span class="token string">"age"</span> <span class="token builtin class-name">:</span> <span class="token number">22</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>刚刚开始说过，Mongo的数据结构是类似于json的数据结构，数据里面的”_id”就是主键，是系统自己生成的。</p><p>当然也可以自己指定，在插入数据的时候，指定”_id”字段即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> db.user.insert<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"_id"</span><span class="token builtin class-name">:</span><span class="token string">"12345"</span>,name:<span class="token string">"Hello"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>WriteResult<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"nInserted"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">></span> db.user.<span class="token function-name function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token string">"_id"</span> <span class="token builtin class-name">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">"59bf7d045d6768f6ee06de2c"</span><span class="token punctuation">)</span>, <span class="token string">"name"</span> <span class="token builtin class-name">:</span> <span class="token string">"bbb"</span>, <span class="token string">"age"</span> <span class="token builtin class-name">:</span> <span class="token number">22</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token string">"_id"</span> <span class="token builtin class-name">:</span> <span class="token string">"12345"</span>, <span class="token string">"name"</span> <span class="token builtin class-name">:</span> <span class="token string">"Hello"</span> <span class="token punctuation">&#125;</span><span class="token operator">></span> db.user.insert<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"_id"</span><span class="token builtin class-name">:</span><span class="token string">"12345"</span>,name:<span class="token string">"Hello"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>WriteResult<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"nInserted"</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,<span class="token string">"writeError"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token string">"code"</span> <span class="token builtin class-name">:</span> <span class="token number">11000</span>,<span class="token string">"errmsg"</span> <span class="token builtin class-name">:</span> <span class="token string">"E11000 duplicate key error collection: abc123.user index: _id_ dup key: &#123; : <span class="token entity" title="\&quot;">\"</span>12345<span class="token entity" title="\&quot;">\"</span> &#125;"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面示例表示，第一次插入数据的时候，是成功的，查询结果也是符合预期，当再次执行的时候，插入失败，说明主键冲突。</p><h3 id="MongoDB可视化工具"><a href="#MongoDB可视化工具" class="headerlink" title="MongoDB可视化工具"></a>MongoDB可视化工具</h3><p>上面使用的是命令行工具查看数据，可能对有些同学不是很优化，我在这里推荐一款可视化功工具<a href="http://blog.robomongo.org/">Robo 3T</a></p><p>用Robo 3T查看数据就很方便了。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-2988a2e07e9d3743.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h2 id="Java操作MongoDB"><a href="#Java操作MongoDB" class="headerlink" title="Java操作MongoDB"></a>Java操作MongoDB</h2><p>Java操作Mongo比较简单，直接调用MongoDB的驱动即可，其他部分基本上和上面的语法一样。</p><p>本次使用的版本是<code>3.5.0</code>，下面是依赖方式。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mongodb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mongodb-driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>  compile <span class="token string">'org.mongodb:mongodb-driver:3.5.0'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>数据库连接</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">MongoClient</span> client<span class="token punctuation">;</span><span class="token annotation punctuation">@Before</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"mongodb://127.0.0.1:27017/abc123"</span><span class="token punctuation">;</span>    <span class="token class-name">MongoClientURI</span> uri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoClientURI</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoClient</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MongoDatabase</span> database <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MongoCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">></span></span> collection <span class="token operator">=</span> database<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Document</span> document <span class="token operator">:</span> collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据先前的数据，查到的结果2条。</p><pre class="line-numbers language-none"><code class="language-none">_id:59bf7d045d6768f6ee06de2cname:bbbage:22.0_id:12345name:Hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">testFind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MongoDatabase</span> database <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MongoCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">></span></span> collection <span class="token operator">=</span> database<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">testFind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入前总共为2条数据，插入后为3条数据。</p><pre class="line-numbers language-none"><code class="language-none">_id:59bf7d045d6768f6ee06de2cname:bbbage:22.0_id:12345name:Hello_id:59bf7d045d6768f6ee06de2cname:bbbage:22.0_id:12345name:Hello_id:59bf8282fe37ad04a81fd012name:Worldage:33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">testFind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MongoDatabase</span> database <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MongoCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">></span></span> collection <span class="token operator">=</span> database<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">updateMany</span><span class="token punctuation">(</span>            <span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Updates</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">testFind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改数据和其他的不一样，<code>collection.updateMany</code>有2个参数，第一个参数<code>Filters.eq(&quot;name&quot;, &quot;World&quot;)</code>是查询条件，第二个参数<code>Updates.set(&quot;age&quot;, 44)</code>为赋值语句。</p><p>在修改前数据为<code>_id:59bf8282fe37ad04a81fd012    name:World    age:33</code>，修改后就变成了<code>_id:59bf8282fe37ad04a81fd012    name:World    age:44</code>。</p><pre class="line-numbers language-none"><code class="language-none">before update_id:59bf7d045d6768f6ee06de2cname:bbbage:22.0_id:12345name:Hello_id:59bf8282fe37ad04a81fd012name:Worldage:33after update_id:59bf7d045d6768f6ee06de2cname:bbbage:22.0_id:12345name:Hello_id:59bf8282fe37ad04a81fd012name:Worldage:44<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before delete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">testFind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MongoDatabase</span> database <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MongoCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">></span></span> collection <span class="token operator">=</span> database<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span>            <span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after delete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">testFind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除前有三条数据，删除后只有2条数据。</p><pre class="line-numbers language-none"><code class="language-none">before delete_id:59bf7d045d6768f6ee06de2cname:bbbage:22.0_id:12345name:Hello_id:59bf8282fe37ad04a81fd012name:Worldage:44after delete_id:59bf7d045d6768f6ee06de2cname:bbbage:22.0_id:12345name:Hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，MongoDB使用还是很简单的，相对于传统的关系型数据库，优缺点表现如下。</p><p><strong>优点:</strong></p><ul><li><p>面向文档存储(类JSON数据模式简单而强大)</p></li><li><p>动态查询</p></li><li><p>全索引支持,扩展到内部对象和内嵌数组</p></li><li><p>查询记录分析</p></li><li><p>快速,就地更新</p></li><li><p>高效存储二进制大对象 (比如照片和视频)</p></li><li><p>复制和故障切换支持</p></li><li><p>Auto- Sharding自动分片支持云级扩展性</p></li><li><p>MapReduce 支持复杂聚合</p></li><li><p>商业支持,培训和咨询</p></li></ul><p><strong>缺点:</strong></p><ul><li><p>不支持事务（进行开发时需要注意，哪些功能需要使用数据库提供的事务支持）</p></li><li><p>MongoDB占用空间过大 （不过这个确定对于目前快速下跌的硬盘价格来说，也不算什么缺点了）</p></li><li><p>MongoDB没有如MySQL那样成熟的维护工具，这对于开发和IT运营都是个值得注意的地方</p></li><li><p>在32位系统上，不支持大于2.5G的数据(很多操作系统都已经抛弃了32位版本，所以这个也算不上什么缺点了，3.4版本已经放弃支持32 位 x86平台)</p></li></ul><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p><a href="https://www.mongodb.com/">MongoDB的官网</a></p><p><a href="https://brew.sh/">Homebrew</a></p><p><a href="https://docs.mongodb.com/manual/crud/">官方CRUD文档</a></p><p><a href="http://blog.robomongo.org/">Robo 3T</a></p><p><a href="http://blog.csdn.net/zdc524/article/details/46967413">MongoDB 的优点和缺点</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> Java MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Curl不显示统计信息% Total % Received %</title>
      <link href="/2017/09/21/Curl-S/"/>
      <url>/2017/09/21/Curl-S/</url>
      
        <content type="html"><![CDATA[<h1 id="Curl不显示统计信息-Total-Received"><a href="#Curl不显示统计信息-Total-Received" class="headerlink" title="Curl不显示统计信息% Total % Received %"></a>Curl不显示统计信息% Total % Received %</h1><p>今天需要用curl测试服务器，用的是python调用的，最后发现结果中包含一些统计信息。</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># -*- coding:UTF-8-*-</span><span class="token keyword">import</span> osos<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'curl http://www.baidu.com'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为:</p><pre class="line-numbers language-none"><code class="language-none"> % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100  2381  100  2381    0     0  25963      0 --:--:-- --:--:-- --:--:-- 25880&lt;!DOCTYPE html&gt;....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过查找，需要添加一个参数<code>-s</code>，可以去除这些统计信息。</p><pre class="line-numbers language-none"><code class="language-none">curl http:&#x2F;&#x2F;www.baidu.com -s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Curl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Android Architecture Components</title>
      <link href="/2017/09/15/Android-Architecture-Components/"/>
      <url>/2017/09/15/Android-Architecture-Components/</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈Android-Architecture-Components"><a href="#浅谈Android-Architecture-Components" class="headerlink" title="浅谈Android Architecture Components"></a>浅谈Android Architecture Components</h1><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Google IO 2017发布Android Architecture Components，自己先研究了一下，蛮有意思的，特来记录一下。本文内容主要是参考<a href="https://developer.android.com/topic/libraries/architecture/index.html">官方文档</a>以及自己的理解，如有错误之处，恳请指出。</p><span id="more"></span><h2 id="Android-Architecture-Components"><a href="#Android-Architecture-Components" class="headerlink" title="Android Architecture Components"></a>Android Architecture Components</h2><p>Android Architecture Components是Google发布的一套新的架构组件，使App的架构更加健壮，后面简称AAC。</p><p>AAC主要提供了Lifecycle，ViewModel，LiveData，Room等功能，下面依次说明：</p><ul><li>Lifecycle</li></ul><p>生命周期管理，把原先Android生命周期的中的代码抽取出来，如将原先需要在onStart()等生命周期中执行的代码分离到Activity或者Fragment之外。</p><ul><li>LiveData</li></ul><p>一个数据持有类，持有数据并且这个数据可以被观察被监听，和其他Observer不同的是，它是和Lifecycle是绑定的，在生命周期内使用有效，减少内存泄露和引用问题。</p><ul><li>ViewModel</li></ul><p>用于实现架构中的ViewModel，同时是与Lifecycle绑定的，使用者无需担心生命周期。可以在多个Fragment之间共享数据，比如旋转屏幕后Activity会重新create，这时候使用ViewModel还是之前的数据，不需要再次请求网络数据。</p><ul><li>Room</li></ul><p>谷歌推出的一个Sqlite ORM库，不过使用起来还不错，使用注解，极大简化数据库的操作，有点类似Retrofit的风格。</p><p>AAC的架构是这样的：</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-db2d6719fbb357a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新的架构"></p><ul><li>Activity/Fragment</li></ul><p>UI层，通常是Activity/Fragment等，监听ViewModel，当VIewModel数据更新时刷新UI，监听用户事件反馈到ViewModel，主流的数据驱动界面。</p><ul><li>ViewModel</li></ul><p>持有或保存数据，向Repository中获取数据，响应UI层的事件，执行响应的操作，响应数据变化并通知到UI层。</p><ul><li>Repository</li></ul><p>App的完全的数据模型，ViewModel交互的对象，提供简单的数据修改和获取的接口，配合好网络层数据的更新与本地持久化数据的更新，同步等</p><ul><li>Data Source</li></ul><p>包含本地的数据库等，网络api等，这些基本上和现有的一些MVVM，以及Clean架构的组合比较相似</p><h3 id="Gradle-集成"><a href="#Gradle-集成" class="headerlink" title="Gradle 集成"></a>Gradle 集成</h3><p>根目录gradle文件中添加Google Maven Repository</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">allprojects &#123;    repositories &#123;        jcenter()        maven &#123; url &#39;https:&#x2F;&#x2F;maven.google.com&#39; &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在模块中添加对应的依赖</p><p>如使用Lifecycle,LiveData、ViewModel，添加如下依赖。</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">compile &quot;android.arch.lifecycle:runtime:1.0.0-alpha1&quot;compile &quot;android.arch.lifecycle:extensions:1.0.0-alpha1&quot;annotationProcessor &quot;android.arch.lifecycle:compiler:1.0.0-alpha1&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如使用Room功能，添加如下依赖。</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">compile &quot;android.arch.persistence.room:runtime:1.0.0-alpha1&quot;annotationProcessor &quot;android.arch.persistence.room:compiler:1.0.0-alpha1&quot;&#x2F;&#x2F; For testing Room migrations, add:testCompile &quot;android.arch.persistence.room:testing:1.0.0-alpha1&quot;&#x2F;&#x2F; For Room RxJava support, add:compile &quot;android.arch.persistence.room:rxjava2:1.0.0-alpha1&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LifeCycles"><a href="#LifeCycles" class="headerlink" title="LifeCycles"></a>LifeCycles</h2><p>Android开发中，经常需要管理生命周期。举个栗子，我们需要获取用户的地址位置，当这个Activity在显示的时候，我们开启定位功能，然后实时获取到定位信息，当页面被销毁的时候，需要关闭定位功能。</p><p>下面是简单的示例代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyLocationListener</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">MyLocationListener</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Callback</span> callback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// connect to system location service</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// disconnect from system location service</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">MyLocationListener</span> myLocationListener<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        myLocationListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyLocationListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>location<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// update UI</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myLocationListener<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myLocationListener<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面只是一个简单的场景，我们来个复杂一点的场景。当定位功能需要满足一些条件下才开启，那么会变得复杂多了。可能在执行Activity的stop方法时，定位的start方法才刚刚开始执行，比如如下代码，这样生命周期管理就变得很麻烦了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">MyLocationListener</span> myLocationListener<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        myLocationListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyLocationListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// update UI</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">checkUserStatus</span><span class="token punctuation">(</span>result <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// what if this callback is invoked AFTER activity is stopped?</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                myLocationListener<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myLocationListener<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AAC中提供了Lifecycle，用来帮助我们解决这样的问题。LifeCycle使用2个枚举类来解决生命周期管理问题。一个是事件，一个是状态。</p><p>事件：</p><p>生命周期事件由系统来分发，这些事件对于与Activity和Fragment的生命周期函数。</p><p>状态：</p><p>Lifecycle的状态，用于追踪中Lifecycle对象，如下图所示。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-6affa063292d5265.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Lifecycle的状态"></p><p>上面的定位功能代码，使用LifeCycle实现以后是这样的，实现一个<code>LifecycleObserver</code>接口，然后用注解标注状态，最后在LifecycleOwner中添加监听。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyObserver</span> <span class="token keyword">implements</span> <span class="token class-name">LifecycleObserver</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@OnLifecycleEvent</span><span class="token punctuation">(</span><span class="token class-name">Lifecycle<span class="token punctuation">.</span>Event</span><span class="token punctuation">.</span>ON_RESUME<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@OnLifecycleEvent</span><span class="token punctuation">(</span><span class="token class-name">Lifecycle<span class="token punctuation">.</span>Event</span><span class="token punctuation">.</span>ON_PAUSE<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>aLifecycleOwner<span class="token punctuation">.</span><span class="token function">getLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中用到了<code>aLifecycleOwner</code>是<code>LifecycleOwner</code>接口对象，<code>LifecycleOwner</code>是一个只有一个方法的接口<code>getLifecycle()</code>，需要由子类来实现。</p><p>在Lib中已经有实现好的子类，我们可以直接拿来使用。比如<code>LifecycleActivity</code>和<code>LifecycleFragment</code>，我们只需要继承此类就行了。</p><p>当然实际开发的时候我们会自己定义BaseActivity，Java是单继承模式，那么需要自己实现<code>LifecycleRegistryOwner</code>接口。</p><p>如下所示即可，代码很近简单</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token keyword">implements</span> <span class="token class-name">LifecycleRegistryOwner</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LifecycleRegistry</span> lifecycleRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LifecycleRegistry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">LifecycleRegistry</span> <span class="token function">getLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> lifecycleRegistry<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h2><p>LiveData 是一个 Data Holder 类，可以持有数据，同时这个数据可以被监听的，当数据改变的时候，可以触发回调。但是又不像普通的<code>Observable</code>，LiveData绑定了App的组件，LiveData可以指定在LifeCycle的某个状态被触发。比如LiveData可以指定在LifeCycle的 STARTED 或 RESUMED状体被触发。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocationLiveData</span> <span class="token keyword">extends</span> <span class="token class-name">LiveData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Location</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">LocationManager</span> locationManager<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SimpleLocationListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleLocationListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLocationChanged</span><span class="token punctuation">(</span><span class="token class-name">Location</span> location<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setValue</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LocationLiveData</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        locationManager <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LocationManager</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span>LOCATION_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        locationManager<span class="token punctuation">.</span><span class="token function">requestLocationUpdates</span><span class="token punctuation">(</span><span class="token class-name">LocationManager</span><span class="token punctuation">.</span>GPS_PROVIDER<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onInactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        locationManager<span class="token punctuation">.</span><span class="token function">removeUpdates</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>onActive()</li></ul><p>这个方法在LiveData在被激活的状态下执行，我们可以开始执行一些操作。</p><ul><li>onActive()</li></ul><p>这个方法在LiveData在的失去活性状态下执行，我们可以结束执行一些操作。</p><ul><li>setValue()</li></ul><p>执行这个方法的时候，LiveData可以触发它的回调。</p><p><code>LocationLiveData</code>可以这样使用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFragment</span> <span class="token keyword">extends</span> <span class="token class-name">LifecycleFragment</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> onActivityCreated <span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LiveData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Location</span><span class="token punctuation">></span></span> myLocationListener <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>        <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">checkUserStatus</span><span class="token punctuation">(</span>result <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                myLocationListener<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// update UI</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，上面的<code>addObserver</code>方法，必须传<code>LifecycleOwner</code>对象，也就是说添加的对象必须是可以被LifeCycle管理的。</p><p>如果LifeCycle没有触发对对应的状态（STARTED or RESUMED），它的值被改变了，那么Observe就不会被执行，</p><p>如果LifeCycle被销毁了，那么Observe将自动被删除。</p><p>实际上LiveData就提供一种新的供数据共享方式。可以用它在多个Activity、Fragment等其他有生命周期管理的类中实现数据共享。</p><p>还是上面的定位例子。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocationLiveData</span> <span class="token keyword">extends</span> <span class="token class-name">LiveData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Location</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">LocationLiveData</span> sInstance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">LocationManager</span> locationManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@MainThread</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">LocationLiveData</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocationLiveData</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sInstance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">SimpleLocationListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleLocationListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLocationChanged</span><span class="token punctuation">(</span><span class="token class-name">Location</span> location<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setValue</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">LocationLiveData</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        locationManager <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LocationManager</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span>LOCATION_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        locationManager<span class="token punctuation">.</span><span class="token function">requestLocationUpdates</span><span class="token punctuation">(</span><span class="token class-name">LocationManager</span><span class="token punctuation">.</span>GPS_PROVIDER<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onInactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        locationManager<span class="token punctuation">.</span><span class="token function">removeUpdates</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在Fragment中调用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFragment</span> <span class="token keyword">extends</span> <span class="token class-name">LifecycleFragment</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> onActivityCreated <span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">checkUserStatus</span><span class="token punctuation">(</span>result <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">LocationLiveData</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                   <span class="token comment">// update UI</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的示例，可以得到使用LiveData优点：</p><ul><li><p>没有内存泄露的风险，全部绑定到对应的生命周期，当LifeCycle被销毁的时候，它们也自动被移除</p></li><li><p>降低Crash，当Activity被销毁的时候，LiveData的Observer自动被删除，然后UI就不会再接受到通知</p></li><li><p>实时数据，因为LiveData是持有真正的数据的，所以当生命周期又重新开始的时候，又可以重新拿到数据</p></li><li><p>正常配置改变，当Activity或者Fragment重新创建的时候，可以从LiveData中获取上一次有用的数据</p></li><li><p>不再需要手动的管理生命周期</p></li></ul><h3 id="Transformations"><a href="#Transformations" class="headerlink" title="Transformations"></a>Transformations</h3><p>有时候需要对一个LiveData做Observer，但是这个LiveData是依赖另外一个LiveData，有点类似于RxJava中的操作符，我们可以这样做。</p><ul><li>Transformations.map()</li></ul><p>用于事件流的传递，用于触发下游数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LiveData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userLiveData <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token class-name">LiveData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> userName <span class="token operator">=</span> <span class="token class-name">Transformations</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>userLiveData<span class="token punctuation">,</span> user <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    user<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>lastName<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Transformations.switchMap()</li></ul><p>这个和map类似，只不过这个是用来触发上游数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">LiveData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token class-name">LiveData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> userId <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token class-name">LiveData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> user <span class="token operator">=</span> <span class="token class-name">Transformations</span><span class="token punctuation">.</span><span class="token function">switchMap</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> id <span class="token operator">-></span> <span class="token function">getUser</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h2><p>ViewModel是用来存储UI层的数据，以及管理对应的数据，当数据修改的时候，可以马上刷新UI。</p><p>Android系统提供控件，比如Activity和Fragment，这些控件都是具有生命周期方法，这些生命周期方法被系统调用。</p><p>当这些控件被销毁或者被重建的时候，如果数据保存在这些对象中，那么数据就会丢失。比如在一个界面，保存了一些用户信息，当界面重新创建的时候，就需要重新去获取数据。当然了也可以使用控件自动再带的方法，在<code>onSaveInstanceState</code>方法中保存数据，在onCreate中重新获得数据，但这仅仅在数据量比较小的情况下。如果数据量很大，这种方法就不能适用了。</p><p>另外一个问题就是，经常需要在Activity中加载数据，这些数据可能是异步的，因为获取数据需要花费很长的时间。那么Activity就需要管理这些数据调用，否则很有可能会产生内存泄露问题。最后需要做很多额外的操作，来保证程序的正常运行。</p><p>同时Activity不仅仅只是用来加载数据的，还要加载其他资源，做其他的操作，最后Activity类变大，就是我们常讲的上帝类。也有不少架构是把一些操作放到单独的类中，比如MVP就是这样，创建相同类似于生命周期的函数做代理，这样可以减少Activity的代码量，但是这样就会变得很复杂，同时也难以测试。</p><p>AAC中提供ViewModel可以很方便的用来管理数据。我们可以利用它来管理UI组件与数据的绑定关系。ViewModel提供自动绑定的形式，当数据源有更新的时候，可以自动立即的更新UI。</p><p>下面是一个简单的代码示例。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyViewModel</span> <span class="token keyword">extends</span> <span class="token class-name">ViewModel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">MutableLiveData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span><span class="token punctuation">></span></span> users<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LiveData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>users <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutableLiveData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">loadUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// do async operation to fetch users</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyViewModel</span> model <span class="token operator">=</span> <span class="token class-name">ViewModelProviders</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">MyViewModel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> users <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// update UI</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们获取ViewModel实例的时候，ViewModel是通过ViewModelProvider保存在LifeCycle中，ViewModel会一直保存在LifeCycle中，直到Activity或者Fragment销毁了，触发LifeCycle被销毁，那么ViewModel也会被销毁的。下面是ViewModel的生命周期图。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-ba9eae3cd783a8fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h2 id="Room"><a href="#Room" class="headerlink" title="Room"></a>Room</h2><p>Room是一个持久化工具，和ormlite、greenDao类似，都是ORM工具。在开发中我们可以利用Room来操作sqlite数据库。</p><p>Room主要分为三个部分:</p><ul><li>Database</li></ul><p>使用注解申明一个类，注解中包含若干个Entity类，这个Database类主要负责创建数据库以及获取数据对象的。</p><ul><li>Entity</li></ul><p>表示每个数据库的总的一个表结构，同样也是使用注解表示，类中的每个字段都对应表中的一列。</p><ul><li>DAO</li></ul><p>DAO是 Data Access Object的缩写，表示从从代码中直接访问数据库，屏蔽sql语句。</p><p>下面是官方给的结构图。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-5a8f27c62e9c22a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// User.java</span><span class="token annotation punctuation">@Entity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@PrimaryKey</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> uid<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ColumnInfo</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"first_name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ColumnInfo</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"last_name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>    <span class="token comment">// Getters and setters are ignored for brevity,</span>    <span class="token comment">// but they're required for Room to work.</span><span class="token punctuation">&#125;</span><span class="token comment">// UserDao.java</span><span class="token annotation punctuation">@Dao</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user"</span><span class="token punctuation">)</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE uid IN (:userIds)"</span><span class="token punctuation">)</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">loadAllByIds</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> userIds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE first_name LIKE :first AND "</span>           <span class="token operator">+</span> <span class="token string">"last_name LIKE :last LIMIT 1"</span><span class="token punctuation">)</span>    <span class="token class-name">User</span> <span class="token function">findByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span> <span class="token class-name">String</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Insert</span>    <span class="token keyword">void</span> <span class="token function">insertAll</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Delete</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// AppDatabase.java</span><span class="token annotation punctuation">@Database</span><span class="token punctuation">(</span>entities <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AppDatabase</span> <span class="token keyword">extends</span> <span class="token class-name">RoomDatabase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">UserDao</span> <span class="token function">userDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后在代码中调用Database对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AppDatabase</span> db <span class="token operator">=</span> <span class="token class-name">Room</span><span class="token punctuation">.</span><span class="token function">databaseBuilder</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">AppDatabase</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"database-name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：</strong> Database最好设计成单利模式，否则对象太多会有性能的影响。</p><h3 id="Entities"><a href="#Entities" class="headerlink" title="Entities"></a>Entities</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@PrimaryKey</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ColumnInfo</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"first_name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ColumnInfo</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"last_name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Ignore</span>    <span class="token class-name">Bitmap</span> picture<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@Entity用来注解一个实体类，对应数据库一张表。默认情况下，Room为实体中定义的每个成员变量在数据中创建对应的字段，我们可能不想保存到数据库的字段，这时候就要用道@Ignore注解。</p><p><strong>注意：</strong> 为了保存每一个字段，这个字段需要有可以访问的gettter/setter方法或者是public的属性</p><h3 id="Entity的参数-primaryKeys"><a href="#Entity的参数-primaryKeys" class="headerlink" title="Entity的参数 primaryKeys"></a>Entity的参数 primaryKeys</h3><p>每个实体必须至少定义1个字段作为主键，即使只有一个成员变量，除了使用@PrimaryKey 将字段标记为主键的方式之外，还可以通过在@Entity注解中指定参数的形式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>primaryKeys <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"firstName"</span><span class="token punctuation">,</span> <span class="token string">"lastName"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Ignore</span>    <span class="token class-name">Bitmap</span> picture<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Entity的参数-tableName"><a href="#Entity的参数-tableName" class="headerlink" title="Entity的参数 tableName"></a>Entity的参数 tableName</h3><p>默认情况下，Room使用类名作为数据库表名。如果你想表都有一个不同的名称，就可以在@Entity中使用tableName参数指定</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>tableName <span class="token operator">=</span> <span class="token string">"users"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>和tableName作用类似； @ColumnInfo注解是改变成员变量对应的数据库的字段名称。</p><h3 id="Entity的参数-indices"><a href="#Entity的参数-indices" class="headerlink" title="Entity的参数 indices"></a>Entity的参数 indices</h3><p>indices的参数值是@Index的数组，在某些情况写为了加快查询速度我们可以需要加入索引</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>indices <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Index</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Index</span><span class="token punctuation">(</span><span class="token string">"last_name"</span><span class="token punctuation">,</span> <span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@PrimaryKey</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ColumnInfo</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"last_name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Ignore</span>    <span class="token class-name">Bitmap</span> picture<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有时，数据库中某些字段或字段组必须是唯一的。通过将@Index的unique 设置为true，可以强制执行此唯一性属性。</p><p>下面的代码示例防止表有两行包含FirstName和LastName列值相同的一组：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>indices <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Index</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"first_name"</span><span class="token punctuation">,</span> <span class="token string">"last_name"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@PrimaryKey</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ColumnInfo</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"first_name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ColumnInfo</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"last_name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Ignore</span>    <span class="token class-name">Bitmap</span> picture<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Entity的参数-foreignKeys"><a href="#Entity的参数-foreignKeys" class="headerlink" title="Entity的参数 foreignKeys"></a>Entity的参数 foreignKeys</h3><p>因为SQLite是一个关系型数据库，你可以指定对象之间的关系。尽管大多数ORM库允许实体对象相互引用，但Room明确禁止。实体之间没有对象引用。</p><p>不能使用直接关系，所以就要用到foreignKeys（外键）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>foreignKeys <span class="token operator">=</span> <span class="token annotation punctuation">@ForeignKey</span><span class="token punctuation">(</span>entity <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                                  parentColumns <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>                                  childColumns <span class="token operator">=</span> <span class="token string">"user_id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@PrimaryKey</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> bookId<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ColumnInfo</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user_id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外键是非常强大的，因为它允许指定引用实体更新时发生的操作。例如，级联删除，你可以告诉SQLite删除所有书籍的用户如果用户对应的实例是由包括OnDelete =CASCADE在@ForeignKey注释。ON_CONFLICT ： @Insert(onConflict=REPLACE) REMOVE 或者 REPLACE</p><p>有时候可能还需要对象嵌套这时候可以用@Embedded注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> state<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ColumnInfo</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"post_code"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> postCode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Entity</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@PrimaryKey</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Embedded</span>    <span class="token keyword">public</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Dao</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user"</span><span class="token punctuation">)</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE uid IN (:userIds)"</span><span class="token punctuation">)</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">loadAllByIds</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> userIds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE first_name LIKE :first AND "</span>           <span class="token operator">+</span> <span class="token string">"last_name LIKE :last LIMIT 1"</span><span class="token punctuation">)</span>    <span class="token class-name">User</span> <span class="token function">findByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span> <span class="token class-name">String</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Insert</span>    <span class="token keyword">void</span> <span class="token function">insertAll</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Delete</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据访问对象Data Access Objects (DAOs)是一种抽象访问数据库的干净的方式。</p><h3 id="DAO的Insert-操作"><a href="#DAO的Insert-操作" class="headerlink" title="DAO的Insert 操作"></a>DAO的Insert 操作</h3><p>当创建DAO方法并用@Insert注释它时，生成一个实现时会在一个事务中完成插入所有参数到数据库。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Dao</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyDao</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span>onConflict <span class="token operator">=</span> <span class="token class-name">OnConflictStrategy</span><span class="token punctuation">.</span>REPLACE<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUsers</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Insert</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertBothUsers</span><span class="token punctuation">(</span><span class="token class-name">User</span> user1<span class="token punctuation">,</span> <span class="token class-name">User</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Insert</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUsersAndFriends</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> friends<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DAO的Update、Delete操作"><a href="#DAO的Update、Delete操作" class="headerlink" title="DAO的Update、Delete操作"></a>DAO的Update、Delete操作</h3><p>与上面类似</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Dao</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyDao</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Update</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUsers</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Delete</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUsers</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DAO的Query-操作"><a href="#DAO的Query-操作" class="headerlink" title="DAO的Query 操作"></a>DAO的Query 操作</h3><p>一个简单查询示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Dao</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyDao</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">loadAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>稍微复杂的，带参数的查询操作</p><pre class="line-numbers language-none"><code class="language-none">@Daopublic interface MyDao &#123;    @Query(&quot;SELECT * FROM user WHERE age &gt; :minAge&quot;)    public User[] loadAllUsersOlderThan(int minAge);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以带多个参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Dao</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyDao</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE age BETWEEN :minAge AND :maxAge"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">loadAllUsersBetweenAges</span><span class="token punctuation">(</span><span class="token keyword">int</span> minAge<span class="token punctuation">,</span> <span class="token keyword">int</span> maxAge<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE first_name LIKE :search OR last_name LIKE :search"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">findUserWithName</span><span class="token punctuation">(</span><span class="token class-name">String</span> search<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="返回子集"><a href="#返回子集" class="headerlink" title="返回子集"></a>返回子集</h3><p>上面示例都是查询一个表中的所有字段，结果用对应的Entity即可，但是如果我只要其中的几个字段，那么该怎么使用呢？</p><p>比如上面的User，我只需要firstName和lastName，首先定义一个子集，然后结果改成对应子集即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NameTuple</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ColumnInfo</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"first_name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ColumnInfo</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"last_name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Dao</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyDao</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT first_name, last_name FROM user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NameTuple</span><span class="token punctuation">></span></span> <span class="token function">loadFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="支持集合参数"><a href="#支持集合参数" class="headerlink" title="支持集合参数"></a>支持集合参数</h3><p>有个这样一个查询需求，比如要查询某两个地区的所有用户，直接用sql中的in即可，但是如果这个地区是程序指定的，个数不确定，那么改怎么办？</p><pre class="line-numbers language-none"><code class="language-none">@Daopublic interface MyDao &#123;    @Query(&quot;SELECT first_name, last_name FROM user WHERE region IN (:regions)&quot;)    public List&lt;NameTuple&gt; loadUsersFromRegions(List&lt;String&gt; regions);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="支持Observable"><a href="#支持Observable" class="headerlink" title="支持Observable"></a>支持Observable</h3><p>前面提到了LiveData，可以异步的获取数据，那么我们的Room也是支持异步查询的。</p><pre class="line-numbers language-none"><code class="language-none">@Daopublic interface MyDao &#123;    @Query(&quot;SELECT first_name, last_name FROM user WHERE region IN (:regions)&quot;)    public LiveData&lt;List&lt;User&gt;&gt; loadUsersFromRegionsSync(List&lt;String&gt; regions);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="支持RxJava"><a href="#支持RxJava" class="headerlink" title="支持RxJava"></a>支持RxJava</h3><p>RxJava是另外一个异步操作库，同样也是支持的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Dao</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyDao</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * from user where id = :id LIMIT 1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Flowable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">loadUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="支持Cursor"><a href="#支持Cursor" class="headerlink" title="支持Cursor"></a>支持Cursor</h3><p>原始的Android系统查询结果是通过Cursor来获取的，同样也支持。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Dao</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyDao</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE age > :minAge LIMIT 5"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Cursor</span> <span class="token function">loadRawUsersOlderThan</span><span class="token punctuation">(</span><span class="token keyword">int</span> minAge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>有时候数据库存在范式相关，数据拆到了多个表中，那么就需要关联多个表进行查询，如果结果只是一个表的数据，那么很简单，直接用Entity定义的类型即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Dao</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyDao</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM book "</span>           <span class="token operator">+</span> <span class="token string">"INNER JOIN loan ON loan.book_id = book.id "</span>           <span class="token operator">+</span> <span class="token string">"INNER JOIN user ON user.id = loan.user_id "</span>           <span class="token operator">+</span> <span class="token string">"WHERE user.name LIKE :userName"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> <span class="token function">findBooksBorrowedByNameSync</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果结果是部分字段，同上面一样，需要单独定义一个POJO，来接受数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserPet</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> petName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Dao</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyDao</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT user.name AS userName, pet.name AS petName "</span>          <span class="token operator">+</span> <span class="token string">"FROM user, pet "</span>          <span class="token operator">+</span> <span class="token string">"WHERE user.id = pet.user_id"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">LiveData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">UserPet</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">loadUserAndPetNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>有时候Java定义的数据类型和数据库中存储的数据类型是不一样的，Room提供类型转换，这样在操作数据库的时候，可以自动转换。</p><p>比如在Java中，时间用Date表示，但是在数据库中类型确实long，这样有利于存储。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Converters</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@TypeConverter</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">fromTimestamp</span><span class="token punctuation">(</span><span class="token class-name">Long</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@TypeConverter</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">dateToTimestamp</span><span class="token punctuation">(</span><span class="token class-name">Date</span> date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> date <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义数据库时候需要指定类型转换，同时定义好Entity和Dao。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Database</span><span class="token punctuation">(</span>entities <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">User</span><span class="token punctuation">.</span>java<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TypeConverters</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">Converter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AppDatabase</span> <span class="token keyword">extends</span> <span class="token class-name">RoomDatabase</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">UserDao</span> <span class="token function">userDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Entity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Dao</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE birthday BETWEEN :from AND :to"</span><span class="token punctuation">)</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">findUsersBornBetweenDates</span><span class="token punctuation">(</span><span class="token class-name">Date</span> from<span class="token punctuation">,</span> <span class="token class-name">Date</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据库升级"><a href="#数据库升级" class="headerlink" title="数据库升级"></a>数据库升级</h3><p>版本迭代中，我们不可避免的会遇到数据库升级问题，Room也为我们提供了数据库升级的处理接口。</p><pre class="line-numbers language-none"><code class="language-none">Room.databaseBuilder(getApplicationContext(), MyDb.class, &quot;database-name&quot;).addMigrations(MIGRATION_1_2, MIGRATION_2_3).build();static final Migration MIGRATION_1_2 &#x3D; new Migration(1, 2) &#123;    @Override    public void migrate(SupportSQLiteDatabase database) &#123;        database.execSQL(&quot;CREATE TABLE &#96;Fruit&#96; (&#96;id&#96; INTEGER, &#96;name&#96; TEXT, PRIMARY KEY(&#96;id&#96;))&quot;);    &#125;&#125;;static final Migration MIGRATION_2_3 &#x3D; new Migration(2, 3) &#123;    @Override    public void migrate(SupportSQLiteDatabase database) &#123;        database.execSQL(&quot;ALTER TABLE Book ADD COLUMN pub_year INTEGER&quot;);    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迁移过程结束后，Room将验证架构以确保迁移正确发生。如果Room发现问题，则抛出包含不匹配信息的异常。</p><p><strong>警告：</strong> 如果不提供必要的迁移，Room会重新构建数据库，这意味着将丢失数据库中的所有数据。</p><h3 id="输出模式"><a href="#输出模式" class="headerlink" title="输出模式"></a>输出模式</h3><p>可以在gradle中设置开启输出模式，便于我们调试，查看数据库表情况，以及做数据库迁移。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">android <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    defaultConfig <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        javaCompileOptions <span class="token punctuation">&#123;</span>            annotationProcessorOptions <span class="token punctuation">&#123;</span>                arguments <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"room.schemaLocation"</span><span class="token operator">:</span>                             <span class="token string">"$projectDir/schemas"</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h2><p>这里是官方示例，本人自己参考官方文档和示例<a href="https://github.com/googlesamples/android-architecture-components">Android Architecture Components samples</a>后，也写出了一个类似的示例项目<a href="https://github.com/LiushuiXiaoxia/XiaoxiaZhihu_AAC">XiaoxiaZhihu_AAC</a>，还请多多指教。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原先IO是在5月底已经结束，本来想尽快参照官方文档和示例，把API撸一遍，然后写个Demo和文章来介绍一下。代码示例早已经写出来了，但6月分工作太忙，然后又出差到北京，最后等到了6月底了，才把这篇文章给写出来了。中间可能有内容以及改变，如果有发现稳重有错误，请及时指出，不理赐教。同时以后做事一定要有始有终，确定的事一定要坚持。</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p><a href="https://developer.android.com/topic/libraries/architecture/index.html">Android Architecture Components</a></p><p><a href="http://www.cocoachina.com/android/20170519/19309.html">简单聊聊Android Architecture Componets</a></p><p><a href="https://github.com/googlesamples/android-architecture-components">Android Architecture Components samples</a></p><p><a href="https://github.com/LiushuiXiaoxia/XiaoxiaZhihu_AAC">XiaoxiaZhihu_AAC</a></p><p><a href="https://github.com/LiushuiXiaoxia/AndroidArchitectureComponents">浅谈Android Architecture Components</a></p><p><a href="https://juejin.im/entry/591d41c70ce463006923f937">Room ORM 数据库框架</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Architecture Components </tag>
            
            <tag> AAC </tag>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化Curl返回的Json字符</title>
      <link href="/2017/08/12/curl-fromat-json-response/"/>
      <url>/2017/08/12/curl-fromat-json-response/</url>
      
        <content type="html"><![CDATA[<h1 id="格式化Curl返回的Json字符"><a href="#格式化Curl返回的Json字符" class="headerlink" title="格式化Curl返回的Json字符"></a>格式化Curl返回的Json字符</h1><hr><p>经常会用到curl调试接口，服务器返回的是json，不过这些json是没有格式化的，不方便阅读。</p><p>经过搜索和实验，发现下面2中方式比较方便。</p><span id="more"></span><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://news-at.zhihu.com/api/4/news/latest<span class="token punctuation">&#123;</span><span class="token string">"date"</span><span class="token builtin class-name">:</span><span class="token string">"20171014"</span>,<span class="token string">"stories"</span>:<span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"这些有故事的 DOTA 职业选手外号（国外篇）"</span>,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101417"</span>,<span class="token string">"images"</span>:<span class="token punctuation">[</span><span class="token string">"https:\/\/pic3.zhimg.com\/v2-471f6f1170fcb7d491ba54404acaf30a.jpg"</span><span class="token punctuation">]</span>,<span class="token string">"multipic"</span>:true,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9651211<span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"images"</span>:<span class="token punctuation">[</span><span class="token string">"https:\/\/pic1.zhimg.com\/v2-16e9abb39a4fb4dd56994c9db9378110.jpg"</span><span class="token punctuation">]</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9649645,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101416"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"被你的宠物捉弄的的时候，你想过「动物是否会骗人」吗？"</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"images"</span>:<span class="token punctuation">[</span><span class="token string">"https:\/\/pic3.zhimg.com\/v2-5ab5db73049a413a6810677ad3817602.jpg"</span><span class="token punctuation">]</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9651376,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101415"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"想明白 iPhone X 的人脸识别是怎么工作的，先得了解这道「光」"</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"images"</span>:<span class="token punctuation">[</span><span class="token string">"https:\/\/pic1.zhimg.com\/v2-c20f4551e1725eef3ac7cd502e9ed71c.jpg"</span><span class="token punctuation">]</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9649434,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101414"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"不靠专利，拿什么保护发明？世博会的数据会告诉你"</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"images"</span>:<span class="token punctuation">[</span><span class="token string">"https:\/\/pic1.zhimg.com\/v2-a0a033debd47042be4554a3450fe9478.jpg"</span><span class="token punctuation">]</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9650760,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101413"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"回头看这项世界顶级比赛的历史，对它的存在意义愈发迷茫"</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"images"</span>:<span class="token punctuation">[</span><span class="token string">"https:\/\/pic4.zhimg.com\/v2-0df458ee4784b68befc40c03ddf5bc67.jpg"</span><span class="token punctuation">]</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9646702,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101412"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"大误 · 一次咨询"</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"images"</span>:<span class="token punctuation">[</span><span class="token string">"https:\/\/pic2.zhimg.com\/v2-9d0caf3ba46c60a15826e53ea8473a5d.jpg"</span><span class="token punctuation">]</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9634763,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101411"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"黄金钩焖五花肉，绵软浓香的口感，其他菜绝对没法比"</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"images"</span>:<span class="token punctuation">[</span><span class="token string">"https:\/\/pic4.zhimg.com\/v2-c4964723821a835fb42a4f70bfa8ce6f.jpg"</span><span class="token punctuation">]</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9650778,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101410"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"Ta 的一生可以写 20 本书，至于是男是女，已经不重要了"</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"images"</span>:<span class="token punctuation">[</span><span class="token string">"https:\/\/pic1.zhimg.com\/v2-054e30b7cec2624a849af1e358528cd8.jpg"</span><span class="token punctuation">]</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9634507,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101409"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"中国有哪些不出名，但值得一去的山？"</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"images"</span>:<span class="token punctuation">[</span><span class="token string">"https:\/\/pic4.zhimg.com\/v2-95d371314244ca1ce74bfbd22ba0938f.jpg"</span><span class="token punctuation">]</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9651324,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101408"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"- 实在想不到怎么出国更炫酷了<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>- 喏，自己开飞机去"</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"images"</span>:<span class="token punctuation">[</span><span class="token string">"https:\/\/pic2.zhimg.com\/v2-06dd1c008cac334147cd81abf0bfefe1.jpg"</span><span class="token punctuation">]</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9649625,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101407"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"早起来一份「班尼迪克蛋」，做个逼格满满的早餐网红"</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"images"</span>:<span class="token punctuation">[</span><span class="token string">"https:\/\/pic4.zhimg.com\/v2-b0e9676d36b7fd4b1822ba8cb93bf4f7.jpg"</span><span class="token punctuation">]</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9651424,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101407"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"丁俊晖：那个满脸青春痘的少年球手，几度大起大落已是而立之年"</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"images"</span>:<span class="token punctuation">[</span><span class="token string">"https:\/\/pic3.zhimg.com\/v2-a065e8278298efb317b13d92084275f6.jpg"</span><span class="token punctuation">]</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9650104,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101407"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"在你读过的童话中，是不是一对姐妹里坏的那个总是姐姐？"</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"images"</span>:<span class="token punctuation">[</span><span class="token string">"https:\/\/pic3.zhimg.com\/v2-db3702f9cee08897c8f7a174000f0ca2.jpg"</span><span class="token punctuation">]</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9651366,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101406"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"瞎扯 · 如何正确地吐槽"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>,<span class="token string">"top_stories"</span>:<span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"image"</span><span class="token builtin class-name">:</span><span class="token string">"https:\/\/pic3.zhimg.com\/v2-e5dc45c4698771e7001e1ae1c27ba8b6.jpg"</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9651376,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101415"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"想明白 iPhone X 的人脸识别是怎么工作的，先得了解这道「光」"</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"image"</span><span class="token builtin class-name">:</span><span class="token string">"https:\/\/pic3.zhimg.com\/v2-ce790cb7a633fbc7aa8e2303e3c1ce16.jpg"</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9651424,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101407"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"丁俊晖：那个满脸青春痘的少年球手，几度大起大落已是而立之年"</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"image"</span><span class="token builtin class-name">:</span><span class="token string">"https:\/\/pic2.zhimg.com\/v2-36e6e13f557c2dd29e65d8c23fa9cec5.jpg"</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9634507,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101409"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"中国有哪些不出名，但值得一去的山？"</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"image"</span><span class="token builtin class-name">:</span><span class="token string">"https:\/\/pic4.zhimg.com\/v2-79056fe95d9834f9c8b30957980b0193.jpg"</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9649434,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101414"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"不靠专利，拿什么保护发明？世博会的数据会告诉你"</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"image"</span><span class="token builtin class-name">:</span><span class="token string">"https:\/\/pic4.zhimg.com\/v2-45e71d718938e0a4e292b12e52269a07.jpg"</span>,<span class="token string">"type"</span>:0,<span class="token string">"id"</span>:9650104,<span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span><span class="token string">"101407"</span>,<span class="token string">"title"</span><span class="token builtin class-name">:</span><span class="token string">"在你读过的童话中，是不是一对姐妹里坏的那个总是姐姐？"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Python-格式化"><a href="#Python-格式化" class="headerlink" title="Python 格式化"></a>Python 格式化</h2><p>在curl命令后面添加 <code> | python -m json.tool</code> 即可。</p><p>如下所示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://news-at.zhihu.com/api/4/news/latest <span class="token operator">|</span> python -m json.tool  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed<span class="token number">100</span>  <span class="token number">3901</span>  <span class="token number">100</span>  <span class="token number">3901</span>    <span class="token number">0</span>     <span class="token number">0</span>  <span class="token number">33333</span>      <span class="token number">0</span> --:--:-- --:--:-- --:--:-- <span class="token number">33629</span><span class="token punctuation">&#123;</span>    <span class="token string">"date"</span><span class="token builtin class-name">:</span> <span class="token string">"20171014"</span>,    <span class="token string">"stories"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101417"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9651211</span>,            <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"https://pic3.zhimg.com/v2-471f6f1170fcb7d491ba54404acaf30a.jpg"</span>            <span class="token punctuation">]</span>,            <span class="token string">"multipic"</span><span class="token builtin class-name">:</span> true,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token entity" title="\u8fd9">\u8fd9</span><span class="token entity" title="\u4e9b">\u4e9b</span><span class="token entity" title="\u6709">\u6709</span><span class="token entity" title="\u6545">\u6545</span><span class="token entity" title="\u4e8b">\u4e8b</span><span class="token entity" title="\u7684">\u7684</span> DOTA <span class="token entity" title="\u804c">\u804c</span><span class="token entity" title="\u4e1a">\u4e1a</span><span class="token entity" title="\u9009">\u9009</span><span class="token entity" title="\u624b">\u624b</span><span class="token entity" title="\u5916">\u5916</span><span class="token entity" title="\u53f7">\u53f7</span><span class="token entity" title="\uff08">\uff08</span><span class="token entity" title="\u56fd">\u56fd</span><span class="token entity" title="\u5916">\u5916</span><span class="token entity" title="\u7bc7">\u7bc7</span><span class="token entity" title="\uff09">\uff09</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>,        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101416"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9649645</span>,            <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"https://pic1.zhimg.com/v2-16e9abb39a4fb4dd56994c9db9378110.jpg"</span>            <span class="token punctuation">]</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token entity" title="\u88ab">\u88ab</span><span class="token entity" title="\u4f60">\u4f60</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u5ba0">\u5ba0</span><span class="token entity" title="\u7269">\u7269</span><span class="token entity" title="\u6349">\u6349</span><span class="token entity" title="\u5f04">\u5f04</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u65f6">\u65f6</span><span class="token entity" title="\u5019">\u5019</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u4f60">\u4f60</span><span class="token entity" title="\u60f3">\u60f3</span><span class="token entity" title="\u8fc7">\u8fc7</span><span class="token entity" title="\u300c">\u300c</span><span class="token entity" title="\u52a8">\u52a8</span><span class="token entity" title="\u7269">\u7269</span><span class="token entity" title="\u662f">\u662f</span><span class="token entity" title="\u5426">\u5426</span><span class="token entity" title="\u4f1a">\u4f1a</span><span class="token entity" title="\u9a97">\u9a97</span><span class="token entity" title="\u4eba">\u4eba</span><span class="token entity" title="\u300d">\u300d</span><span class="token entity" title="\u5417">\u5417</span><span class="token entity" title="\uff1f">\uff1f</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>,        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101415"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9651376</span>,            <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"https://pic3.zhimg.com/v2-5ab5db73049a413a6810677ad3817602.jpg"</span>            <span class="token punctuation">]</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token entity" title="\u60f3">\u60f3</span><span class="token entity" title="\u660e">\u660e</span><span class="token entity" title="\u767d">\u767d</span> iPhone X <span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u4eba">\u4eba</span><span class="token entity" title="\u8138">\u8138</span><span class="token entity" title="\u8bc6">\u8bc6</span><span class="token entity" title="\u522b">\u522b</span><span class="token entity" title="\u662f">\u662f</span><span class="token entity" title="\u600e">\u600e</span><span class="token entity" title="\u4e48">\u4e48</span><span class="token entity" title="\u5de5">\u5de5</span><span class="token entity" title="\u4f5c">\u4f5c</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u5148">\u5148</span><span class="token entity" title="\u5f97">\u5f97</span><span class="token entity" title="\u4e86">\u4e86</span><span class="token entity" title="\u89e3">\u89e3</span><span class="token entity" title="\u8fd9">\u8fd9</span><span class="token entity" title="\u9053">\u9053</span><span class="token entity" title="\u300c">\u300c</span><span class="token entity" title="\u5149">\u5149</span><span class="token entity" title="\u300d">\u300d</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>,        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101414"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9649434</span>,            <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"https://pic1.zhimg.com/v2-c20f4551e1725eef3ac7cd502e9ed71c.jpg"</span>            <span class="token punctuation">]</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token entity" title="\u4e0d">\u4e0d</span><span class="token entity" title="\u9760">\u9760</span><span class="token entity" title="\u4e13">\u4e13</span><span class="token entity" title="\u5229">\u5229</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u62ff">\u62ff</span><span class="token entity" title="\u4ec0">\u4ec0</span><span class="token entity" title="\u4e48">\u4e48</span><span class="token entity" title="\u4fdd">\u4fdd</span><span class="token entity" title="\u62a4">\u62a4</span><span class="token entity" title="\u53d1">\u53d1</span><span class="token entity" title="\u660e">\u660e</span><span class="token entity" title="\uff1f">\uff1f</span><span class="token entity" title="\u4e16">\u4e16</span><span class="token entity" title="\u535a">\u535a</span><span class="token entity" title="\u4f1a">\u4f1a</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u6570">\u6570</span><span class="token entity" title="\u636e">\u636e</span><span class="token entity" title="\u4f1a">\u4f1a</span><span class="token entity" title="\u544a">\u544a</span><span class="token entity" title="\u8bc9">\u8bc9</span><span class="token entity" title="\u4f60">\u4f60</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>,        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101413"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9650760</span>,            <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"https://pic1.zhimg.com/v2-a0a033debd47042be4554a3450fe9478.jpg"</span>            <span class="token punctuation">]</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token entity" title="\u56de">\u56de</span><span class="token entity" title="\u5934">\u5934</span><span class="token entity" title="\u770b">\u770b</span><span class="token entity" title="\u8fd9">\u8fd9</span><span class="token entity" title="\u9879">\u9879</span><span class="token entity" title="\u4e16">\u4e16</span><span class="token entity" title="\u754c">\u754c</span><span class="token entity" title="\u9876">\u9876</span><span class="token entity" title="\u7ea7">\u7ea7</span><span class="token entity" title="\u6bd4">\u6bd4</span><span class="token entity" title="\u8d5b">\u8d5b</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u5386">\u5386</span><span class="token entity" title="\u53f2">\u53f2</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u5bf9">\u5bf9</span><span class="token entity" title="\u5b83">\u5b83</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u5b58">\u5b58</span><span class="token entity" title="\u5728">\u5728</span><span class="token entity" title="\u610f">\u610f</span><span class="token entity" title="\u4e49">\u4e49</span><span class="token entity" title="\u6108">\u6108</span><span class="token entity" title="\u53d1">\u53d1</span><span class="token entity" title="\u8ff7">\u8ff7</span><span class="token entity" title="\u832b">\u832b</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>,        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101412"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9646702</span>,            <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"https://pic4.zhimg.com/v2-0df458ee4784b68befc40c03ddf5bc67.jpg"</span>            <span class="token punctuation">]</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token entity" title="\u5927">\u5927</span><span class="token entity" title="\u8bef">\u8bef</span> <span class="token entity" title="\u00b7">\u00b7</span> <span class="token entity" title="\u4e00">\u4e00</span><span class="token entity" title="\u6b21">\u6b21</span><span class="token entity" title="\u54a8">\u54a8</span><span class="token entity" title="\u8be2">\u8be2</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>,        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101411"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9634763</span>,            <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"https://pic2.zhimg.com/v2-9d0caf3ba46c60a15826e53ea8473a5d.jpg"</span>            <span class="token punctuation">]</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token entity" title="\u9ec4">\u9ec4</span><span class="token entity" title="\u91d1">\u91d1</span><span class="token entity" title="\u94a9">\u94a9</span><span class="token entity" title="\u7116">\u7116</span><span class="token entity" title="\u4e94">\u4e94</span><span class="token entity" title="\u82b1">\u82b1</span><span class="token entity" title="\u8089">\u8089</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u7ef5">\u7ef5</span><span class="token entity" title="\u8f6f">\u8f6f</span><span class="token entity" title="\u6d53">\u6d53</span><span class="token entity" title="\u9999">\u9999</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u53e3">\u53e3</span><span class="token entity" title="\u611f">\u611f</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u5176">\u5176</span><span class="token entity" title="\u4ed6">\u4ed6</span><span class="token entity" title="\u83dc">\u83dc</span><span class="token entity" title="\u7edd">\u7edd</span><span class="token entity" title="\u5bf9">\u5bf9</span><span class="token entity" title="\u6ca1">\u6ca1</span><span class="token entity" title="\u6cd5">\u6cd5</span><span class="token entity" title="\u6bd4">\u6bd4</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>,        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101410"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9650778</span>,            <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"https://pic4.zhimg.com/v2-c4964723821a835fb42a4f70bfa8ce6f.jpg"</span>            <span class="token punctuation">]</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"Ta <span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u4e00">\u4e00</span><span class="token entity" title="\u751f">\u751f</span><span class="token entity" title="\u53ef">\u53ef</span><span class="token entity" title="\u4ee5">\u4ee5</span><span class="token entity" title="\u5199">\u5199</span> 20 <span class="token entity" title="\u672c">\u672c</span><span class="token entity" title="\u4e66">\u4e66</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u81f3">\u81f3</span><span class="token entity" title="\u4e8e">\u4e8e</span><span class="token entity" title="\u662f">\u662f</span><span class="token entity" title="\u7537">\u7537</span><span class="token entity" title="\u662f">\u662f</span><span class="token entity" title="\u5973">\u5973</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u5df2">\u5df2</span><span class="token entity" title="\u7ecf">\u7ecf</span><span class="token entity" title="\u4e0d">\u4e0d</span><span class="token entity" title="\u91cd">\u91cd</span><span class="token entity" title="\u8981">\u8981</span><span class="token entity" title="\u4e86">\u4e86</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>,        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101409"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9634507</span>,            <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"https://pic1.zhimg.com/v2-054e30b7cec2624a849af1e358528cd8.jpg"</span>            <span class="token punctuation">]</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token entity" title="\u4e2d">\u4e2d</span><span class="token entity" title="\u56fd">\u56fd</span><span class="token entity" title="\u6709">\u6709</span><span class="token entity" title="\u54ea">\u54ea</span><span class="token entity" title="\u4e9b">\u4e9b</span><span class="token entity" title="\u4e0d">\u4e0d</span><span class="token entity" title="\u51fa">\u51fa</span><span class="token entity" title="\u540d">\u540d</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u4f46">\u4f46</span><span class="token entity" title="\u503c">\u503c</span><span class="token entity" title="\u5f97">\u5f97</span><span class="token entity" title="\u4e00">\u4e00</span><span class="token entity" title="\u53bb">\u53bb</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u5c71">\u5c71</span><span class="token entity" title="\uff1f">\uff1f</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>,        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101408"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9651324</span>,            <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"https://pic4.zhimg.com/v2-95d371314244ca1ce74bfbd22ba0938f.jpg"</span>            <span class="token punctuation">]</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"- <span class="token entity" title="\u5b9e">\u5b9e</span><span class="token entity" title="\u5728">\u5728</span><span class="token entity" title="\u60f3">\u60f3</span><span class="token entity" title="\u4e0d">\u4e0d</span><span class="token entity" title="\u5230">\u5230</span><span class="token entity" title="\u600e">\u600e</span><span class="token entity" title="\u4e48">\u4e48</span><span class="token entity" title="\u51fa">\u51fa</span><span class="token entity" title="\u56fd">\u56fd</span><span class="token entity" title="\u66f4">\u66f4</span><span class="token entity" title="\u70ab">\u70ab</span><span class="token entity" title="\u9177">\u9177</span><span class="token entity" title="\u4e86">\u4e86</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>- <span class="token entity" title="\u558f">\u558f</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u81ea">\u81ea</span><span class="token entity" title="\u5df1">\u5df1</span><span class="token entity" title="\u5f00">\u5f00</span><span class="token entity" title="\u98de">\u98de</span><span class="token entity" title="\u673a">\u673a</span><span class="token entity" title="\u53bb">\u53bb</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>,        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101407"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9649625</span>,            <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"https://pic2.zhimg.com/v2-06dd1c008cac334147cd81abf0bfefe1.jpg"</span>            <span class="token punctuation">]</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token entity" title="\u65e9">\u65e9</span><span class="token entity" title="\u8d77">\u8d77</span><span class="token entity" title="\u6765">\u6765</span><span class="token entity" title="\u4e00">\u4e00</span><span class="token entity" title="\u4efd">\u4efd</span><span class="token entity" title="\u300c">\u300c</span><span class="token entity" title="\u73ed">\u73ed</span><span class="token entity" title="\u5c3c">\u5c3c</span><span class="token entity" title="\u8fea">\u8fea</span><span class="token entity" title="\u514b">\u514b</span><span class="token entity" title="\u86cb">\u86cb</span><span class="token entity" title="\u300d">\u300d</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u505a">\u505a</span><span class="token entity" title="\u4e2a">\u4e2a</span><span class="token entity" title="\u903c">\u903c</span><span class="token entity" title="\u683c">\u683c</span><span class="token entity" title="\u6ee1">\u6ee1</span><span class="token entity" title="\u6ee1">\u6ee1</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u65e9">\u65e9</span><span class="token entity" title="\u9910">\u9910</span><span class="token entity" title="\u7f51">\u7f51</span><span class="token entity" title="\u7ea2">\u7ea2</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>,        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101407"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9651424</span>,            <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"https://pic4.zhimg.com/v2-b0e9676d36b7fd4b1822ba8cb93bf4f7.jpg"</span>            <span class="token punctuation">]</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token entity" title="\u4e01">\u4e01</span><span class="token entity" title="\u4fca">\u4fca</span><span class="token entity" title="\u6656">\u6656</span><span class="token entity" title="\uff1a">\uff1a</span><span class="token entity" title="\u90a3">\u90a3</span><span class="token entity" title="\u4e2a">\u4e2a</span><span class="token entity" title="\u6ee1">\u6ee1</span><span class="token entity" title="\u8138">\u8138</span><span class="token entity" title="\u9752">\u9752</span><span class="token entity" title="\u6625">\u6625</span><span class="token entity" title="\u75d8">\u75d8</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u5c11">\u5c11</span><span class="token entity" title="\u5e74">\u5e74</span><span class="token entity" title="\u7403">\u7403</span><span class="token entity" title="\u624b">\u624b</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u51e0">\u51e0</span><span class="token entity" title="\u5ea6">\u5ea6</span><span class="token entity" title="\u5927">\u5927</span><span class="token entity" title="\u8d77">\u8d77</span><span class="token entity" title="\u5927">\u5927</span><span class="token entity" title="\u843d">\u843d</span><span class="token entity" title="\u5df2">\u5df2</span><span class="token entity" title="\u662f">\u662f</span><span class="token entity" title="\u800c">\u800c</span><span class="token entity" title="\u7acb">\u7acb</span><span class="token entity" title="\u4e4b">\u4e4b</span><span class="token entity" title="\u5e74">\u5e74</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>,        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101407"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9650104</span>,            <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"https://pic3.zhimg.com/v2-a065e8278298efb317b13d92084275f6.jpg"</span>            <span class="token punctuation">]</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token entity" title="\u5728">\u5728</span><span class="token entity" title="\u4f60">\u4f60</span><span class="token entity" title="\u8bfb">\u8bfb</span><span class="token entity" title="\u8fc7">\u8fc7</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u7ae5">\u7ae5</span><span class="token entity" title="\u8bdd">\u8bdd</span><span class="token entity" title="\u4e2d">\u4e2d</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u662f">\u662f</span><span class="token entity" title="\u4e0d">\u4e0d</span><span class="token entity" title="\u662f">\u662f</span><span class="token entity" title="\u4e00">\u4e00</span><span class="token entity" title="\u5bf9">\u5bf9</span><span class="token entity" title="\u59d0">\u59d0</span><span class="token entity" title="\u59b9">\u59b9</span><span class="token entity" title="\u91cc">\u91cc</span><span class="token entity" title="\u574f">\u574f</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u90a3">\u90a3</span><span class="token entity" title="\u4e2a">\u4e2a</span><span class="token entity" title="\u603b">\u603b</span><span class="token entity" title="\u662f">\u662f</span><span class="token entity" title="\u59d0">\u59d0</span><span class="token entity" title="\u59d0">\u59d0</span><span class="token entity" title="\uff1f">\uff1f</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>,        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101406"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9651366</span>,            <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"https://pic3.zhimg.com/v2-db3702f9cee08897c8f7a174000f0ca2.jpg"</span>            <span class="token punctuation">]</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token entity" title="\u778e">\u778e</span><span class="token entity" title="\u626f">\u626f</span> <span class="token entity" title="\u00b7">\u00b7</span> <span class="token entity" title="\u5982">\u5982</span><span class="token entity" title="\u4f55">\u4f55</span><span class="token entity" title="\u6b63">\u6b63</span><span class="token entity" title="\u786e">\u786e</span><span class="token entity" title="\u5730">\u5730</span><span class="token entity" title="\u5410">\u5410</span><span class="token entity" title="\u69fd">\u69fd</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>,    <span class="token string">"top_stories"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101415"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9651376</span>,            <span class="token string">"image"</span><span class="token builtin class-name">:</span> <span class="token string">"https://pic3.zhimg.com/v2-e5dc45c4698771e7001e1ae1c27ba8b6.jpg"</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token entity" title="\u60f3">\u60f3</span><span class="token entity" title="\u660e">\u660e</span><span class="token entity" title="\u767d">\u767d</span> iPhone X <span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u4eba">\u4eba</span><span class="token entity" title="\u8138">\u8138</span><span class="token entity" title="\u8bc6">\u8bc6</span><span class="token entity" title="\u522b">\u522b</span><span class="token entity" title="\u662f">\u662f</span><span class="token entity" title="\u600e">\u600e</span><span class="token entity" title="\u4e48">\u4e48</span><span class="token entity" title="\u5de5">\u5de5</span><span class="token entity" title="\u4f5c">\u4f5c</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u5148">\u5148</span><span class="token entity" title="\u5f97">\u5f97</span><span class="token entity" title="\u4e86">\u4e86</span><span class="token entity" title="\u89e3">\u89e3</span><span class="token entity" title="\u8fd9">\u8fd9</span><span class="token entity" title="\u9053">\u9053</span><span class="token entity" title="\u300c">\u300c</span><span class="token entity" title="\u5149">\u5149</span><span class="token entity" title="\u300d">\u300d</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>,        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101407"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9651424</span>,            <span class="token string">"image"</span><span class="token builtin class-name">:</span> <span class="token string">"https://pic3.zhimg.com/v2-ce790cb7a633fbc7aa8e2303e3c1ce16.jpg"</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token entity" title="\u4e01">\u4e01</span><span class="token entity" title="\u4fca">\u4fca</span><span class="token entity" title="\u6656">\u6656</span><span class="token entity" title="\uff1a">\uff1a</span><span class="token entity" title="\u90a3">\u90a3</span><span class="token entity" title="\u4e2a">\u4e2a</span><span class="token entity" title="\u6ee1">\u6ee1</span><span class="token entity" title="\u8138">\u8138</span><span class="token entity" title="\u9752">\u9752</span><span class="token entity" title="\u6625">\u6625</span><span class="token entity" title="\u75d8">\u75d8</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u5c11">\u5c11</span><span class="token entity" title="\u5e74">\u5e74</span><span class="token entity" title="\u7403">\u7403</span><span class="token entity" title="\u624b">\u624b</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u51e0">\u51e0</span><span class="token entity" title="\u5ea6">\u5ea6</span><span class="token entity" title="\u5927">\u5927</span><span class="token entity" title="\u8d77">\u8d77</span><span class="token entity" title="\u5927">\u5927</span><span class="token entity" title="\u843d">\u843d</span><span class="token entity" title="\u5df2">\u5df2</span><span class="token entity" title="\u662f">\u662f</span><span class="token entity" title="\u800c">\u800c</span><span class="token entity" title="\u7acb">\u7acb</span><span class="token entity" title="\u4e4b">\u4e4b</span><span class="token entity" title="\u5e74">\u5e74</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>,        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101409"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9634507</span>,            <span class="token string">"image"</span><span class="token builtin class-name">:</span> <span class="token string">"https://pic2.zhimg.com/v2-36e6e13f557c2dd29e65d8c23fa9cec5.jpg"</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token entity" title="\u4e2d">\u4e2d</span><span class="token entity" title="\u56fd">\u56fd</span><span class="token entity" title="\u6709">\u6709</span><span class="token entity" title="\u54ea">\u54ea</span><span class="token entity" title="\u4e9b">\u4e9b</span><span class="token entity" title="\u4e0d">\u4e0d</span><span class="token entity" title="\u51fa">\u51fa</span><span class="token entity" title="\u540d">\u540d</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u4f46">\u4f46</span><span class="token entity" title="\u503c">\u503c</span><span class="token entity" title="\u5f97">\u5f97</span><span class="token entity" title="\u4e00">\u4e00</span><span class="token entity" title="\u53bb">\u53bb</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u5c71">\u5c71</span><span class="token entity" title="\uff1f">\uff1f</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>,        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101414"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9649434</span>,            <span class="token string">"image"</span><span class="token builtin class-name">:</span> <span class="token string">"https://pic4.zhimg.com/v2-79056fe95d9834f9c8b30957980b0193.jpg"</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token entity" title="\u4e0d">\u4e0d</span><span class="token entity" title="\u9760">\u9760</span><span class="token entity" title="\u4e13">\u4e13</span><span class="token entity" title="\u5229">\u5229</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u62ff">\u62ff</span><span class="token entity" title="\u4ec0">\u4ec0</span><span class="token entity" title="\u4e48">\u4e48</span><span class="token entity" title="\u4fdd">\u4fdd</span><span class="token entity" title="\u62a4">\u62a4</span><span class="token entity" title="\u53d1">\u53d1</span><span class="token entity" title="\u660e">\u660e</span><span class="token entity" title="\uff1f">\uff1f</span><span class="token entity" title="\u4e16">\u4e16</span><span class="token entity" title="\u535a">\u535a</span><span class="token entity" title="\u4f1a">\u4f1a</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u6570">\u6570</span><span class="token entity" title="\u636e">\u636e</span><span class="token entity" title="\u4f1a">\u4f1a</span><span class="token entity" title="\u544a">\u544a</span><span class="token entity" title="\u8bc9">\u8bc9</span><span class="token entity" title="\u4f60">\u4f60</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>,        <span class="token punctuation">&#123;</span>            <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101407"</span>,            <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9650104</span>,            <span class="token string">"image"</span><span class="token builtin class-name">:</span> <span class="token string">"https://pic4.zhimg.com/v2-45e71d718938e0a4e292b12e52269a07.jpg"</span>,            <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token entity" title="\u5728">\u5728</span><span class="token entity" title="\u4f60">\u4f60</span><span class="token entity" title="\u8bfb">\u8bfb</span><span class="token entity" title="\u8fc7">\u8fc7</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u7ae5">\u7ae5</span><span class="token entity" title="\u8bdd">\u8bdd</span><span class="token entity" title="\u4e2d">\u4e2d</span><span class="token entity" title="\uff0c">\uff0c</span><span class="token entity" title="\u662f">\u662f</span><span class="token entity" title="\u4e0d">\u4e0d</span><span class="token entity" title="\u662f">\u662f</span><span class="token entity" title="\u4e00">\u4e00</span><span class="token entity" title="\u5bf9">\u5bf9</span><span class="token entity" title="\u59d0">\u59d0</span><span class="token entity" title="\u59b9">\u59b9</span><span class="token entity" title="\u91cc">\u91cc</span><span class="token entity" title="\u574f">\u574f</span><span class="token entity" title="\u7684">\u7684</span><span class="token entity" title="\u90a3">\u90a3</span><span class="token entity" title="\u4e2a">\u4e2a</span><span class="token entity" title="\u603b">\u603b</span><span class="token entity" title="\u662f">\u662f</span><span class="token entity" title="\u59d0">\u59d0</span><span class="token entity" title="\u59d0">\u59d0</span><span class="token entity" title="\uff1f">\uff1f</span>"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不想显示curl的统计信息，可以参考这篇<a href="http://www.jianshu.com/p/7e696e1b14d3">文章</a>，添加 <code>-s</code>参数即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://news-at.zhihu.com/api/4/news/latest  -s <span class="token operator">|</span> python -m json.tool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Nodejs-格式化"><a href="#Nodejs-格式化" class="headerlink" title="Nodejs 格式化"></a>Nodejs 格式化</h2><p>用nvm安装一个json库，这里是库的<a href="https://www.npmjs.com/package/json">地址</a> 文档。</p><p>安装<code>json</code>命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在curl命令后面添加 <code>| json</code> 即可。</p><p>如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://news-at.zhihu.com/api/4/news/latest -s <span class="token operator">|</span> json<span class="token punctuation">&#123;</span>  <span class="token string">"date"</span><span class="token builtin class-name">:</span> <span class="token string">"20171014"</span>,  <span class="token string">"stories"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"这些有故事的 DOTA 职业选手外号（国外篇）"</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101417"</span>,      <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"https://pic3.zhimg.com/v2-471f6f1170fcb7d491ba54404acaf30a.jpg"</span>      <span class="token punctuation">]</span>,      <span class="token string">"multipic"</span><span class="token builtin class-name">:</span> true,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9651211</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"https://pic1.zhimg.com/v2-16e9abb39a4fb4dd56994c9db9378110.jpg"</span>      <span class="token punctuation">]</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9649645</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101416"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"被你的宠物捉弄的的时候，你想过「动物是否会骗人」吗？"</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"https://pic3.zhimg.com/v2-5ab5db73049a413a6810677ad3817602.jpg"</span>      <span class="token punctuation">]</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9651376</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101415"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"想明白 iPhone X 的人脸识别是怎么工作的，先得了解这道「光」"</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"https://pic1.zhimg.com/v2-c20f4551e1725eef3ac7cd502e9ed71c.jpg"</span>      <span class="token punctuation">]</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9649434</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101414"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"不靠专利，拿什么保护发明？世博会的数据会告诉你"</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"https://pic1.zhimg.com/v2-a0a033debd47042be4554a3450fe9478.jpg"</span>      <span class="token punctuation">]</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9650760</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101413"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"回头看这项世界顶级比赛的历史，对它的存在意义愈发迷茫"</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"https://pic4.zhimg.com/v2-0df458ee4784b68befc40c03ddf5bc67.jpg"</span>      <span class="token punctuation">]</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9646702</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101412"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"大误 · 一次咨询"</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"https://pic2.zhimg.com/v2-9d0caf3ba46c60a15826e53ea8473a5d.jpg"</span>      <span class="token punctuation">]</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9634763</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101411"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"黄金钩焖五花肉，绵软浓香的口感，其他菜绝对没法比"</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"https://pic4.zhimg.com/v2-c4964723821a835fb42a4f70bfa8ce6f.jpg"</span>      <span class="token punctuation">]</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9650778</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101410"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"Ta 的一生可以写 20 本书，至于是男是女，已经不重要了"</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"https://pic1.zhimg.com/v2-054e30b7cec2624a849af1e358528cd8.jpg"</span>      <span class="token punctuation">]</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9634507</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101409"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"中国有哪些不出名，但值得一去的山？"</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"https://pic4.zhimg.com/v2-95d371314244ca1ce74bfbd22ba0938f.jpg"</span>      <span class="token punctuation">]</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9651324</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101408"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"- 实在想不到怎么出国更炫酷了<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>- 喏，自己开飞机去"</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"https://pic2.zhimg.com/v2-06dd1c008cac334147cd81abf0bfefe1.jpg"</span>      <span class="token punctuation">]</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9649625</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101407"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"早起来一份「班尼迪克蛋」，做个逼格满满的早餐网红"</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"https://pic4.zhimg.com/v2-b0e9676d36b7fd4b1822ba8cb93bf4f7.jpg"</span>      <span class="token punctuation">]</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9651424</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101407"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"丁俊晖：那个满脸青春痘的少年球手，几度大起大落已是而立之年"</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"https://pic3.zhimg.com/v2-a065e8278298efb317b13d92084275f6.jpg"</span>      <span class="token punctuation">]</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9650104</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101407"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"在你读过的童话中，是不是一对姐妹里坏的那个总是姐姐？"</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"images"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token string">"https://pic3.zhimg.com/v2-db3702f9cee08897c8f7a174000f0ca2.jpg"</span>      <span class="token punctuation">]</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9651366</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101406"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"瞎扯 · 如何正确地吐槽"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span>,  <span class="token string">"top_stories"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token string">"image"</span><span class="token builtin class-name">:</span> <span class="token string">"https://pic3.zhimg.com/v2-e5dc45c4698771e7001e1ae1c27ba8b6.jpg"</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9651376</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101415"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"想明白 iPhone X 的人脸识别是怎么工作的，先得了解这道「光」"</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"image"</span><span class="token builtin class-name">:</span> <span class="token string">"https://pic3.zhimg.com/v2-ce790cb7a633fbc7aa8e2303e3c1ce16.jpg"</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9651424</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101407"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"丁俊晖：那个满脸青春痘的少年球手，几度大起大落已是而立之年"</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"image"</span><span class="token builtin class-name">:</span> <span class="token string">"https://pic2.zhimg.com/v2-36e6e13f557c2dd29e65d8c23fa9cec5.jpg"</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9634507</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101409"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"中国有哪些不出名，但值得一去的山？"</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"image"</span><span class="token builtin class-name">:</span> <span class="token string">"https://pic4.zhimg.com/v2-79056fe95d9834f9c8b30957980b0193.jpg"</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9649434</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101414"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"不靠专利，拿什么保护发明？世博会的数据会告诉你"</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"image"</span><span class="token builtin class-name">:</span> <span class="token string">"https://pic4.zhimg.com/v2-45e71d718938e0a4e292b12e52269a07.jpg"</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"id"</span><span class="token builtin class-name">:</span> <span class="token number">9650104</span>,      <span class="token string">"ga_prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"101407"</span>,      <span class="token string">"title"</span><span class="token builtin class-name">:</span> <span class="token string">"在你读过的童话中，是不是一对姐妹里坏的那个总是姐姐？"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Curl </tag>
            
            <tag> Python </tag>
            
            <tag> Json format </tag>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己写个小工具——图片水印生成器</title>
      <link href="/2017/07/29/WaterMark/"/>
      <url>/2017/07/29/WaterMark/</url>
      
        <content type="html"><![CDATA[<h1 id="自己写个小工具——图片水印生成器"><a href="#自己写个小工具——图片水印生成器" class="headerlink" title="自己写个小工具——图片水印生成器"></a>自己写个小工具——图片水印生成器</h1><hr><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>做技术好几年了，最近想总结一下，写了几篇文章，不过发现经常有转载的地方，所以想做个图片水印，简书上面的图片是没有水印的，所以就自己写了个工具，供大家使用。</p><p>这里是<a href="https://github.com/LiushuiXiaoxia/WaterMark">地址https://github.com/LiushuiXiaoxia/WaterMark</a>，水印生成器，可以给指定图片文件或者目录添加水印，水印支持自定义文本、位置、颜色、大小。</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew tap LiushuiXiaoxia/watermarkbrew <span class="token function">install</span> watermark<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行<code>watermark -h</code>，显示帮助信息，说明安装成功。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ watermark -husage: watermark.py <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> -f FILE -t TEXT -o OUT <span class="token punctuation">[</span>-c COLOR<span class="token punctuation">]</span> <span class="token punctuation">[</span>-s SIZE<span class="token punctuation">]</span>                    <span class="token punctuation">[</span>-p POSITION<span class="token punctuation">]</span>optional arguments:  -h, --help            show this <span class="token builtin class-name">help</span> message and <span class="token builtin class-name">exit</span>  -f FILE, --file FILE  image path or directory  -t TEXT, --text TEXT  water mart text  -o OUT, --out OUT     image output directory  -c COLOR, --color COLOR                        text color, red、blue and so on  -s SIZE, --size SIZE  text size  -p POSITION, --position POSITION                        text position, left_top、left_bottom、right_top、ri                        ght_bottom、center，default is center,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>参数说明:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-h, --help                    帮助信息-f FILE, --file FILE          图片路径或者图片目录-t TEXT, --text TEXT          水印文本-o OUT, --out OUT             图片输出目录-c COLOR, --color COLOR       水印文本颜色，可以是red、blue、white等-s SIZE, --size SIZE          文本大小-p POSITION, --position       文本位置可以是left_top、left_bottom、right_top、right_botto center，默认是center<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如举例一个图片，文件路径是<code>image/test.png</code></p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-5f4470a63d69266a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>执行命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">watermark -f image/test.png -t <span class="token string">"流水不腐小夏"</span> -o new -c red -s <span class="token number">23</span> -p left_top<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则效果如下</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-00d90e4050966973.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>当然如果你有整个文件夹要处理，可以直接指定一个目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">watermark -f image -t <span class="token string">"流水不腐小夏"</span> -c black  -o new  -p left_top<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1520343-ef41155203606de6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如有想法或者意见，欢迎交流。</p><p>本程序暂时只支持Mac平台，如果Window平台需要运行，可以直接python代码。</p><h2 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO LIST"></a>TODO LIST</h2><ul><li><p>支持自定义字体</p></li><li><p>支持更多平台</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片水印 </tag>
            
            <tag> WaterMark </tag>
            
            <tag> Homebrew WaterMark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github authenticator登录问题</title>
      <link href="/2017/07/21/Github-authenticator/"/>
      <url>/2017/07/21/Github-authenticator/</url>
      
        <content type="html"><![CDATA[<h1 id="Github-authenticator登录问题"><a href="#Github-authenticator登录问题" class="headerlink" title="Github authenticator登录问题"></a>Github authenticator登录问题</h1><hr><p>最近换了手机，刚刚写完代码，需要提交到Github，发现以前设置过二次校验，是通过Google authenticator设置的。</p><p>发现以前备份的code，也丢失了，重新安装了Google authenticator也不行，最好只要找官方客服，发邮件求帮助。</p><p>下面是帮助地址，<a href="https://github.com/contact">https://github.com/contact</a>，然后过了几个小时，就有人回复了。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Hello there,The recovery codes would have had the default filename github-recovery-codes.txt or github_2fa_recovery_codes.txt - it may still be worth searching your computer, data backup, and/or email account for this document, just in case!If you don't have valid recovery codes, you may be able to verify account ownership using an SSH key you have added to your account. To do this, please run the following command on the computer where your SSH key exists, and send us the full output:ssh -T git@github.com verifyIf you can verify account ownership, we can disable 2FA on your account so you can sign in again.All the best,Andrew<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就把<code>ssh -T git@github.com verify</code>命令执行了一般，最后把结果发过去，还在等结果。</p><p>悲剧的一天，下班，代码不提交了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
            <tag> Github authenticator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android上使用Lombok</title>
      <link href="/2017/07/13/Android-Lombok/"/>
      <url>/2017/07/13/Android-Lombok/</url>
      
        <content type="html"><![CDATA[<h1 id="Android上使用Lombok"><a href="#Android上使用Lombok" class="headerlink" title="Android上使用Lombok"></a>Android上使用Lombok</h1><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近几天尝试了一把后端的工作，发现后端同学使用了一个第三库——<a href="https://projectlombok.org/">Lombok</a>，用了一下，感觉还不错，特来介绍一下，感觉和以前介绍过的<a href="https://github.com/LiushuiXiaoxia/AutoValueDemo">AutoValue</a>挺像的。</p><p>Lombok 官网上面有个几分钟的视频，接单介绍了Lombok的用途，使用方法很简单，只需要依赖对应的jar文件，然后在对应的Java文件上使用注解即可。</p><span id="more"></span><p>先看个例子，下面是常见的一个Java一个实体类，含有field、setter、getter、equals、hashcode、toString方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> user<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">:</span> user<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> id<span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用了Lombok，就很简单了，直接定义好字段，然后添加一个注解<code>@Data</code>即可，其他方法，工具自动生成，虽然上面的方法我们也是用工具生成的，但是如果要添加或者删除字段，还是要修改代码的，如果直接使用注解的方式，那么还是简单的，无需修改任何方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserLombok</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注解简介"><a href="#注解简介" class="headerlink" title="注解简介"></a>注解简介</h2><p>Lombok 主要使用就是通过添加注解，来自动生成代码，主要包含两类，一种是Stable类型，一种是Experimental。前面表示稳定的注解，后面表示实验类型的，可能会被移除。本文主要介绍Stable类型，Experimental由于使用较少，不做讲解。</p><p><strong>Stable</strong></p><ul><li>val</li></ul><p>Finally! Hassle-free final local variables.</p><ul><li>@NonNull</li></ul><p>or: How I learned to stop worrying and love the NullPointerException.</p><ul><li>@Cleanup</li></ul><p>Automatic resource management: Call your close() methods safely with no hassle.</p><ul><li>@Getter/@Setter</li></ul><p>Never write public int getFoo() {return foo;} again.</p><ul><li>@ToString</li></ul><p>No need to start a debugger to see your fields: Just let lombok generate a toString for you!</p><ul><li>@EqualsAndHashCode</li></ul><p>Equality made easy: Generates hashCode and equals implementations from the fields of your object..</p><ul><li>@NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor</li></ul><p>Constructors made to order: Generates constructors that take no arguments, one argument per final / non-nullfield, or one argument for every field.</p><ul><li>@Data</li></ul><p>All together now: A shortcut for @ToString, @EqualsAndHashCode, @Getter on all fields, and @Setter on all non-final fields, and @RequiredArgsConstructor!</p><ul><li>@Value</li></ul><p>Immutable classes made very easy.</p><ul><li>@Builder</li></ul><p>… and Bob’s your uncle: No-hassle fancy-pants APIs for object creation!</p><ul><li>@SneakyThrows</li></ul><p>To boldly throw checked exceptions where no one has thrown them before!</p><ul><li>@Synchronized</li></ul><p>synchronized done right: Don’t expose your locks.</p><ul><li>@Getter(lazy=true)</li></ul><p>Laziness is a virtue!</p><ul><li>@Log</li></ul><p>Captain’s Log, stardate 24435.7: “What was that line again?”</p><p><strong>Experimental</strong></p><ul><li>var</li></ul><p>Modifiable local variables with a type inferred by assigning value.</p><ul><li>@Accessors</li></ul><p>A more fluent API for getters and setters.</p><ul><li>@ExtensionMethod</li></ul><p>Annoying API? Fix it yourself: Add new methods to existing types!</p><ul><li>@FieldDefaults</li></ul><p>New default field modifiers for the 21st century.</p><ul><li>@Delegate</li></ul><p>Don’t lose your composition.</p><ul><li>@Wither</li></ul><p>Immutable ‘setters’ - methods that create a clone but with one changed field.</p><ul><li>onMethod= / onConstructor= / onParam=</li></ul><p>Sup dawg, we heard you like annotations, so we put annotations in your annotations so you can annotate while you’re annotating.</p><ul><li>@UtilityClass</li></ul><p>Utility, metility, wetility! Utility classes for the masses.</p><ul><li>@Helper</li></ul><p>With a little help from my friends… Helper methods for java.</p><h2 id="Android-集成"><a href="#Android-集成" class="headerlink" title="Android 集成"></a>Android 集成</h2><p>项目根目录下面新建配置文件 lombok.config，同时填上对应的配置项，Java项目不需要，Android和Java还是有点区别的，不配置有的注解使用不了，编译不过。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-31aacd4b694f9269.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>lombok.config</p><pre class="line-numbers language-none"><code class="language-none">lombok.anyConstructor.suppressConstructorProperties&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在对应的项目中添加gradle依赖就行了。</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">dependencies &#123;    provided &quot;org.projectlombok:lombok:1.16.18&quot;    compile &#39;org.glassfish:javax.annotation:10.0-b28&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以在Android Studio中安装lombok插件。</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-516b57dee4009639.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>这样可以很方便的看到类中生成的方法</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-34217ef31a06e86e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h2 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h2><p>下面简单说明注解的使用方法（如需了解详细使用，请参阅官方文档），以及使用注解后类中生成的方法。</p><h3 id="val"><a href="#val" class="headerlink" title="val"></a>val</h3><p>定义一个final类型的变量，并且可以不写类型。</p><p>如:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        val example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        val foo <span class="token operator">=</span> example<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> foo<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">example2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        val map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"five"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>val entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: %s\n"</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>class字节码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ValExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>example<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> foo<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">example2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"five"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span> var2 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token punctuation">)</span>var2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: %s\n"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h3><p>非空值判断，如果为空，则抛出异常</p><p>如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NonNullExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>class字节码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NonNullExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">NonNullExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>string <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h3><p>可以自动调用close方法</p><p>如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CleanupExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Cleanup</span> <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Cleanup</span> <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> r <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>class字节码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CleanupExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">CleanupExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> r <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="@Getter/@Setter"></a>@Getter/@Setter</h3><p>自动生成setter、getter方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// GetterSetterExample.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetterSetterExample</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token annotation punctuation">@Setter</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Setter</span><span class="token punctuation">(</span><span class="token class-name">AccessLevel</span><span class="token punctuation">.</span>PROTECTED<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// GetterSetterExample.class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetterSetterExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">GetterSetterExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h3><p>自动生成toString方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ToStringExample.java</span><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToStringExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> passwd<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ToStringExample</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> passwd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>passwd <span class="token operator">=</span> passwd<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// ToStringExample.class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToStringExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> passwd<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ToStringExample</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> passwd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>passwd <span class="token operator">=</span> passwd<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"ToStringExample(name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">", passwd="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>passwd <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h3><p>自动生成equals和hashcode方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// EqualsAndHashCodeExample.java</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EqualsAndHashCodeExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">EqualsAndHashCodeExample</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// EqualsAndHashCodeExample.class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EqualsAndHashCodeExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">EqualsAndHashCodeExample</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">EqualsAndHashCodeExample</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">EqualsAndHashCodeExample</span> other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EqualsAndHashCodeExample</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>other<span class="token punctuation">.</span><span class="token function">canEqual</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">!=</span> other<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Object</span> <span class="token keyword">this</span>$name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>                <span class="token class-name">Object</span> other$name <span class="token operator">=</span> other<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span>$name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>other$name <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span>$name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other$name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">canEqual</span><span class="token punctuation">(</span><span class="token class-name">Object</span> other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> other <span class="token keyword">instanceof</span> <span class="token class-name">EqualsAndHashCodeExample</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> PRIME <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">59</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>        <span class="token class-name">Object</span> $name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">59</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">?</span><span class="token number">43</span><span class="token operator">:</span>$name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor"><a href="#NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor" class="headerlink" title="@NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor"></a>@NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor</h3><p>自动生成相关的构造函数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ConstructorExample.java</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token punctuation">(</span>access <span class="token operator">=</span> <span class="token class-name">AccessLevel</span><span class="token punctuation">.</span>PUBLIC<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstructorExample</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> args<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ToString</span>    <span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token punctuation">(</span>staticName <span class="token operator">=</span> <span class="token string">"of"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticMethodsExample</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@NonNull</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> field<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// ConstructorExample.class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstructorExample</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> args<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"ConstructorExample(args="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>args <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ConstructorExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ConstructorExample</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>args <span class="token operator">=</span> args<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticMethodsExample</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@NonNull</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> field<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"ConstructorExample.StaticMethodsExample(field="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>field <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token class-name">StaticMethodsExample</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> field<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>field <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"field"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>field <span class="token operator">=</span> field<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ConstructorExample<span class="token punctuation">.</span>StaticMethodsExample</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> field<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConstructorExample<span class="token punctuation">.</span>StaticMethodsExample</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h3><p>自动生成构造者模式方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// BuilderExample.java</span><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuilderExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Singular</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> occupations<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>class文件太长，就不贴了，下面是调用方式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// test builder</span><span class="token class-name">BuilderExample</span> builderExample <span class="token operator">=</span> <span class="token class-name">BuilderExample</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">occupation</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">occupation</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onCreate: "</span> <span class="token operator">+</span> builderExample<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="@SneakyThrows"></a>@SneakyThrows</h3><p>自动生成异常抛出代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// SneakyThrowsExample.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SneakyThrowsExample</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">utf8ToString</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Throwable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// SneakyThrowsExample.class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SneakyThrowsExample</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">SneakyThrowsExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">utf8ToString</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> var3<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Throwable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="@Synchronized"></a>@Synchronized</h3><p>自动生成线程同步代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// SynchronizedExample.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> readLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Synchronized</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Synchronized</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">answerToLife</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Synchronized</span><span class="token punctuation">(</span><span class="token string">"readLock"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// SynchronizedExample.class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> $LOCK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> $lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> readLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SynchronizedExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> var0 <span class="token operator">=</span> $LOCK<span class="token punctuation">;</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>$LOCK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">answerToLife</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> var1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$lock<span class="token punctuation">;</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> var1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>readLock<span class="token punctuation">;</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readLock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Getter-lazy-true"><a href="#Getter-lazy-true" class="headerlink" title="@Getter(lazy=true)"></a>@Getter(lazy=true)</h3><p>延迟初始化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// GetterLazyExample.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetterLazyExample</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Getter</span><span class="token punctuation">(</span>lazy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cached <span class="token operator">=</span> <span class="token function">expensive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">expensive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> result<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// GetterLazyExample.class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetterLazyExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> cached <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">GetterLazyExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">expensive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> result<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getCached</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cached<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">AtomicReference</span> var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cached<span class="token punctuation">;</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cached<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cached<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actualValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">expensive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    value <span class="token operator">=</span> actualValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">?</span><span class="token keyword">this</span><span class="token punctuation">.</span>cached<span class="token operator">:</span>actualValue<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>cached<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cached<span class="token operator">?</span><span class="token keyword">null</span><span class="token operator">:</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Log"><a href="#Log" class="headerlink" title="@Log"></a>@Log</h3><p>自动生成日志对象，不过都是J2EE方面的，Android端用途不大。</p><p><a href="https://projectlombok.org/features/log">官方示例</a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>自从Java 6起，javac就支持“JSR 269 Pluggable Annotation Processing API”规范，只要程序实现了该API，就能在javac运行的时候得到调用。</p><p>举例来说，现在有一个实现了”JSR 269 API”的程序A,那么使用javac编译源码的时候具体流程如下：</p><ol><li><p>javac对源代码进行分析，生成一棵抽象语法树(AST)</p></li><li><p>运行过程中调用实现了”JSR 269 API”的A程序</p></li><li><p>此时A程序就可以完成它自己的逻辑，包括修改第一步骤得到的抽象语法树(AST)</p></li><li><p>javac使用修改后的抽象语法树(AST)生成字节码文件</p></li></ol><p>详细的流程图如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/1520343-35db5d2109a5f950.gif?imageMogr2/auto-orient/strip"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上所述，使用了lombok可以简化Java代码，因为是在编译期处理所以可能会增加点时间，不过对于Android来说，可以尝试一下，不过17年Google IO已经推荐使用Kotlin开发Android了，lombok中好多功能在Kotlin中已经实现了，如果项目暂时还不想使用Kotlin开发，继续使用Java的可以尝试一下。</p><p><strong>缺点：</strong></p><p>使用lombok虽然能够省去手动创建代码的麻烦，但是却大大降低了源代码文件的可读性和完整性，降低了阅读源代码的舒适度。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://projectlombok.org/">Lombok官网</a></p><p><a href="https://github.com/LiushuiXiaoxia/AutoValueDemo">AutoValue相关</a></p><p><a href="http://www.voidcn.com/blog/sangsa/article/p-5981116.html">android基础之依赖注入问题</a></p><p><a href="http://blog.csdn.net/dslztx/article/details/46715803">Lombok的使用和原理</a></p>]]></content>
      
      
      <categories>
          
          <category> Libs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Lombok </tag>
            
            <tag> AutoValue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android静态代码分析</title>
      <link href="/2017/07/11/CodeAnalysis/"/>
      <url>/2017/07/11/CodeAnalysis/</url>
      
        <content type="html"><![CDATA[<h1 id="Android静态代码分析"><a href="#Android静态代码分析" class="headerlink" title="Android静态代码分析"></a>Android静态代码分析</h1><hr><p>最佳项目里面来了很多新的小伙伴，然后每个人的代码风格还不一样，虽然有代码风格文档以及代码review。</p><p>但是这些东西需要花费很多人力和时间来做，所以就研究了下静态代码分析，能用工具完成的坚决不用人肉。同时静态代码分析还能解决很多潜在的bug问题。</p><p>下面依次对介绍几个Android常用的静态代码分析工具，同时顺便介绍下我厂刘全栈的对静态代码分析做的工具<br><a href="https://github.com/MasonLiuChn/AndroidCodeQuality">AndroidCodeQuality</a>。</p><p>本文最先发表于<a href="https://github.com/LiushuiXiaoxia/CodeAnalysis">Github</a>，如有转载，请注明转载出处。</p><span id="more"></span><h1 id="CheckStyle"><a href="#CheckStyle" class="headerlink" title="CheckStyle"></a>CheckStyle</h1><p><a href="http://checkstyle.sourceforge.net/">CheckStyle官网</a></p><p>『Checkstyle是一个开发工具用来帮助程序员编写符合代码规范的Java代码。它能自动检查Java代码为空闲的人进行这项无聊(但重要)的任务。』</p><p>正如Checkstyle的开发者所言，这个工具能够帮助你在项目中定义和维持一个非常精确和灵活的代码规范形式。当你启动CheckStyle，它会根据所提供的配置文件分析你的Java代码并告诉你发现的所有错误。</p><p>Checkstyle会发现大量的问题，特别是在你运用了大量的规则配置，如同你设置了一个非常精确的语法。<br>尽管我通过Gradle使用checkstyle，例如在我进行推送之前，我仍然推荐你为IntellJ/Android Studio使用checkstyle插件(你可以通过Android Studio的工作面板文件/设置/插件直接安装插件)。<br>这种方式下，你可以根据那些为Gradle配置的相同文件在你的工程中使用checkstyle，但是远不止这些，你可以直接在Android Studio中获取带有超链接结果，<br>这些结果通过超链接在你的代码中对应，这是非常有用的(Gradle的这种方式仍然很重要的，因为你可以使用它自动构建系统，如Jenkins)。</p><h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><p>在Android中集成CheckStyle也很简单，只需要在Gradle添加少许配置即可。</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">apply plugin: &#39;checkstyle&#39;&#x2F;&#x2F; 定义生成文件目录def checkStyleReportPath &#x3D; &quot;$&#123;project.rootDir&#125;&#x2F;reports&#x2F;&quot;&#x2F;&#x2F; 在clean时候，自动删除原先生成报告clean.doFirst &#123;    delete checkStyleReportPath&#125;task projectCheckStyle(type: Checkstyle) &#123;    source &#39;src&#39;    configFile file(&quot;checkstyle.xml&quot;) &#x2F;&#x2F; 配置样式    include &#39;**&#x2F;*.java&#39;    exclude &#39;**&#x2F;gen&#x2F;**&#39;    classpath &#x3D; files()    ignoreFailures true &#x2F;&#x2F; 配置是否忽略失败    &#x2F;&#x2F; 自定义报告生成路径    reports &#123;        html &#123;            destination &quot;$&#123;checkStyleReportPath&#125;&#x2F;Checkstyle.html&quot;        &#125;        xml &#123;            destination &quot;$&#123;checkStyleReportPath&#125;&#x2F;Checkstyle.xml&quot;        &#125;    &#125;&#125;tasks.withType(Checkstyle).each &#123; checkstyleTask -&gt;    checkstyleTask.doLast &#123;        reports.all &#123; report -&gt;            &#x2F;&#x2F; 检查生成报告中是否有错误            def outputFile &#x3D; report.destination            if (outputFile.exists() &amp;&amp; outputFile.text.contains(&quot;&lt;error &quot;) &amp;&amp; !checkstyleTask.ignoreFailures) &#123;                throw new GradleException(&quot;There were checkstyle errors! For more info check $outputFile&quot;)            &#125;        &#125;    &#125;&#125;&#x2F;&#x2F; preBuild的时候，执行projectCheckStyle任务preBuild.dependsOn projectCheckStyle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="PMD"><a href="#PMD" class="headerlink" title="PMD"></a>PMD</h1><p><a href="https://pmd.github.io/">PMD官网</a></p><p>事实上，PMD是一个工作有点类似Findbugs的强大工具，但是(PMD)直接检查源代码而不是检查字节码(顺便说句，PMD适用很多语言)。<br>(PMD和Findbugs)的核心目标是相同的，通过静态分析方法找出哪些模式引起的bug。因此为什么同时使用Findbugs和PMD呢？<br>好吧！尽管Findbugs和PMD拥有相同的目标，(但是)他们的检查方法是不同的。所以PMD有时检查出的bug但是Findbugs却检查不出来，反之亦然。</p><h2 id="集成-1"><a href="#集成-1" class="headerlink" title="集成"></a>集成</h2><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">apply plugin: &#39;pmd&#39;&#x2F;&#x2F; 定义生成文件目录def pmdReportPath &#x3D; &quot;$&#123;project.rootDir&#125;&#x2F;analysis&#x2F;reports&#x2F;&quot;task projectPmd(type: Pmd) &#123;    ignoreFailures &#x3D; true    ruleSetFiles &#x3D; files(&quot;pmd.xml&quot;) &#x2F;&#x2F; 自定义规则    ruleSets &#x3D; []    source &#39;src&#39;    include &#39;**&#x2F;*.java&#39;    exclude &#39;**&#x2F;gen&#x2F;**&#39;, &#39;**&#x2F;build&#x2F;**&#39;    &#x2F;&#x2F; 定义输出报告    reports &#123;        xml &#123;            enabled &#x3D; false            destination &quot;$pmdReportPath&#x2F;Pmd.xml&quot;        &#125;        html &#123;            enabled &#x3D; true            destination &quot;$pmdReportPath&#x2F;Pmd.html&quot;        &#125;    &#125;&#125;preBuild.dependsOn projectPmd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="FindBugs"><a href="#FindBugs" class="headerlink" title="FindBugs"></a>FindBugs</h1><p><a href="http://findbugs.sourceforge.net/">FindBugs官网</a></p><p>findbugs是一个分析bytecode并找出其中可疑部分的一个工具。它给项目字节码做一个全面扫描，通过一些通用规则去判断可能潜在的一些问题，比如性能，多线程安全等等。</p><p>FindBugs基本上只需要一个程序来做分析的字节码，所以这是非常容易使用。它能检测到常见的错误，如错误的布尔运算符。<br>FindBugs也能够检测到由于误解语言特点的错误，如Java参数调整（这不是真的有可能因为它的参数是传值）。</p><h2 id="集成-2"><a href="#集成-2" class="headerlink" title="集成"></a>集成</h2><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">apply plugin: &#39;findbugs&#39;&#x2F;&#x2F; 定义生成文件目录def findbugsReportPath &#x3D; &quot;$&#123;project.rootDir&#125;&#x2F;reports&#x2F;&quot;task findbugs(type: FindBugs) &#123;    ignoreFailures &#x3D; true    excludeFilter &#x3D; new File(&quot;findbugs.xml&quot;) &#x2F;&#x2F; 自定义配置文件    classpath &#x3D; files()    classes &#x3D; fileTree(&#39;build&#x2F;intermediates&#x2F;classes&#x2F;&#39;)    effort &#x3D; &#39;max&#39;    source &#x3D; fileTree(&#39;src&#39;)    include &#39;**&#x2F;*.java&#39;    exclude &#39;**&#x2F;gen&#x2F;**&#39;    &#x2F;&#x2F; 定义输出报告    reports &#123;        xml &#123;            enabled &#x3D; false            destination &quot;$findbugsReportPath&#x2F;FindBugs.xml&quot;            xml.withMessages true        &#125;        html &#123;            enabled &#x3D; true            destination &quot;$findbugsReportPath&#x2F;FindBugs.html&quot;        &#125;    &#125;&#125;afterEvaluate &#123;    tasks.withType(Task).each &#123; task -&gt;        task.doLast &#123;            if (task.name.startsWith(&quot;assemble&quot;)) &#123;                tasks.findByName(&quot;findbugs&quot;).execute()            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Infer"><a href="#Infer" class="headerlink" title="Infer"></a>Infer</h1><p><a href="http://fbinfer.com/">Facebook infer官网</a></p><p>Infer 是Facebook的一个开源代码扫描工具。目前在移动端, Infer 是比较好用的一个检查空对象引用的静态扫描工具.</p><p>在mac上面使用infer比较简单，参考如下步骤即可，其他平台可以参考<a href="http://fbinfer.com/docs/getting-started.html">官网教程</a>。</p><p>首先使用brew安装infer</p><pre class="line-numbers language-none"><code class="language-none">brew install infer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在项目根目录运行如下命令即可，最后会在根目录下面生成infer-out目录。</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;gradlew clean; infer -- .&#x2F;gradlew build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时Github上面有个Infer的Gradle插件，<a href="https://github.com/uber-common/infer-plugin">地址</a>，可以参考下。</p><p>使用也比较简单，根目录添加插件依赖</p><pre class="line-numbers language-none"><code class="language-none">buildscript &#123;    repositories &#123;        mavenCentral()    &#125;    dependencies &#123;        ...        classpath &quot;com.uber:infer-plugin:0.7.4&quot;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java项目可以使用如下配置</p><pre class="line-numbers language-none"><code class="language-none">apply plugin: &#39;java&#39;apply plugin: &#39;com.uber.infer.java&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Android的配置</p><pre class="line-numbers language-none"><code class="language-none">apply plugin: &#39;com.android.application&#39;apply plugin: &#39;com.uber.infer.android&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时支持配置</p><pre class="line-numbers language-none"><code class="language-none">inferPlugin &#123;    infer &#123;        include &#x3D; project.files(&quot;&lt;PATH_TO_INCLUDE&gt;&quot;)        exclude &#x3D; project.files(&quot;&lt;PATH_TO_EXCLUDE&gt;&quot;)    &#125;    eradicate &#123;        include &#x3D; project.files(&quot;&lt;PATH_TO_INCLUDE&gt;&quot;)        exclude &#x3D; project.files(&quot;&lt;PATH_TO_EXCLUDE&gt;&quot;)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Lint"><a href="#Lint" class="headerlink" title="Lint"></a>Lint</h1><p><a href="https://developer.android.com/studio/write/lint.html">Lint官网</a></p><p><a href="http://google.github.io/android-gradle-dsl/2.3/index.html">Lint Api</a></p><p>Lint是Android官网出的一款功能强大的静态代码分析工具，不仅可以分析代码，还可以分析布局文件，而且还可以硬编码、多余未使用的资源，以及可能出现的bug等。</p><p>这里有一篇介绍Lint使用的<a href="http://blog.csdn.net/u010687392/article/details/47835743">博客</a></p><p>Lint可以在Gradle中集成，当然也可以自定义输出，也可以在Android Studio中单独使用，使用『Analyze』-&gt;『Inspect Code』即可。</p><pre class="line-numbers language-none"><code class="language-none">android &#123;    lintOptions &#123;        abortOnError false        disable &#39;LogNotTimber&#39;, &#39;IconMissingDensityFolder&#39;        htmlReport true        htmlOutput file(&quot;$&#123;project.rootDir&#125;&#x2F;analysis&#x2F;reports&#x2F;lint-report.html&quot;)        xmlReport true        xmlOutput file(&quot;$&#123;project.rootDir&#125;&#x2F;analysis&#x2F;reports&#x2F;lint-report.xml&quot;)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="CI集成"><a href="#CI集成" class="headerlink" title="CI集成"></a>CI集成</h1><p><a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html">CI介绍</a></p><p>互联网软件的开发和发布，已经形成了一套标准流程，最重要的组成部分就是持续集成（Continuous integration，简称CI）。</p><p><img src="https://github.com/LiushuiXiaoxia/CodeAnalysis/raw/master/doc/ci.png" alt="CI"></p><p>持续集成指的是，频繁地（一天多次）将代码集成到主干，它的好处主要有两个。</p><blockquote><p>（1）快速发现错误。每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。</p><p>（2）防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。</p></blockquote><p>在每次提交代码后，都会有CI服务器给代码做一次编译和代码检查，那么对软件开发的质量也会有很大的提高，如果在智能一点，可以通过邮件、短信、slack通知开发，那么整个开发流程也会更加友好。</p><p>后续考虑单独做一个实现一个gradle的插件，自动集成上面几种静态代码检查方式，同时可以实现一件配置，以及报告输出。</p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="http://checkstyle.sourceforge.net/">CheckStyle官网</a></p><p><a href="http://www.jianshu.com/p/fc2f45a9ee37">Android Studio配置CheckStyle</a></p><p><a href="https://github.com/MasonLiuChn/AndroidCodeQuality">Github AndroidCodeQuality</a></p><p><a href="https://pmd.github.io/">PMD官网</a></p><p><a href="http://findbugs.sourceforge.net/">FindBugs官网</a></p><p><a href="http://fbinfer.com/">Facebook infer官网</a></p><p><a href="https://github.com/uber-common/infer-plugin">Infer插件</a></p><p><a href="http://www.jianshu.com/p/c8a632837bf1">Infer参考</a></p><p><a href="http://www.jdon.com/48051">Infer参考</a></p><p><a href="http://blog.csdn.net/u010687392/article/details/47835743">Android lint 参考</a></p><p><a href="http://google.github.io/android-gradle-dsl/2.3/index.html">Lint Api</a></p><p><a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html">CI介绍</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码分析 </tag>
            
            <tag> Android静态代码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Android模块化我有一些话不知当讲不当讲</title>
      <link href="/2017/05/21/Android-Modular/"/>
      <url>/2017/05/21/Android-Modular/</url>
      
        <content type="html"><![CDATA[<h1 id="关于Android模块化我有一些话不知当讲不当讲"><a href="#关于Android模块化我有一些话不知当讲不当讲" class="headerlink" title="关于Android模块化我有一些话不知当讲不当讲"></a>关于Android模块化我有一些话不知当讲不当讲</h1><hr><p>最近公司一个项目使用了模块化设计，本人参与其中的一个小模块开发，但是整体的设计并不是我架构设计的，开发半年有余，在此记录下来我的想法。</p><span id="more"></span><h2 id="模块化场景"><a href="#模块化场景" class="headerlink" title="模块化场景"></a>模块化场景</h2><p>为什么需要模块化？</p><p>当一个App用户量增多，业务量增长以后，就会有很多开发工程师参与同一个项目，人员增加了，原先小团队的开发方式已经不合适了。</p><p>原先的一份代码，现在需要多个人来维护，每个人的代码质量也不相同，在进行代码Review的时候，也是比较困难的，同时也容易会产生代码冲突的问题。</p><p>同时随着业务的增多，代码变的越来越复杂，每个模块之间的代码耦合变得越来越严重，解耦问题急需解决，同时编译时间也会越来越长。</p><p>人员增多，每个业务的组件各自实现一套，导致同一个App的UI风格不一样，技术实现也不一样，团队技术无法得到沉淀。</p><h2 id="架构演变"><a href="#架构演变" class="headerlink" title="架构演变"></a>架构演变</h2><p>在刚刚开始的时候，项目架构使用的是MVP模式，这也是最近几年很流行的一个架构方式，下面是项目的原始设计。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidModular/master/doc/1.png" alt="MVP"></p><p>随着业务的增多，我们添加了Domain的概念，Domain从Data中获取数据，Data可能会是Net，File，Cache各种IO等，然后项目架构变成了这样。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidModular/master/doc/2.png" alt="MVP2"></p><p>再然后随着人员增多，各种基础组件也变的越来越多，业务也很复杂，业务与业务之间还有很强的耦合，就变成了这样的。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidModular/master/doc/3.png"></p><p>使用模块化技术以后，架构变成了这样。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidModular/master/doc/4.png" alt="组件化架构"></p><h2 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h2><p>这里简单介绍下Android项目实现模块化需要使用的技术以及技术难点。</p><h3 id="Library-module"><a href="#Library-module" class="headerlink" title="Library module"></a>Library module</h3><p>在开始开始进行模块化之前，需要把各个业务单独抽取成Android Library Module,这个是Android Studio自带一个功能，可以把依赖较少的，作为基本组件的抽取成一个单独模块。</p><p>如图所示，我把各个模块单独分为一个独立的项目。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidModular/master/doc/5.png" alt="组件化架构"></p><p>在主项目中使用gradle添加代码依赖。</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">&#x2F;&#x2F; commoncompile project(&#39;:ModuleBase&#39;)compile project(&#39;:ModuleComponent&#39;)compile project(&#39;:ModuleService&#39;)&#x2F;&#x2F; bizcompile project(&#39;:ModuleUser&#39;)compile project(&#39;:ModuleOrder&#39;)compile project(&#39;:ModuleShopping&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Library-module开发问题"><a href="#Library-module开发问题" class="headerlink" title="Library module开发问题"></a>Library module开发问题</h3><p>在把代码抽取到各个单独的Library Module中，会遇到各种问题。最常见的就是R文件问题，Android开发中，各个资源文件都是放在res目录中，在编译过程中，会生成R.java文件。R文件中包含有各个资源文件对应的id，这个id是静态常量，但是在Library Module中，这个id不是静态常量，那么在开发时候就要避开这样的问题。</p><p>举个常见的例子，同一个方法处理多个view的点击事件，有时候会使用<code>switch(view.getId())</code>这样的方式，然后用<code>case R.id.btnLogin</code>这样进行判断，这时候就会出现问题，因为id不是经常常量，那么这种方式就用不了。</p><p>同样开发时候，用的最多的一个第三方库就是ButterKnife，ButterKnife也是不可以用的，在使用ButterKnife的时候，需要用到注解配置一个id来找到对应view，或者绑定对应的各种事件处理，但是注解中的各个字段的赋值也是需要静态常量，那么就不能够使用ButterKnife了。</p><p>解决方案有下面几种：</p><p>1.重新一个Gradle插件，生成一个R2.java文件，这个文件中各个id都是静态常量，这样就可以正常使用了。</p><p>2.使用Android系统提供的最原始的方式，直接用<code>findViewById</code>以及<code>setOnClickListener</code>方式。</p><p>3.设置项目支持Databinding，然后使用Binding中的对象，但是会增加不少方法数，同时Databinding也会有编译问题和学习成本，但是这些也是小问题，个人觉的问题不大。</p><p>上面是主流的解决方法，个人推荐的使用优先级为 3 &gt; 2 &gt; 1。</p><p>当把个模块分开以后，每个人就可以单独分组对应的模块就行了，不过会有资源冲突问题，个人建议是对各个模块的资源名字添加前缀，比如user模块中的登录界面布局为<code>activity_login.xml</code>，那么可以写成这样<code>us_activity_login.xml</code>。这样就可以避免资源冲突问题。同时Gradle也提供的一个字段<code>resourcePrefix</code>，确保各个资源名字正确，具体用法可以参考官方文档。</p><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>当完成了Library module后，代码基本上已经很清晰了，跟我们上面的最终架构已经很相似了，有了最基本的骨架，但是还是没有完成，因为还是多个人操作同一个git仓库，各个开发小伙伴还是需要对同一个仓库进行各种fork和pr。</p><p>随着对代码的分割，但是主项目app的依赖变多了，如果修改了lib中的代码，那么编译时间是很恐怖的，大概统计了一下，原先在同一个模块的时候，编译时间大概需要2-3min，但是分开以后大概需要5-6min，这个是绝对无法忍受的。</p><p>上面的第一问题，可以这样解决，把各个子module分别使用单独的一个git仓库，这样每个人也只需要关注自己需要的git仓库即可，主仓库使用git submodule的方式，分别依赖各个子模块。</p><p>但是这样还是无法解决编译时间过长的问题，我们把各个模块也单独打包，每次子模块开发完成以后，发布到maven仓库中，然后在主项目中使用版本进行依赖。</p><p>举个例子，比如进行某一版本迭代，这个版本叫1.0.0，那么各个模块的版本也叫同样的版本，当版本完成测试发布后，对各个模块打对应版本的tag，然后就很清楚的了解各模块的代码分布。</p><p>gradle依赖如下。</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">&#x2F;&#x2F; commoncompile &#39;cn.mycommons:base:1.0.0&#39;compile &#39;cn.mycommons:component:1.0.0&#39;compile &#39;cn.mycommons:service:1.0.0&#39;&#x2F;&#x2F; bizcompile &#39;cn.mycommons:user:1.0.0&#39;compile &#39;cn.mycommons:order:1.0.0&#39;compile &#39;cn.mycommons:shopping:1.0.0&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可能有人会问，既然各个模块已经分开开发，那么如果进行开发联调，别急，这个问题暂时保留，后面会对这个问题后面再表。</p><h3 id="数据通信"><a href="#数据通信" class="headerlink" title="数据通信"></a>数据通信</h3><p>当一个大项目拆成若干小项目时候，调用的姿势发生了少许改变。我这边总结了App各个模块之间的数据通信几种方式。</p><ul><li>页面跳转，比如在订单页面下单时候，需要判断用户是否登录，如果没有则需要跳到登录界面。</li><li>主动获取数据，比如在下单时候，用户已经登录，下单需要传递用户的基本信息。</li><li>被动获得数据，比如在切换用户的时候，有时候需要更新数据，如订单页面，需要把原先用户的购物车数据给清空。</li></ul><p>再来看下App的架构。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidModular/master/doc/3.png" alt="App架构"></p><p>第一个问题，原先的方式，直接指定某个页面的ActivityClass，然后通过intent跳转即可，但是在新的架构中，由于shopping模块不直接依赖user，那么则不能使用原始的进行跳转，我们解决方式使用Router路由跳转。</p><p>第二个问题，原先的方式有个专门的业务单利，比如UserManager，直接可以调用即可，同样由于依赖发生了改变，不能够进行调用。解决方案是所有的需要的操作，定义成接口放在Service中。</p><p>第三个问题，原先的方式，可以针对事件变化提供回调接口，当我需要监听某个事件时候，设置回调即可。</p><h4 id="页面路由跳转"><a href="#页面路由跳转" class="headerlink" title="页面路由跳转"></a>页面路由跳转</h4><p>如上分析，原先方式代码如下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">UserActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是使用Router后，调用方式改变了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RouterHelper</span><span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"app://user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体的原理是什么，很简单的，做一个简单的映射匹配即可，把<code>&quot;app://user&quot;</code>与<code>UserActivity.class</code>配对，具体的就是定义一个Map，key是对应的Router字符，value是Activity的class。在跳转时候从map中获取对应的ActivityClass，然后在使用原始的方式。</p><p>可能有人的会问，要向另外一个页面传递参数怎么办，没事我们可以在router后面直接添加参数，如果是一个复杂的对象那么可以把对象序列化成json字符串，然后再从对应的页面通过反序列化的方式，得到对应的对象。</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RouterHelper</span><span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"app://user?id=123&amp;obj=&#123;"</span>name<span class="token string">":"</span>admin<span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注：</strong> 上面的router中json字符串是需要url编码的，不然会有问题的，这里只是做个示例。</p><p>除了使用Router进行跳转外，我想了一下，可以参考Retrofit方式，直接定义跳转Java接口，如果需要传递额外参数，则以函数参数的方式定义。</p><p>这个Java接口是没有实现类的，可以使用动态代理方式，然后接下来的方式，和使用Router的方式一样。</p><p>那么这总两种方式有什么优缺点呢。</p><p><strong>Router方式:</strong></p><ul><li>有点：不需要高难度的技术点，使用方便，直接使用字符串定义跳转，可以好的往后兼容</li><li>缺点：因为使用的是字符串配置，如果字符输入字符，则很难发现bug，同时也很难知道某个参数对应的含义</li></ul><p><strong>仿Retrofit方式:</strong></p><ul><li>因为是Java接口定义，所以可以很简单找到对应的跳转方法，参数定义也很明确，可以直接写在接口定义处，方便查阅。</li><li>同样因为是Java接口定义，那么如果需要扩展参数，只能重新定义新方法，这样会出现多个方法重载，如果在原先接口上修改，对应的原先调用方也要做响应的修改，比较麻烦。</li></ul><p>上面是两种实现方式，如果有相应同学要实现模块化，可以根据实际情况做出选择。</p><h4 id="Interface和Implement"><a href="#Interface和Implement" class="headerlink" title="Interface和Implement"></a>Interface和Implement</h4><p>如上分析，如果需要从某个业务中获取数据，我们分别需要定义接口以及实现类，然在获取的时候在通过反射来实例化对象。</p><p>下面是简单的代码示例</p><p>接口定义</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"UserServiceImpl.getUserName"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反射生成对象</p><pre class="line-numbers language-none"><code class="language-none">public class InjectHelper &#123;    @NonNull    public static AppContext getAppContext() &#123;        return AppContext.getAppContext();    &#125;    @NonNull    public static IModuleConfig getIModuleConfig() &#123;        return getAppContext().getModuleConfig();    &#125;    @Nullable    public static &lt;T&gt; T getInstance(Class&lt;T&gt; tClass) &#123;        IModuleConfig config &#x3D; getIModuleConfig();        Class&lt;? extends T&gt; implementClass &#x3D; config.getServiceImplementClass(tClass);        if (implementClass !&#x3D; null) &#123;            try &#123;                return implementClass.newInstance();            &#125; catch (Exception e) &#123;                e.printStackTrace();            &#125;        &#125;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际调用</p><pre class="line-numbers language-none"><code class="language-none">IUserService userService &#x3D; InjectHelper.getInstance(IUserService.class);if (userService !&#x3D; null) &#123;    Toast.makeText(getContext(), userService.getUserName(), Toast.LENGTH_SHORT).show();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本示例中每次调用都是用反射生成新的对象，实际应用中可能与IoC工具结合使用，比如Dagger2.</p><h4 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h4><p>针对上面的第三个问题，原先设计的使用方式也是可以的，只需要把回调接口定义到对应的service接口中，然后调用方就可以使用。</p><p>但是我建议可以使用另外一个方式——EventBus，EventBus也是利用观察者模式，对事件进行监听，是设置回调更优雅方式的实现。</p><p>优点：不需要定义很多个回调接口，只需要定义事件Class，然后通过Claas的唯一性来进行事件匹配。</p><p>缺点：需要定义很多额外的类来表示事件，同时也需要关注EventBus的生命周期，在不需要使用事件时候，需要注销事件绑定，不然容易发生内存泄漏。</p><h2 id="映射匹配"><a href="#映射匹配" class="headerlink" title="映射匹配"></a>映射匹配</h2><p>上面的介绍的各个模块之间通信，都运涉及到映射匹配问题，在此我总结了一下，主要涉及到一下三种方式。</p><h3 id="Map-register"><a href="#Map-register" class="headerlink" title="Map register"></a>Map register</h3><p>Map register是这样的，全局定义一个Map，各个模块在初始化的时候，分别在初始化的时候注册映射关系。</p><p>下面是简单的代码示例，比如我们定义一个模块生命周期，用于初始化各个模块。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IModuleLifeCycle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">IModuleConfig</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>User模块初始化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModuleLifeCycle</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleModuleLifeCycle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">UserModuleLifeCycle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Application</span> application<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">IModuleConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        config<span class="token punctuation">.</span><span class="token function">registerService</span><span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">registerRouter</span><span class="token punctuation">(</span><span class="token string">"app://user"</span><span class="token punctuation">,</span> <span class="token class-name">UserActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Application中完成初始化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppContext</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ModuleLifeCycleManager</span> lifeCycleManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lifeCycleManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleLifeCycleManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lifeCycleManager<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lifeCycleManager<span class="token punctuation">.</span><span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">public</span> <span class="token class-name">IModuleConfig</span> <span class="token function">getModuleConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> lifeCycleManager<span class="token punctuation">.</span><span class="token function">getModuleConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModuleLifeCycleManager</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">private</span> <span class="token class-name">ModuleConfig</span> moduleConfig<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IModuleLifeCycle</span><span class="token punctuation">></span></span> moduleLifeCycleList<span class="token punctuation">;</span>    <span class="token class-name">ModuleLifeCycleManager</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Application</span> application<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        moduleConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        moduleLifeCycleList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        moduleLifeCycleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserModuleLifeCycle</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        moduleLifeCycleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderModuleLifeCycle</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        moduleLifeCycleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ShoppingModuleLifeCycle</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">IModuleLifeCycle</span> lifeCycle <span class="token operator">:</span> moduleLifeCycleList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            lifeCycle<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>moduleConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">IModuleLifeCycle</span> lifeCycle <span class="token operator">:</span> moduleLifeCycleList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            lifeCycle<span class="token punctuation">.</span><span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token class-name">IModuleConfig</span> <span class="token function">getModuleConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> moduleConfig<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="APT"><a href="#APT" class="headerlink" title="APT"></a>APT</h3><p>使用注解的方式配置映射信息，然后生成一个类似Database一样的文件，然后Database文件中包含一个Map字段，Map中记录各个映射信息。</p><p>首先需要定义个Annotation。</p><p>如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>CLASS<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Implements</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span> <span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要实现一个 Annotation Process Tool，来解析自己定义的Annotation。</p><p>代码略，此代码有点复杂，暂时不贴了。</p><p>编译产生的文件，大概如下所示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Implement_</span>$$_Database <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> serviceConfig<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Implement_</span>$$<span class="token function">_Database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        serviceConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serviceConfig<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getServiceImplementClass</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> serviceClass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> serviceConfig<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>serviceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后利用反射找到<code>Implement_$$_Database</code>这个类，然后从方法中找到配对。</p><pre class="line-numbers language-none"><code class="language-none">public class InjectHelper &#123;    @Nullable    public static &lt;T&gt; T getInstanceByDatabase(Class&lt;T&gt; tClass) &#123;        Implement_$$_Database database &#x3D; new Implement_$$_Database();        Class&lt;? extends T&gt; implementClass &#x3D; database.getServiceImplementClass(tClass);        if (implementClass !&#x3D; null) &#123;            try &#123;                return implementClass.newInstance();            &#125; catch (Exception e) &#123;                e.printStackTrace();            &#125;        &#125;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在需要配置的地方添加注解即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Implements</span><span class="token punctuation">(</span>parent <span class="token operator">=</span> <span class="token class-name">IUserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"UserServiceImpl.getUserName"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用姿势。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">binding<span class="token punctuation">.</span>button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">IUserService</span> userService <span class="token operator">=</span> <span class="token class-name">InjectHelper</span><span class="token punctuation">.</span><span class="token function">getInstanceByDatabase</span><span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userService<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意点：</strong></p><p>有时候，在生成最终的配置文件的时候，文件的名字是固定的，比如上面的<code>Implement_$$_Database</code>,最终的路径是这样的<code>cn.mycommons.implements.database.Implement_$$_Database.java</code>，然后通过编译到apk中或则是aar中。</p><p>但是有个问题，如果各个子模块都使用了这样的插件，那么每个子模块的就会有这个Implement_$$_Database.class，那么就会编译出错。</p><p>因为aar中包含的时候class文件，不是java文件，不能在使用APT做处理了。下面有2中解决方案。</p><ol><li><p>子工程的插件生成的文件包含一定的规则，比如包含模块名字，如<code>User_Implement_$$_Database.java</code>，同时修改编译过程，把java文件也打包到aar中，主工程的插件在编译时候，提取aar中的文件，然后合并子工程的所有的代码，这个思路是可行的，不过技术实现起来比较麻烦。</p></li><li><p>同一的方式类似，也是生成有一定规则的的文件，或者在特地package下生成class，这些class再通过接下来的所讲的Gradle Transform方式，生成一个新的Database.class文件。</p></li></ol><h3 id="Gradle-Transform"><a href="#Gradle-Transform" class="headerlink" title="Gradle Transform"></a>Gradle Transform</h3><p>这是Android Gradle编译提供的一个接口，可以供开发自定义一些功能，而我们就可以根据这个功能生成映射匹配，这种方式和APT类似，APT是运行在代码编译时期，而且Transform是直接扫描class，然后再生成新的class，class中包含Map映射信息。修改class文件，使用的是<a href="http://jboss-javassist.github.io/javassist/">javassist</a>一个第三方库。</p><p>下面简单讲述代码实现，后面有机会单独写一篇文章讲解。</p><p>首先定义一个注解，这个注解用于标注一个实现类的接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>mycommons<span class="token punctuation">.</span>modulebase<span class="token punctuation">.</span>annotations</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>CLASS<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Implements</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span> <span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个测试用的接口以及实现类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITest</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Implements</span><span class="token punctuation">(</span>parent <span class="token operator">=</span> <span class="token class-name">ITest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ITest</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个静态方法，用于获取某个接口的实现类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>mycommons<span class="token punctuation">.</span>modulebase<span class="token punctuation">.</span>annotations</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImplementsManager</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">></span></span> CONFIG <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Class</span> <span class="token function">getImplementsClass</span><span class="token punctuation">(</span><span class="token class-name">Class</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> CONFIG<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不使用任何黑科技，直接使用Java技术，那么在定义时候需要主动的往CONFIG这个map中添加配置，但是这里我们利用transform，直接动态的添加。</p><p>定义一个<code>ImplementsPlugin</code> gradle插件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImplementsPlugin</span> <span class="token keyword">implements</span> <span class="token class-name">Plugin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Project</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Project</span> project<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AppExtension</span> app <span class="token operator">=</span> project<span class="token punctuation">.</span><span class="token function">getExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getByType</span><span class="token punctuation">(</span><span class="token class-name">AppExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">registerTransform</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImplementsTransform</span><span class="token punctuation">(</span>project<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义的Transform实现。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImplementsTransform</span> <span class="token keyword">extends</span> <span class="token class-name">Transform</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String IMPLEMENTS_MANAGER <span class="token operator">=</span> <span class="token string gstring">"cn/mycommons/modulebase/annotations/ImplementsManager.class"</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String IMPLEMENTS_MANAGER_NAME <span class="token operator">=</span> <span class="token string gstring">"cn.mycommons.modulebase.annotations.ImplementsManager"</span>    Project project    <span class="token function">ImplementsTransform</span><span class="token punctuation">(</span>Project project<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>project <span class="token operator">=</span> project    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> Object<span class="token punctuation">...</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        String text <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> args<span class="token punctuation">)</span>        project<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string gstring">"[ImplementsPlugin]:<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string gstring">"ImplementsTransform"</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>QualifiedContent<span class="token punctuation">.</span>ContentType<span class="token operator">></span> <span class="token function">getInputTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ImmutableSet<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>QualifiedContent<span class="token punctuation">.</span>DefaultContentType<span class="token punctuation">.</span>CLASSES<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> QualifiedContent<span class="token punctuation">.</span>Scope<span class="token operator">></span> <span class="token function">getScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ImmutableSet<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>                QualifiedContent<span class="token punctuation">.</span>Scope<span class="token punctuation">.</span>PROJECT<span class="token punctuation">,</span>                QualifiedContent<span class="token punctuation">.</span>Scope<span class="token punctuation">.</span>PROJECT_LOCAL_DEPS<span class="token punctuation">,</span>                QualifiedContent<span class="token punctuation">.</span>Scope<span class="token punctuation">.</span>SUB_PROJECTS<span class="token punctuation">,</span>                QualifiedContent<span class="token punctuation">.</span>Scope<span class="token punctuation">.</span>SUB_PROJECTS_LOCAL_DEPS<span class="token punctuation">,</span>                QualifiedContent<span class="token punctuation">.</span>Scope<span class="token punctuation">.</span>EXTERNAL_LIBRARIES        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">boolean</span> <span class="token function">isIncremental</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span>TransformInvocation transformInvocation<span class="token punctuation">)</span>            <span class="token keyword">throws</span> TransformException<span class="token punctuation">,</span> InterruptedException<span class="token punctuation">,</span> IOException <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>transformInvocation<span class="token punctuation">)</span>        <span class="token keyword">long</span> time1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string gstring">".....transform"</span><span class="token punctuation">)</span>        TransformOutputProvider outputProvider <span class="token operator">=</span> transformInvocation<span class="token punctuation">.</span>outputProvider        outputProvider<span class="token punctuation">.</span><span class="token function">deleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> classPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        classPool<span class="token punctuation">.</span><span class="token function">appendSystemPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 记录所有的符合扫描条件的记录</span>        List<span class="token operator">&lt;</span>Entry<span class="token operator">></span> implementsList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment">// ImplementsManager 注解所在的jar文件</span>        JarInput implementsManagerJar <span class="token operator">=</span> null        <span class="token comment">// 扫描所有的文件</span>        transformInvocation<span class="token punctuation">.</span>inputs<span class="token punctuation">.</span>each <span class="token punctuation">&#123;</span>            it<span class="token punctuation">.</span>directoryInputs<span class="token punctuation">.</span>each <span class="token punctuation">&#123;</span>                classPool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>file<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span>                <span class="token keyword">def</span> dst <span class="token operator">=</span> outputProvider<span class="token punctuation">.</span><span class="token function">getContentLocation</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>name<span class="token punctuation">,</span> it<span class="token punctuation">.</span>contentTypes<span class="token punctuation">,</span> it<span class="token punctuation">.</span>scopes<span class="token punctuation">,</span> Format<span class="token punctuation">.</span>DIRECTORY<span class="token punctuation">)</span>                FileUtils<span class="token punctuation">.</span><span class="token function">copyDirectory</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>file<span class="token punctuation">,</span> dst<span class="token punctuation">)</span>                project<span class="token punctuation">.</span><span class="token function">fileTree</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">.</span>each <span class="token punctuation">&#123;</span>                    String clazzPath <span class="token operator">=</span> it<span class="token punctuation">.</span>absolutePath<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>dst<span class="token punctuation">.</span>absolutePath<span class="token punctuation">,</span> <span class="token string gstring">""</span><span class="token punctuation">)</span>                    clazzPath <span class="token operator">=</span> clazzPath<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string gstring">"/"</span><span class="token punctuation">,</span> <span class="token string gstring">"."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>clazzPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string gstring">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        clazzPath <span class="token operator">=</span> clazzPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> clazzPath<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>                        CtClass clazz <span class="token operator">=</span> classPool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clazzPath<span class="token punctuation">)</span>                        <span class="token comment">// 如果class中的类包含注解则先收集起来</span>                        Implements annotation <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Implements<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            implementsList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            it<span class="token punctuation">.</span>jarInputs<span class="token punctuation">.</span>each <span class="token punctuation">&#123;</span>                classPool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>file<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>implementsManagerJar <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">isImplementsManager</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    implementsManagerJar <span class="token operator">=</span> it                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">def</span> dst <span class="token operator">=</span> outputProvider<span class="token punctuation">.</span><span class="token function">getContentLocation</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>name<span class="token punctuation">,</span> it<span class="token punctuation">.</span>contentTypes<span class="token punctuation">,</span> it<span class="token punctuation">.</span>scopes<span class="token punctuation">,</span> Format<span class="token punctuation">.</span>JAR<span class="token punctuation">)</span>                    FileUtils<span class="token punctuation">.</span><span class="token function">copyFile</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>file<span class="token punctuation">,</span> dst<span class="token punctuation">)</span>                    <span class="token keyword">def</span> jarFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JarFile</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>file<span class="token punctuation">)</span>                    <span class="token keyword">def</span> entries <span class="token operator">=</span> jarFile<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment">// 如果jar中的class中的类包含注解则先收集起来</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>entries<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">def</span> jarEntry <span class="token operator">=</span> entries<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        String clazzPath <span class="token operator">=</span> jarEntry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        clazzPath <span class="token operator">=</span> clazzPath<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string gstring">"/"</span><span class="token punctuation">,</span> <span class="token string gstring">"."</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazzPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string gstring">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            clazzPath <span class="token operator">=</span> clazzPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> clazzPath<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>                            <span class="token keyword">def</span> clazz <span class="token operator">=</span> classPool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clazzPath<span class="token punctuation">)</span>                            Implements annotation <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Implements<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                implementsList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string gstring">"implementsManagerJar = "</span> <span class="token operator">+</span> implementsManagerJar<span class="token punctuation">)</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        implementsList<span class="token punctuation">.</span>each <span class="token punctuation">&#123;</span>            <span class="token keyword">def</span> str <span class="token operator">=</span> it<span class="token punctuation">.</span>anImplements<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string gstring">"anImplements ="</span> <span class="token operator">+</span> it<span class="token punctuation">.</span>anImplements<span class="token punctuation">)</span>            <span class="token keyword">def</span> parent <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string gstring">"("</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string gstring">")"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string gstring">"parent="</span><span class="token punctuation">,</span> <span class="token string gstring">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string gstring">".class"</span><span class="token punctuation">,</span> <span class="token string gstring">""</span><span class="token punctuation">)</span>            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string gstring">"parent ="</span> <span class="token operator">+</span> parent<span class="token punctuation">)</span>            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string gstring">"sub ="</span> <span class="token operator">+</span> it<span class="token punctuation">.</span>ctClass<span class="token punctuation">.</span>name<span class="token punctuation">)</span>            <span class="token comment">// 收集所有的接口以及实现类的路径</span>            config<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> it<span class="token punctuation">.</span>ctClass<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string gstring">"config = "</span> <span class="token operator">+</span> config<span class="token punctuation">)</span>        <span class="token keyword">long</span> time2 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>implementsManagerJar <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">def</span> implementsManagerCtClass <span class="token operator">=</span> classPool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>IMPLEMENTS_MANAGER_NAME<span class="token punctuation">)</span>            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string gstring">"implementsManagerCtClass = "</span> <span class="token operator">+</span> implementsManagerCtClass<span class="token punctuation">)</span>            <span class="token comment">// 修改class，在class中插入静态代码块，做初始化</span>            <span class="token keyword">def</span> body <span class="token operator">=</span> <span class="token string gstring">"&#123;\n"</span>            body <span class="token operator">+=</span> <span class="token string gstring">"CONFIG = new java.util.HashMap();\n"</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token punctuation">:</span> config<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                body <span class="token operator">+=</span> <span class="token string gstring">"CONFIG.put(<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>entry<span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span></span>.class, <span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>entry<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span></span>.class);\n"</span>            <span class="token punctuation">&#125;</span>            body <span class="token operator">+=</span> <span class="token string gstring">"&#125;\n"</span>            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string gstring">"body = "</span> <span class="token operator">+</span> body<span class="token punctuation">)</span>            implementsManagerCtClass<span class="token punctuation">.</span><span class="token function">makeClassInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body            <span class="token keyword">def</span> jar <span class="token operator">=</span> implementsManagerJar            <span class="token keyword">def</span> dst <span class="token operator">=</span> outputProvider<span class="token punctuation">.</span><span class="token function">getContentLocation</span><span class="token punctuation">(</span>jar<span class="token punctuation">.</span>name<span class="token punctuation">,</span> jar<span class="token punctuation">.</span>contentTypes<span class="token punctuation">,</span> jar<span class="token punctuation">.</span>scopes<span class="token punctuation">,</span> Format<span class="token punctuation">.</span>JAR<span class="token punctuation">)</span>            println dst<span class="token punctuation">.</span>absolutePath            <span class="token comment">// 修改完成后，完成后再写入到jar文件中</span>            <span class="token function">rewriteJar</span><span class="token punctuation">(</span>implementsManagerJar<span class="token punctuation">.</span>file<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> IMPLEMENTS_MANAGER<span class="token punctuation">,</span> implementsManagerCtClass<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string gstring">"time = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>time2 <span class="token operator">-</span> time1<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isImplementsManager</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JarFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span>IMPLEMENTS_MANAGER<span class="token punctuation">)</span> <span class="token operator">!=</span> null    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rewriteJar</span><span class="token punctuation">(</span>File src<span class="token punctuation">,</span> File dst<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dst<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> jarOutput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JarOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> rcJarFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JarFile</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>        jarOutput<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JarEntry</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>        jarOutput<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>        <span class="token keyword">def</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span>        <span class="token keyword">int</span> bytesRead        <span class="token keyword">def</span> entries <span class="token operator">=</span> rcJarFile<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>entries<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">def</span> entry <span class="token operator">=</span> entries<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>name <span class="token operator">==</span> name<span class="token punctuation">)</span> <span class="token keyword">continue</span>            jarOutput<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span>            <span class="token keyword">def</span> jarInput <span class="token operator">=</span> rcJarFile<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytesRead <span class="token operator">=</span> jarInput<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                jarOutput<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            jarInput<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        jarOutput<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体代码可以参考<a href="https://github.com/LiushuiXiaoxia/AndroidModular/tree/master/ImplementsTransformPlugin">这里</a></p><h3 id="映射匹配总结"><a href="#映射匹配总结" class="headerlink" title="映射匹配总结"></a>映射匹配总结</h3><p><strong>优点:</strong></p><ul><li>Map:简单明了，很容易入手，不会对编译时间产生任何影响，不会随着Gradle版本的升级而受影响，代码混淆时候不会有影响，无需配置混淆文件。</li><li>APT：使用简单，使用注解配置，代码优雅，原理是用代码生成的方式生成新的文件。</li><li>Transform：使用简单，使用注解配置，代码优雅，原理是用代码生成的方式生成新的文件，不过生成的文件的时期和APT不同，会编译时间产生少许影响。</li></ul><p><strong>缺点:</strong></p><ul><li>Map：在需要新添加映射的时候，需要手动添加，不然不会生效，代码不优雅。</li><li>APT：在编译时期生成文件，会编译时间产生少许影响，同时在不同的Gradle的版本中可能会产生错误或者兼容问题。需要配置混淆设置，不然会丢失文件。技术实现复杂，较难维护。</li><li>Transform：在编译时期生成文件，会编译时间产生少许影响，同时在不同的Gradle的版本中可能会产生错误或者兼容问题。需要配置混淆设置，不然会丢失文件。技术实现复杂，较难维护。</li></ul><p>从技术复杂性以及维护性来看，Map &gt; APT = Transform</p><p>从使用复杂性以及代码优雅性来看，Transform &gt; APT  &gt; Map</p><h2 id="开发调试技巧"><a href="#开发调试技巧" class="headerlink" title="开发调试技巧"></a>开发调试技巧</h2><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><p>上面介绍了很多关于模块化的概念以及技术难题，当模块化完成以后，再进行完成开发时候还是会遇到不少问题。不如原先代码在一起的时候很方便的进行代码调试。但是进行模块化以后，直接使用的是aar依赖，不能直接修改代码，可以使用下面技巧，可以直接进行代码调试。</p><p>在根目录下面创建一个module目录以及module.gradle文件，这个目录和文件是git ignore的，然后把对应的模块代码clone到里面，根目录的setting.gradlew apply module.gradle文件，如下所示，如果需要源码调试，则在module中添加对应的模块。然后在app的依赖中去掉aar依赖，同时添加项目依赖即可。当不需要源码调试好，再修改为到原先代码即可。</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">try &#123;    apply from: &quot;.&#x2F;module.gradle&quot;&#125; catch (e) &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>module.gradle</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">include &#39;:ModuleShopping&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如调试shopping模块</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">&#x2F;&#x2F; commoncompile &#39;cn.mycommons:base:1.0.0&#39;compile &#39;cn.mycommons:component:1.0.0&#39;compile &#39;cn.mycommons:service:1.0.0&#39;&#x2F;&#x2F; bizcompile &#39;cn.mycommons:user:1.0.0&#39;compile &#39;cn.mycommons:order:1.0.0&#39;&#x2F;&#x2F; compile &#39;cn.mycommons:shopping:1.0.0&#39;compile project(&#39;:ModuleShopping&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然还有个更具技术挑战性方案，使用gradle插件的形式，如果发现root项目中包含的模块化的源码，则不适用aar依赖，直接使用源码依赖，当然这个想法是不错的，不过具有技术挑战性，同时有可能随着Gradle版本的升级，编写的gradle插件也要做相对于的兼容风险，这是只是简单提示一下。</p><h3 id="容器设计"><a href="#容器设计" class="headerlink" title="容器设计"></a>容器设计</h3><p>上面讲到的如果要调试代码时候，需要完整的运行的整个项目，随着项目的增大，编译时间可能变得很长。</p><p>我们可以做一个简单的，类似与主app模块一样，比如我是负责user模块的开发者，那么我只要调试我这个模块就行了，如果需要其他的模块，我可以简单的做一个mock，不是把其他的模块直接依赖过来，这样可以做到调试作用。等到再需要完整项目调试时候，我们在使用上面介绍的方式，这样可以节省不少开发时间。</p><p>还有一种实现调试的方式，比如上面的user模块，目录下面的build.gradle文件是这样的</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">apply plugin: &#39;com.android.library&#39;xxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以在gradle.properties中设置编译变参数isLibModule，当需要完整调试好，设置为<code>isLibModule=false</code>，这样我这个子模块就是一个<code>apply plugin: &#39;com.android.application&#39;</code>这样的模块，是可以单独运行的一个项目</p><pre class="line-numbers language-none"><code class="language-none">try &#123;    if (isLibModule) &#123;        apply from: &quot;.&#x2F;build_lib.gradle&quot;    &#125;else&#123;        apply from: &quot;.&#x2F;build_app.gradle&quot;    &#125;&#125; catch (e) &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可能有时候还是需要单独的运行环境，android编译方式有2中，一种是debug，一种是release。当打包成aar的时候，使用的是release方式，我们可以把需要调试的代码全部放到debug中，这样打包的时候就不会把调试的文件发布到aar中。不过这种实现方式，需要对Android项目的目录有较高的认识，才可以熟练使用。</p><h3 id="CI"><a href="#CI" class="headerlink" title="CI"></a>CI</h3><p>上面介绍的各个模块需要单独到独立的git仓库，同时打包到单独的maven仓库，当开发完成后，这时候就需要进行打包，但这个是一个简单和重复的事情，所以我们需要一个工具来完成这些事情，我们可以利用CI系统来搞定这件事情，这里我推荐Jenkins，主流厂商使用jenkins作为CI服务器这个方案。</p><p>具体的步骤就是，需要对每个模块的git仓库做web hook，我们公司使用的是git lab，可以对git的各种操作做hook，比如push，merge，tag等。</p><p>当代码发送了变化了，我们可以发送事件到CI服务器，CI服务器再对各个事件做处理，比如user模块develop分支有代码变化，这个变化可能是merge，也有可能是push。我们可以把主项目代码和user项目的代码单独clone下拉，然后编译一下，确认是否有编译问题，如果有编译通过，那么在使用相关gradle命令发布到maven仓库中。</p><p>不管每次编译结果怎样，是成功还是失败，我们都应该把结果回馈给开发者，常见的方式是邮件，不过这个信息邮件方式可能很频繁，我们建议使用slack。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>模块化架构主要思路就是分而治之，把依赖整理清楚，减少代码冗余和耦合，在把代码抽取到各自的模块后，了解各个模块的通信方式，以及可能发生的问题，规避问题或者解决问题。最后为了开发和调试方便，开发一些周边工具，帮助开发更好的完成任务。</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p><a href="http://mobile.51cto.com/app-show-523490.htm">天猫手机解耦之路</a></p><p><a href="https://github.com/alibaba/BeeHive">iOS 模块化BeeHive</a></p><p><a href="http://limboy.me/tech/2016/03/10/mgj-components.html">蘑菇街 App 的组件化之路</a></p><p><a href="http://limboy.me/tech/2016/03/14/mgj-components-continued.html">蘑菇街 App 的组件化之路·续</a></p><p><a href="https://casatwy.com/iOS-Modulization.html">iOS应用架构谈 组件化方案</a></p><p><a href="http://jboss-javassist.github.io/javassist/">javassist资料</a></p><p><a href="http://www.jianshu.com/p/34f23b694412">iOS组件化方案调研</a></p><p><a href="http://www.cnblogs.com/baronzhang/p/6442047.html">安居客Android项目架构演进</a></p><p><a href="https://github.com/LiushuiXiaoxia/AndroidModular/">关于Android模块化我有一些话不知当讲不当讲</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Modular </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Model正确使用姿势——AutoValue</title>
      <link href="/2017/05/11/AutoValue/"/>
      <url>/2017/05/11/AutoValue/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-Model正确使用姿势——AutoValue"><a href="#Android-Model正确使用姿势——AutoValue" class="headerlink" title="Android Model正确使用姿势——AutoValue"></a>Android Model正确使用姿势——AutoValue</h1><hr><p>最近看到几篇博客是关于AutoValue的，然后自己十分喜欢，一下子觉的这样写代码很<strong>优雅</strong>，所以决定自己也写一篇文章介绍下AutoValue。</p><p><strong>本文最先发表于<a href="https://github.com/LiushuiXiaoxia/AutoValueDemo">Github</a>，如有转载，请注明转载出处。</strong></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先说Android Model，在开发中网络请求，以及数据库操作等，我们都会定义一个Model，不同人对这个的说法不一样，比如有Entry，Bean，Pojo。</p><p>然后开发的过程中会遇到下面问题：</p><ul><li><p>构成方法：自定义构造方法，如果实体比较复杂，可能会用到工厂模式或者是建造者模式</p></li><li><p>序列化：比如实现Serializable接口，Parcelable接口。</p></li><li><p>Json解析：有时候直接使用的是json数据，比如@SerializedName注解。</p></li><li><p>自定义方法：对Model的字段有setter，getter方法，toString的实现，在处理hash的时候，需要实现equals和hashcode方法。</p></li></ul><p>以上这么问题，其实在Eclipse和Android Studio中都是有快捷功能帮我们自动生成，后面的代码示例，就是我用Android Studio自动生成的。</p><p>比如下面一个User类是我们的本次示例的一个Model，如果按照正常的写法，是这样的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> user<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">:</span> user<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> id<span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>官方文档给出的解释是这样的，大致意思是说是一个生成Java不可变的值类型工具，仔细研读源代码后，使用的技术是Java Apt，这个后面再做详细解释。</p><blockquote><p>AutoValue - Immutable value-type code generation for Java 1.6+.</p></blockquote><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><p>按照上面的例子，如果是AutoValue，代码是这样的。</p><p>首先需要在Android项目里面引入apt功能，在项目根目录的gradle中添加，</p><pre class="line-numbers language-none"><code class="language-none">buildscript &#123;    repositories &#123;        jcenter()    &#125;    dependencies &#123;        classpath &#39;com.android.tools.build:gradle:2.2.2&#39;        &#x2F;&#x2F; 引入apt插件        classpath &#39;com.neenbedankt.gradle.plugins:android-apt:1.8&#39;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其次在module(一般是app目录)中gradle使用apt插件。</p><pre class="line-numbers language-none"><code class="language-none">apply plugin: &#39;com.android.application&#39;apply plugin: &#39;com.neenbedankt.android-apt&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后加入AutoValue依赖。</p><pre class="line-numbers language-none"><code class="language-none">dependencies &#123;    provided &#39;com.google.auto.value:auto-value:1.3&#39;    apt &#39;com.google.auto.value:auto-value:1.3&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改User类，如下所示，User已经变成了一个抽象类，类似于使用Retrofit一样，申明已经变成了一个接口，然后实现类是由AutoValue生成的代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>auto<span class="token punctuation">.</span>value<span class="token punctuation">.</span></span><span class="token class-name">AutoValue</span><span class="token punctuation">;</span><span class="token annotation punctuation">@AutoValue</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">User</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoValue_User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看看AutoValue到底干了什么？</p><p>AutoValue会自动生成一个AutoValue_User，这个类是继承了上面申明的User类，这个是默认default的访问权限，那么在其他package中是无法访问的，这样在其他代码里面也不会看到这么奇怪的名字。</p><p>同时所有的字段都是final类型，如果字段是对象类型的，那么还不能为空，这个问题先保留，后面再做详解。因为申明的是final类型，那么所有的字段都是没有setter方法的。</p><p>代码里同时也实现了equals、hashcode、toString方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">AutoValue_User</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token class-name">AutoValue_User</span><span class="token punctuation">(</span>      <span class="token keyword">int</span> id<span class="token punctuation">,</span>      <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"Null name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> id<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"User&#123;"</span>        <span class="token operator">+</span> <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", "</span>        <span class="token operator">+</span> <span class="token string">"name="</span> <span class="token operator">+</span> name        <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">User</span> that <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">==</span> that<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    h <span class="token operator">*=</span> <span class="token number">1000003</span><span class="token punctuation">;</span>    h <span class="token operator">^=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>    h <span class="token operator">*=</span> <span class="token number">1000003</span><span class="token punctuation">;</span>    h <span class="token operator">^=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> h<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Immutable-Value-types"><a href="#Immutable-Value-types" class="headerlink" title="Immutable/Value types"></a>Immutable/Value types</h1><p>刚刚上面说到，所有的字段都是final类型，那么而且实现类也是final的，有个专业术语叫Immutable。</p><p>Immutable/Value types 这个概念对有些朋友来说可能还比较陌生，简单来说就是一个数据对象一旦构造完成，就再也无法修改了。</p><p>这样有什么好处呢？最大的好处就是多线程访问可以省去很多同步控制，因为它们是不可变的，一旦构造完成，就不会存在多线程竞争访问问题了。多线程最麻烦的处理就是控制好读写问题，如果大家都是读，那么就不存控制了，所以省去了很多同步操作。</p><p>更多关于Immutable 的介绍，可以参阅 <a href="https://en.wikipedia.org/wiki/Immutable_object">wiki</a> 。</p><p>举个Java中的例子：String和StringBuilder，String是immutable的，每次对于String对象的修改都将产生一个新的String对象，而原来的对象保持不变，而StringBuilder是mutable，因为每次对于它的对象的修改都作用于该对象本身，并没有产生新的对象。</p><p>Immutable objects 比传统的mutable对象在多线程应用中更具有优势，它不仅能够保证对象的状态不被改变，而且还可以不使用锁机制就能被其他线程共享。</p><p>总结下Immutable对象的优缺点：</p><p><strong>优点</strong></p><ul><li>Immutable对象是线程安全的，可以不用被synchronize就在并发环境中共享</li><li>Immutable对象简化了程序开发，因为它无需使用额外的锁机制就可以在线程间共享</li><li>Immutable对象提高了程序的性能，因为它减少了synchroinzed的使用</li><li>Immutable对象是可以被重复使用的，你可以将它们缓存起来重复使用，就像字符串字面量和整型数字一样。你可以使用静态工厂方法来提供类似于valueOf（）这样的方法，它可以从缓存中返回一个已经存在的Immutable对象，而不是重新创建一个。</li></ul><p><strong>缺点</strong></p><p>Immutable也有一个缺点就是会制造大量垃圾，由于他们不能被重用而且对于它们的使用就是”用“然后”扔“，字符串就是一个典型的例子，它会创造很多的垃圾，给垃圾收集带来很大的麻烦。当然这只是个极端的例子，合理的使用immutable对象会创造很大的价值。</p><h1 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h1><h2 id="Nullable"><a href="#Nullable" class="headerlink" title="Nullable"></a>Nullable</h2><p>上面说过如果类中有对象类型的成员变量，那么是为非空的，但是在实际情况下，有的字段的是值就是为null，所以在申明时候可申明为Nullable就可以了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>auto<span class="token punctuation">.</span>value<span class="token punctuation">.</span></span><span class="token class-name">AutoValue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">SerializedName</span><span class="token punctuation">;</span><span class="token annotation punctuation">@AutoValue</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">NullableUser</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">NullableUser</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoValue_NullableUser</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">AutoValue_NullableUser</span> <span class="token keyword">extends</span> <span class="token class-name">NullableUser</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token class-name">AutoValue_NullableUser</span><span class="token punctuation">(</span>      <span class="token keyword">int</span> id<span class="token punctuation">,</span>      <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUserNullPointException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUserNullable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">NullableUser</span> user <span class="token operator">=</span> <span class="token class-name">NullableUser</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user = "</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Gson序列化"><a href="#Gson序列化" class="headerlink" title="Gson序列化"></a>Gson序列化</h2><p>Gson 使用比较麻烦，在普通的Model中，只需要在字段上面添加 @SerializedName注解即可。但是使用AutoValue，稍微有点繁琐。</p><p>首先需要引入一个依赖包，这里是<a href="https://github.com/rharter/auto-value-gson">Auto value gson Github</a>。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">provided &#39;com.ryanharter.auto.value:auto-value-gson:0.4.4&#39;apt &#39;com.ryanharter.auto.value:auto-value-gson:0.4.4&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其次申明的抽象类中，每个方法上面添加对应的注解，然后再添加一个<code>typeAdapter</code>方法，申明这个方法，Gson就会根据这个找到对应的adapter，如下所示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AutoValue</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">User</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoValue_User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TypeAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">typeAdapter</span><span class="token punctuation">(</span><span class="token class-name">Gson</span> gson<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoValue_User<span class="token punctuation">.</span>GsonTypeAdapter</span><span class="token punctuation">(</span>gson<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>typeAdapter</code>方法模板如下，T就是你当前Model的名字，写完以后会出现错误，没事重新编译下就好了，这样就会重新生成了代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TypeAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">typeAdapter</span><span class="token punctuation">(</span><span class="token class-name">Gson</span> gson<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoValue_T<span class="token punctuation">.</span>GsonTypeAdapter</span><span class="token punctuation">(</span>gson<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第三申明一个TypeAdapterFactory的一个实现类，这个类是abstract的，AutoValue也会自动生成其实现类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GsonTypeAdapterFactory</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MyAdapterFactory</span> <span class="token keyword">implements</span> <span class="token class-name">TypeAdapterFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TypeAdapterFactory</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoValueGson_MyAdapterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后是单元测试，在json字符串转Model的时候，会使用一个Gson对象，这个对象不是平常使用的对象，需要自定义配置一些东西，然后这里就用到了上面所申明的<code>MyAdapterFactory</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUserToJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"&#123;\"id\":100,\"name\":\"test\"&#125;"</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUserParseFromJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">"&#123;\"id\":100,\"name\":\"test\"&#125;"</span><span class="token punctuation">;</span>        <span class="token comment">// 自定义的Gson对象，需要配置 MyAdapterFactory</span>    <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerTypeAdapterFactory</span><span class="token punctuation">(</span><span class="token class-name">MyAdapterFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">NullableUser</span> nullableUser <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">NullableUser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nullableUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>nullableUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>nullableUser<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>nullableUser<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Serializable-amp-Parcelable"><a href="#Serializable-amp-Parcelable" class="headerlink" title="Serializable &amp; Parcelable"></a>Serializable &amp; Parcelable</h2><p>Serializable是Java自带的序列化方式，和AutoValue结合不影响原先使用，只需要在申明的Model中实现Serializable接口即可。</p><p>Parcelable是Android提供的序列化方式，如果需要和AutoValue结合使用，和Serializable基本差不多，实现相关接口，然后在Gradle文件引入相关apt依赖即可。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">apt &#39;com.ryanharter.auto.value:auto-value-parcel:0.2.5&#39;&#x2F;&#x2F; Optionally for TypeAdapter support&#x2F;&#x2F; compile &#39;com.ryanharter.auto.value:auto-value-parcel-adapter:0.2.5&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/rharter/auto-value-parcel">auto-value-parcel Github地址</a></p><p>上面的<code>auto-value-parcel-adapter</code>是可选项，是auto-value-parcel提供自定义类型转化，相关使用可以参见Github地址。</p><p>检查下Autovalue自动给我们实现的代码，果然不出所料，全部自动生成了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">AutoValue_User</span> <span class="token keyword">extends</span> $<span class="token class-name">AutoValue_User</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Parcelable<span class="token punctuation">.</span>Creator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AutoValue_User</span><span class="token punctuation">></span></span> CREATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parcelable<span class="token punctuation">.</span>Creator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AutoValue_User</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">AutoValue_User</span> <span class="token function">createFromParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> in<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoValue_User</span><span class="token punctuation">(</span>          in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          in<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">AutoValue_User</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoValue_User</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token class-name">AutoValue_User</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> dest<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dest<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dest<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">describeContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Retrofit和Rxjava结合使用"><a href="#Retrofit和Rxjava结合使用" class="headerlink" title="Retrofit和Rxjava结合使用"></a>Retrofit和Rxjava结合使用</h2><p>Android 开发的时候，很多开发者使用Retrofit这个网络库，以及RxJava异步工具。下面举例如何结合使用AutoValue，Retrofit，Rxjava。</p><p>这里有个获取天气的接口，返回的结果是json，我们用这个来测试下Retrofit。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; https:&#x2F;&#x2F;api.thinkpage.cn&#x2F;v3&#x2F;weather&#x2F;now.json?key&#x3D;x4qjfuniyu97mt9y&amp;location&#x3D;beijing&amp;language&#x3D;zh-Hans&amp;unit&#x3D;c&#123;  &quot;results&quot;: [    &#123;      &quot;location&quot;: &#123;        &quot;id&quot;: &quot;WX4FBXXFKE4F&quot;,        &quot;name&quot;: &quot;北京&quot;,        &quot;country&quot;: &quot;CN&quot;,        &quot;path&quot;: &quot;北京,北京,中国&quot;,        &quot;timezone&quot;: &quot;Asia&#x2F;Shanghai&quot;,        &quot;timezone_offset&quot;: &quot;+08:00&quot;      &#125;,      &quot;now&quot;: &#123;        &quot;text&quot;: &quot;霾&quot;,        &quot;code&quot;: &quot;31&quot;,        &quot;temperature&quot;: &quot;10&quot;      &#125;,      &quot;last_update&quot;: &quot;2016-12-02T14:45:00+08:00&quot;    &#125;  ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>申明Retrofit Api接口，一个普通的调用，一个是RxJava的方式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IWeatherApi</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"/v3/weather/now.json?key=x4qjfuniyu97mt9y&amp;location=beijing&amp;language=zh-Hans&amp;unit=c"</span><span class="token punctuation">)</span>    <span class="token class-name">Call</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Weather</span><span class="token punctuation">></span></span> <span class="token function">getWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"/v3/weather/now.json?key=x4qjfuniyu97mt9y&amp;location=beijing&amp;language=zh-Hans&amp;unit=c"</span><span class="token punctuation">)</span>    <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Weather</span><span class="token punctuation">></span></span> <span class="token function">getWeatherWithRx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Retrofit 接口创建</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetrofitUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">createApi</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> tClass<span class="token punctuation">,</span> <span class="token class-name">Gson</span> gson<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"https://api.thinkpage.cn"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span><span class="token class-name">GsonConverterFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>gson<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addCallAdapterFactory</span><span class="token punctuation">(</span><span class="token class-name">RxJavaCallAdapterFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Weather Model申明</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"results"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResultsItem</span><span class="token punctuation">></span></span> <span class="token function">results</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TypeAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Weather</span><span class="token punctuation">></span></span> <span class="token function">typeAdapter</span><span class="token punctuation">(</span><span class="token class-name">Gson</span> gson<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoValue_Weather<span class="token punctuation">.</span>GsonTypeAdapter</span><span class="token punctuation">(</span>gson<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用例，注意：Retrofit使用Gson和前面使用Gson使用方式一样，需要自己自定义，不然无法解决json解析问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRetrofitWithAutoValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerTypeAdapterFactory</span><span class="token punctuation">(</span><span class="token class-name">MyAdapterFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">IWeatherApi</span> weatherApi <span class="token operator">=</span> <span class="token class-name">RetrofitUtil</span><span class="token punctuation">.</span><span class="token function">createApi</span><span class="token punctuation">(</span><span class="token class-name">IWeatherApi</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> gson<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 同步调用</span>        <span class="token class-name">Weather</span> weather <span class="token operator">=</span> weatherApi<span class="token punctuation">.</span><span class="token function">getWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>weather<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>weather<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Rxjava 使用</span>        weatherApi<span class="token punctuation">.</span><span class="token function">getWeatherWithRx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Weather</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Weather</span> weather<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>weather<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果，正常的返回天气信息。</p><pre class="line-numbers language-none"><code class="language-none">Weather&#123;results&#x3D;[ResultsItem&#123;now&#x3D;Now&#123;code&#x3D;31, temperature&#x3D;9, text&#x3D;霾&#125;, lastUpdate&#x3D;2016-12-02T14:15:00+08:00, location&#x3D;Location&#123;country&#x3D;CN, path&#x3D;北京,北京,中国, timezone&#x3D;Asia&#x2F;Shanghai, timezoneOffset&#x3D;+08:00, name&#x3D;北京, id&#x3D;WX4FBXXFKE4F&#125;&#125;]&#125;Weather&#123;results&#x3D;[ResultsItem&#123;now&#x3D;Now&#123;code&#x3D;31, temperature&#x3D;9, text&#x3D;霾&#125;, lastUpdate&#x3D;2016-12-02T14:15:00+08:00, location&#x3D;Location&#123;country&#x3D;CN, path&#x3D;北京,北京,中国, timezone&#x3D;Asia&#x2F;Shanghai, timezoneOffset&#x3D;+08:00, name&#x3D;北京, id&#x3D;WX4FBXXFKE4F&#125;&#125;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="相关插件"><a href="#相关插件" class="headerlink" title="相关插件"></a>相关插件</h1><h2 id="RoboPOJOGenerator"><a href="#RoboPOJOGenerator" class="headerlink" title="RoboPOJOGenerator"></a>RoboPOJOGenerator</h2><p>GsonFormat是一款Android Studio的插件，它可以把json字符串，转变成Model对象，很多人都喜欢用它。</p><p>但是如果使用了AutoValue，那么原先的插件就不能使用了，没有关系，本来打算自己高仿GsonFormat重新写了一个插件，以实现我们的需求，后面又发现有一款插件可以实现——RoboPOJOGenerator。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AutoValueDemo/master/doc/1.png"></p><p>RoboPOJOGenerator使用， <a href="https://github.com/robohorse/RoboPOJOGenerator">RoboPOJOGenerator Github地址</a></p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AutoValueDemo/master/doc/2.gif"></p><h2 id="AutoValue-plugin"><a href="#AutoValue-plugin" class="headerlink" title="AutoValue plugin"></a>AutoValue plugin</h2><p>上面我们发现有了json字符串，有时候还要写factory和buildder方法，那么问题来了，没有插件能帮我们实现这个步骤，然代码更加的优雅，开发更加高效？</p><p>答案是肯定的，Autovalue plugin就是干这个事的。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AutoValueDemo/master/doc/3.png"></p><p><a href="https://github.com/afcastano/AutoValuePlugin">Auto value plugin Github</a></p><p>我们用刚刚上面的Weather做演示，相关演示：</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AutoValueDemo/master/doc/4.gif"></p><h1 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h1><p>本文重点介绍的AutoValue只是 <a href="https://github.com/google/auto">Google Auto</a> 中的一小部分，Auto中还有其他好玩的。</p><h2 id="AutoFactory"><a href="#AutoFactory" class="headerlink" title="AutoFactory"></a>AutoFactory</h2><p>AutoFactory和AutoValue类似，可以自动帮助代码生成工厂类，兼容Java 依赖注入标准（JSR-330）。</p><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AutoFactory</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryUser</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">FactoryUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"FactoryUser&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成后的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FactoryUserFactory</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Inject</span>  <span class="token keyword">public</span> <span class="token class-name">FactoryUserFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">FactoryUser</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FactoryUser</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFactoryUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">FactoryUser</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FactoryUserFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AutoService"><a href="#AutoService" class="headerlink" title="AutoService"></a>AutoService</h2><p>AutoService比较简单，就是在使用Java APT的时候，使用AutoService注解，可以自动生成meta信息。</p><h2 id="AutoCommon"><a href="#AutoCommon" class="headerlink" title="AutoCommon"></a>AutoCommon</h2><p>这个是Google对Java Apt的一个扩展，一般的在自己写Apt的时候，都需要继承<code>AbstractProcessor</code>，但是google对它进行了扩展，<code>BasicAnnotationProcessor</code>，如果你想自己写个工具，那么就可以使用这个了。</p><p>给大家举个栗子，Dagger当初是Square公司受到Guice的启发，然后自己开发出一套依赖注入框架，当时Dagger使用的是Java反射，大家知道Java反射的效率其实并不高。</p><p>再后来都到了AutoValue的启发，在Dagger的分支上切个新分支，开发出Dagger2，然后这个Dagger2是由Google维护的，我们可以在Dagger2的Github上面找到证据。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AutoValueDemo/master/doc/5.png"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="Auto相关使用"><a href="#Auto相关使用" class="headerlink" title="Auto相关使用"></a>Auto相关使用</h1><h2 id="IntentBuilder"><a href="#IntentBuilder" class="headerlink" title="IntentBuilder"></a>IntentBuilder</h2><p>有时候几个Activity之间相互跳转的时候需要传递一些参数，这些参数可以是基本类型，也有可能是复杂的类型，如果是负责的类型，必须要实现Serializable 或 Parcelable接口，上面也有介绍。</p><p>下面推IntentBuilder，IntentBuilder也是利用代码生成的方法实现的。</p><p><a href="https://github.com/emilsjolander/IntentBuilder">IntentBuilder Github</a></p><p>Activity传参</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@IntentBuilder</span><span class="token keyword">class</span> <span class="token class-name">DetailActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Extra</span>    <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Extra</span> <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DetailActivityIntentBuilder</span><span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO use id and title</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 调用方式</span><span class="token function">startActivity</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">DetailActivityIntentBuilder</span><span class="token punctuation">(</span><span class="token string">"12345"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"MyTitle"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Service传参</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@IntentBuilder</span><span class="token keyword">class</span> <span class="token class-name">DownloadService</span> <span class="token keyword">extends</span> <span class="token class-name">IntentService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Extra</span>    <span class="token class-name">String</span> downloadUrl<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onHandleIntent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyServiceIntentBuilder</span><span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">startService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DownloadServiceIntentBuilder</span><span class="token punctuation">(</span><span class="token string">"http://google.com"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="FragmentArgs"><a href="#FragmentArgs" class="headerlink" title="FragmentArgs"></a>FragmentArgs</h2><p>上面介绍了Activity、Service的传参，但Fragment的传参方式是不一样的，还有需要提醒一句一般通过setter方法给Fragment传参是不是正确的方式，必须通过setArgs的方式。</p><p><a href="https://github.com/sockeqwe/fragmentargs">fragmentargs Github</a></p><p>相关代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FragmentWithArgs</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Arg</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FragmentArgs</span><span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// inject 之后，就可以使用 id 了</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">MyFragment</span> fragment <span class="token operator">=</span> <span class="token class-name">MyFragmentBuilder</span><span class="token punctuation">.</span><span class="token function">newMyFragment</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="其他相关"><a href="#其他相关" class="headerlink" title="其他相关"></a>其他相关</h1><h2 id="Kotlin-Data-Class"><a href="#Kotlin-Data-Class" class="headerlink" title="Kotlin Data Class"></a>Kotlin Data Class</h2><p>Kotlin 是一个基于 JVM 的新的编程语言，由 JetBrains 开发。有机会可以向大家介绍这种语言。</p><p>Kotlin 中提供一种类似于AutoValue中的功能，Data Class表示这个类似是一个数据类型。</p><p>比如下面是kotlin中对Model的写法，就是这么的简单、明了、优雅。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">KotlinUser</span><span class="token punctuation">(</span><span class="token keyword">val</span> id<span class="token operator">:</span> Int<span class="token punctuation">,</span>                      <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Kotlin与Java是可以相互调用的。下面是Java的测试用例。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">KotlinUser</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KotlinUser</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以反编译Kotlin生成的class字节码，看看这个中间到底发生了什么，很明显Kotlin做了很多的语法糖，这里编译器生成的代码和上面Autovalue生成的代码很像。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AutoValueDemo/master/doc/6.png"></p><h2 id="Object-C"><a href="#Object-C" class="headerlink" title="Object-C"></a>Object-C</h2><p>Object-C中可以过直接申明@property方式，然后就可以自动实现setter和getter方法，如果要实现Immutable type方式，需要注明readonly。</p><p>hash、equals、description如果使用APPCode，代码是可以自动生成的。</p><pre class="line-numbers language-object-c" data-language="object-c"><code class="language-object-c">@interface OcUser : NSObject@property(readonly) int id;@property(retain, readonly) NSString *name;- (instancetype)initWithId:(int)id name:(NSString *)name;- (NSString *)description;- (BOOL)isEqual:(id)other;- (BOOL)isEqualToUser:(OcUser *)user;- (NSUInteger)hash;@end&#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;#import &quot;OcUser.h&quot;@implementation OcUser &#123;&#125;- (instancetype)initWithId:(int)id name:(NSString *)name &#123;    self &#x3D; [super init];    if (self) &#123;        _id   &#x3D; id;        _name &#x3D; name;    &#125;    return self;&#125;- (BOOL)isEqual:(id)other &#123;    if (other &#x3D;&#x3D; self)        return YES;    if (!other || ![[other class] isEqual:[self class]])        return NO;    return [self isEqualToUser:other];&#125;- (BOOL)isEqualToUser:(OcUser *)user &#123;    if (self &#x3D;&#x3D; user)        return YES;    if (user &#x3D;&#x3D; nil)        return NO;    if (self.id !&#x3D; user.id)        return NO;    return !(self.name !&#x3D; user.name &amp;&amp; ![self.name isEqualToString:user.name]);&#125;- (NSUInteger)hash &#123;    NSUInteger hash &#x3D; (NSUInteger) self.id;    hash &#x3D; hash * 31u + [self.name hash];    return hash;&#125;- (NSString *)description &#123;    NSMutableString *description &#x3D; [NSMutableString stringWithFormat:@&quot;&lt;%@: &quot;, NSStringFromClass([self class])];    [description appendFormat:@&quot;self.id&#x3D;%i&quot;, self.id];    [description appendFormat:@&quot;, self.name&#x3D;%@&quot;, self.name];    [description appendString:@&quot;&gt;&quot;];    return description;&#125;@end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用例</p><pre class="line-numbers language-objc" data-language="objc"><code class="language-objc">#import &lt;Foundation&#x2F;Foundation.h&gt;#import &quot;OcUser.h&quot;int main(int argc, const char *argv[]) &#123;    @autoreleasepool &#123;        OcUser *user &#x3D; [[OcUser alloc] initWithId:100 name:@&quot;test&quot;];        NSLog(@&quot;user &#x3D; %@&quot;, user);    &#125;    return 0;&#125;&#x2F;&#x2F; 运行结果&#x2F;&#x2F; user &#x3D; &lt;OcUser: self.id&#x3D;100, self.name&#x3D;test&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要介绍了Autovalue的主要用法，以及AutoValu周边只是，可能说的比较多，比较杂，而且有的地方也不够深入，但是个人觉的这是一种思路，一种解决方案，后面如果自己需要造轮子的时候，我们是可以借鉴的。</p><p>本示例代码地址 <a href="https://github.com/LiushuiXiaoxia/AutoValueDemo">AutoValueDemo</a></p><h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><p><a href="https://github.com/LiushuiXiaoxia/AutoValueDemo">AutoValueDemo</a></p><p><a href="http://bigmercu.top/2016/09/08/%E5%AE%8C%E7%BE%8EModel%E4%B9%8BAutoValue%E4%BD%BF%E7%94%A8/">完美Model之AutoValue使用</a></p><p><a href="http://blog.piasy.com/2016/05/06/Perfect-Android-Model-Layer/">完美的安卓 model 层架构（上）</a></p><p><a href="http://blog.piasy.com/2016/05/12/Perfect-Android-Model-Layer-2/">完美的安卓 model 层架构（下）</a></p><p><a href="https://github.com/google/auto/tree/master/value">AutoValue Github</a></p><p><a href="https://my.oschina.net/jasonultimate/blog/166810">Java Immutable 介绍</a></p><p><a href="https://github.com/rharter/auto-value-gson">Auto value gson Github</a></p><p><a href="https://github.com/rharter/auto-value-parcel">Auto value parcel Github</a></p><p><a href="https://github.com/robohorse/RoboPOJOGenerator">RoboPOJOGenerator Github</a></p><p><a href="https://github.com/afcastano/AutoValuePlugin">Auto value plugin Github</a></p><p><a href="https://github.com/emilsjolander/IntentBuilder">IntentBuilder Github</a></p><p><a href="https://github.com/sockeqwe/fragmentargs">Fragmentargs Github</a></p>]]></content>
      
      
      <categories>
          
          <category> Libs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AutoValue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安利AutoValue第二波</title>
      <link href="/2017/04/18/AutoValue2/"/>
      <url>/2017/04/18/AutoValue2/</url>
      
        <content type="html"><![CDATA[<h1 id="安利AutoValue第二波"><a href="#安利AutoValue第二波" class="headerlink" title="安利AutoValue第二波"></a>安利AutoValue第二波</h1><hr><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>前面介绍了如何使用AutoValue如何使用, 参见这里<a href="https://github.com/LiushuiXiaoxia/AutoValueDemo">Android Model正确使用姿势——AutoValue</a> ，如果喜欢或者决定使用AutoValue的小伙伴是不是迫不及待打算开始使用。</p><p>那么问题了，项目中原先写好的Model再改成AutovValue的形式，只有几个类还好，如果Model很多，一个个改不得累死。没关系，我这边已经写好了一个AndroidStudio 插件，可以自动把原先的类给转化成AutoValue的形式。</p><p><a href="https://github.com/LiushuiXiaoxia/AutoValueConvert">插件Github地址</a></p><span id="more"></span><p>如，一个普通的Java Model:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STATIC_FIELD <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span> byteField<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">short</span> shortField<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> intField<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> longField<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> chartField<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> floatField<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> doubleField<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> booleanField<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> stringField<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> setField<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> listField<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> mapField<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayField<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span> <span class="token function">getByteField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> byteField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setByteField</span><span class="token punctuation">(</span><span class="token keyword">byte</span> byteField<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>byteField <span class="token operator">=</span> byteField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">short</span> <span class="token function">getShortField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> shortField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setShortField</span><span class="token punctuation">(</span><span class="token keyword">short</span> shortField<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>shortField <span class="token operator">=</span> shortField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIntField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> intField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIntField</span><span class="token punctuation">(</span><span class="token keyword">int</span> intField<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>intField <span class="token operator">=</span> intField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getLongField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> longField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLongField</span><span class="token punctuation">(</span><span class="token keyword">long</span> longField<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>longField <span class="token operator">=</span> longField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">getChartField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> chartField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setChartField</span><span class="token punctuation">(</span><span class="token keyword">char</span> chartField<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>chartField <span class="token operator">=</span> chartField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getFloatField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> floatField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFloatField</span><span class="token punctuation">(</span><span class="token keyword">float</span> floatField<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>floatField <span class="token operator">=</span> floatField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getDoubleField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> doubleField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDoubleField</span><span class="token punctuation">(</span><span class="token keyword">double</span> doubleField<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>doubleField <span class="token operator">=</span> doubleField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBooleanField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> booleanField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBooleanField</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> booleanField<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>booleanField <span class="token operator">=</span> booleanField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStringField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stringField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStringField</span><span class="token punctuation">(</span><span class="token class-name">String</span> stringField<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stringField <span class="token operator">=</span> stringField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getSetField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> setField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSetField</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> setField<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>setField <span class="token operator">=</span> setField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getListField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> listField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setListField</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> listField<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>listField <span class="token operator">=</span> listField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getMapField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mapField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMapField</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> mapField<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mapField <span class="token operator">=</span> mapField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getArrayField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> arrayField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setArrayField</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayField<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arrayField <span class="token operator">=</span> arrayField<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>byteField <span class="token operator">!=</span> user<span class="token punctuation">.</span>byteField<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>shortField <span class="token operator">!=</span> user<span class="token punctuation">.</span>shortField<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>intField <span class="token operator">!=</span> user<span class="token punctuation">.</span>intField<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>longField <span class="token operator">!=</span> user<span class="token punctuation">.</span>longField<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chartField <span class="token operator">!=</span> user<span class="token punctuation">.</span>chartField<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>floatField<span class="token punctuation">,</span> floatField<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>doubleField<span class="token punctuation">,</span> doubleField<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>booleanField <span class="token operator">!=</span> user<span class="token punctuation">.</span>booleanField<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stringField <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token operator">!</span>stringField<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>stringField<span class="token punctuation">)</span> <span class="token operator">:</span> user<span class="token punctuation">.</span>stringField <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>setField <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token operator">!</span>setField<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>setField<span class="token punctuation">)</span> <span class="token operator">:</span> user<span class="token punctuation">.</span>setField <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>listField <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token operator">!</span>listField<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>listField<span class="token punctuation">)</span> <span class="token operator">:</span> user<span class="token punctuation">.</span>listField <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mapField <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token operator">!</span>mapField<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>mapField<span class="token punctuation">)</span> <span class="token operator">:</span> user<span class="token punctuation">.</span>mapField <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// Probably incorrect - comparing Object[] arrays with Arrays.equals</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arrayField<span class="token punctuation">,</span> user<span class="token punctuation">.</span>arrayField<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result<span class="token punctuation">;</span>        <span class="token keyword">long</span> temp<span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> byteField<span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> shortField<span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> intField<span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>longField <span class="token operator">^</span> <span class="token punctuation">(</span>longField <span class="token operator">>>></span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> chartField<span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>floatField <span class="token operator">!=</span> <span class="token operator">+</span><span class="token number">0.0f</span> <span class="token operator">?</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">floatToIntBits</span><span class="token punctuation">(</span>floatField<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">doubleToLongBits</span><span class="token punctuation">(</span>doubleField<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>temp <span class="token operator">^</span> <span class="token punctuation">(</span>temp <span class="token operator">>>></span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>booleanField <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>stringField <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> stringField<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>setField <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> setField<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>listField <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> listField<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>mapField <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> mapField<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>arrayField<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span>                <span class="token string">"byteField="</span> <span class="token operator">+</span> byteField <span class="token operator">+</span>                <span class="token string">", shortField="</span> <span class="token operator">+</span> shortField <span class="token operator">+</span>                <span class="token string">", intField="</span> <span class="token operator">+</span> intField <span class="token operator">+</span>                <span class="token string">", longField="</span> <span class="token operator">+</span> longField <span class="token operator">+</span>                <span class="token string">", chartField="</span> <span class="token operator">+</span> chartField <span class="token operator">+</span>                <span class="token string">", floatField="</span> <span class="token operator">+</span> floatField <span class="token operator">+</span>                <span class="token string">", doubleField="</span> <span class="token operator">+</span> doubleField <span class="token operator">+</span>                <span class="token string">", booleanField="</span> <span class="token operator">+</span> booleanField <span class="token operator">+</span>                <span class="token string">", stringField='"</span> <span class="token operator">+</span> stringField <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", setField="</span> <span class="token operator">+</span> setField <span class="token operator">+</span>                <span class="token string">", listField="</span> <span class="token operator">+</span> listField <span class="token operator">+</span>                <span class="token string">", mapField="</span> <span class="token operator">+</span> mapField <span class="token operator">+</span>                <span class="token string">", arrayField="</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arrayField<span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转化过就是这样,基本满足AutoValue使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AutoValue</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STATIC_FIELD <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"byteField"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">byte</span> <span class="token function">byteField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"shortField"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">short</span> <span class="token function">shortField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"intField"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">intField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"longField"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">long</span> <span class="token function">longField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"chartField"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">char</span> <span class="token function">chartField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"floatField"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">float</span> <span class="token function">floatField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"doubleField"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">doubleField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"booleanField"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">booleanField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"stringField"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">stringField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"setField"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">setField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"listField"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">listField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"mapField"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">mapField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"arrayField"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">arrayField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="操作示范"><a href="#操作示范" class="headerlink" title="操作示范"></a>操作示范</h1><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AutoValueConvert/master/doc/1.gif"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>这边有个 <a href="https://github.com/LiushuiXiaoxia/DatabindingConvert">Databinding的转化插件</a> ,你可能需要?</li></ul>]]></content>
      
      
      <categories>
          
          <category> Libs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AutoValue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin之let,apply,with,run函数区别</title>
      <link href="/2017/04/15/Kotlin-let-apply-with-run/"/>
      <url>/2017/04/15/Kotlin-let-apply-with-run/</url>
      
        <content type="html"><![CDATA[<h1 id="Kotlin之let-apply-with-run函数区别"><a href="#Kotlin之let-apply-with-run函数区别" class="headerlink" title="Kotlin之let,apply,with,run函数区别"></a>Kotlin之let,apply,with,run函数区别</h1><hr><p>很长一段时间内都一直使用Kotlin这门语言，也只是纯粹使用简单语法，最近有时候写的代码，编辑器自动提示使用let等函数，然后就专门花点时间研究了下。</p><span id="more"></span><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>首先let()的定义是这样的，默认当前这个对象作为闭包的it参数，返回值是函数里面最后一行，或者指定return</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> T<span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> R<span class="token punctuation">)</span><span class="token operator">:</span> R <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>简单示例:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">testLet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>    <span class="token comment">// fun &lt;T, R> T.let(f: (T) -> R): R &#123; f(this)&#125;</span>    <span class="token string">"testLet"</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//运行结果</span><span class="token comment">//testLet</span><span class="token comment">//testLet</span><span class="token comment">//testLet</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看看最后生成的class文件，代码已经经过格式化了，编译器只是在我们原先的变量后面添加了let里面的内容。</p><pre class="line-numbers language-none"><code class="language-none">public static final int testLet() &#123;    String str1 &#x3D; &quot;testLet&quot;;    String it &#x3D; (String)str1;    int $i$a$1$let;    System.out.println(it);    System.out.println(it);    System.out.println(it);    return 1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来个复杂一定的例子</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">testLet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>    <span class="token comment">// fun &lt;T, R> T.let(f: (T) -> R): R &#123; f(this)&#125;</span>    <span class="token string">"testLet"</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">2</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译过后的class文件</p><pre class="line-numbers language-none"><code class="language-none">public static final int testLet() &#123;    String str1 &#x3D; &quot;testLet&quot;;    String it &#x3D; (String)str1;    int $i$a$1$let;    if (new Random().nextBoolean())    &#123;        System.out.println(it);        return 1;    &#125;    System.out.println(it);    return 2;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><p>apply函数是这样的，调用某对象的apply函数，在函数范围内，可以任意调用该对象的任意方法，并返回该对象</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>f<span class="token operator">:</span> T<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">&#123;</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码示例</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">testApply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// fun &lt;T> T.apply(f: T.() -> Unit): T &#123; f(); return this &#125;</span>    ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">&#123;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"testApply"</span><span class="token punctuation">)</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"testApply"</span><span class="token punctuation">)</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"testApply"</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this = "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span> <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行结果</span><span class="token comment">// this = [testApply, testApply, testApply]</span><span class="token comment">// [testApply, testApply, testApply]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译过后的class文件</p><pre class="line-numbers language-none"><code class="language-none">public static final void testApply()&#123;  ArrayList localArrayList1 &#x3D; new ArrayList();  ArrayList localArrayList2 &#x3D; (ArrayList)localArrayList1;  int $i$a$1$apply;  ArrayList $receiver;  $receiver.add(&quot;testApply&quot;);  $receiver.add(&quot;testApply&quot;);  $receiver.add(&quot;testApply&quot;);  String str &#x3D; &quot;this &#x3D; &quot; + $receiver;  System.out.println(str);  localArrayList1 &#x3D; localArrayList1;  ArrayList it &#x3D; (ArrayList)localArrayList1;  int $i$a$2$let;  System.out.println(it);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><p>with函数是一个单独的函数，并不是Kotlin中的extension，所以调用方式有点不一样，返回是最后一行，然后可以直接调用对象的方法，感觉像是let和apply的结合。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">with</span><span class="token punctuation">(</span>receiver<span class="token operator">:</span> T<span class="token punctuation">,</span> f<span class="token operator">:</span> T<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> R<span class="token punctuation">)</span><span class="token operator">:</span> R <span class="token operator">=</span> receiver<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码示例:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">testWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// fun &lt;T, R> with(receiver: T, f: T.() -> R): R = receiver.f()</span>    <span class="token function">with</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"testWith"</span><span class="token punctuation">)</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"testWith"</span><span class="token punctuation">)</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"testWith"</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this = "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span> <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行结果</span><span class="token comment">// this = [testWith, testWith, testWith]</span><span class="token comment">// kotlin.Unit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>class文件</p><pre class="line-numbers language-none"><code class="language-none">public static final void testWith() &#123;   Object localObject &#x3D; new ArrayList();   ArrayList localArrayList1 &#x3D; (ArrayList)localObject;   int $i$a$1$with;   ArrayList $receiver;   $receiver.add(&quot;testWith&quot;);   $receiver.add(&quot;testWith&quot;);   $receiver.add(&quot;testWith&quot;);   String str &#x3D; &quot;this &#x3D; &quot; + $receiver;   System.out.println(str);   localObject &#x3D; Unit.INSTANCE;   Unit it &#x3D; (Unit)localObject;   int $i$a$2$let;   System.out.println(it); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="run"><a href="#run" class="headerlink" title="run"></a>run</h2><p>run函数和apply函数很像，只不过run函数是使用最后一行的返回，apply返回当前自己的对象。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> T<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>f<span class="token operator">:</span> T<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> R<span class="token punctuation">)</span><span class="token operator">:</span> R <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码示例</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">testRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// fun &lt;T, R> T.run(f: T.() -> R): R = f()</span>    <span class="token string">"testRun"</span><span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this = "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span> <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行结果</span><span class="token comment">// this = testRun</span><span class="token comment">// kotlin.Unit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>class文件</p><pre class="line-numbers language-none"><code class="language-none">public static final void testRun()&#123;  Object localObject &#x3D; &quot;testRun&quot;;  String str1 &#x3D; (String)localObject;  int $i$a$1$run;  String $receiver;  String str2 &#x3D; &quot;this &#x3D; &quot; + $receiver;  System.out.println(str2);  localObject &#x3D; Unit.INSTANCE;  Unit it &#x3D; (Unit)localObject;  int $i$a$2$let;  System.out.println(it);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>怎么样，是不是看晕了，没关系，我们来总结下。</p><table><thead><tr><th>函数名</th><th align="center">定义</th><th align="center">参数</th><th align="right">返回值</th><th align="right">extension</th><th align="right">其他</th></tr></thead><tbody><tr><td>let</td><td align="center">fun &lt;T, R&gt; T.let(f: (T) -&gt; R): R = f(this)</td><td align="center">it</td><td align="right">闭包返回</td><td align="right">是</td><td align="right"></td></tr><tr><td>apply</td><td align="center">fun <T> T.apply(f: T.() -&gt; Unit): T { f(); return this }</td><td align="center">无，可以使用this</td><td align="right">this</td><td align="right">是</td><td align="right"></td></tr><tr><td>with</td><td align="center">fun &lt;T, R&gt; with(receiver: T, f: T.() -&gt; R): R = receiver.f()</td><td align="center">无，可以使用this</td><td align="right">闭包返回</td><td align="right">否</td><td align="right">调用方式与其他不同</td></tr><tr><td>run</td><td align="center">fun &lt;T, R&gt; T.run(f: T.() -&gt; R): R = f()</td><td align="center">无，可以使用this</td><td align="right">闭包返回</td><td align="right">是</td><td align="right"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Git的错误</title>
      <link href="/2017/04/15/Git-Lock/"/>
      <url>/2017/04/15/Git-Lock/</url>
      
        <content type="html"><![CDATA[<h1 id="关于Git的错误"><a href="#关于Git的错误" class="headerlink" title="关于Git的错误"></a>关于Git的错误</h1><p>写完代码以后，不能继续提交，错误显示是这样的。</p><pre class="line-numbers language-none"><code class="language-none">fatal: Unable to create &#39;&#x2F;Users&#x2F;Demo&#x2F;.git&#x2F;index.lock&#39;: File exists.Another git process seems to be running in this repository, e.g.an editor opened by &#39;git commit&#39;. Please make sure all processesare terminated then try again. If it still fails, a git processmay have crashed in this repository earlier:remove the file manually to continue.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大致意思是，有个其他进程在操作这个仓库，所以无法继续提交。</p><p>只需要删除<code>index.lock</code>文件即可。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">rm .git&#x2F;index.lock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CheckStyle出现Unable to create a Checker configLocation问题</title>
      <link href="/2017/03/29/CheckStyle/"/>
      <url>/2017/03/29/CheckStyle/</url>
      
        <content type="html"><![CDATA[<h1 id="CheckStyle出现Unable-to-create-a-Checker-configLocation问题"><a href="#CheckStyle出现Unable-to-create-a-Checker-configLocation问题" class="headerlink" title="CheckStyle出现Unable to create a Checker: configLocation问题"></a>CheckStyle出现Unable to create a Checker: configLocation问题</h1><hr><p>最近使用了Android Studio 3.0版本，同时Gradle版本由3.3升级到了3.5版本。</p><p>突然发现原先项目中静态代码分析工具——CheckStyle不能使用了，出现类似如下的错误。</p><pre class="line-numbers language-none"><code class="language-none">1: Task failed with an exception.-----------* What went wrong:Execution failed for task &#39;:app:checkstyle&#39;.&gt; Unable to create Root Module: configLocation &#123;xxxx&#x2F;xxxx&#x2F;checkstyle&#x2F;checkstyle.xml&#125;, classpath &#123;null&#125;.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过查找资料获得，大致是这样的，Gradle3.5版本中默认使用的是CheckStyle7.2版本，3.3版本中使用的是5.9版本，有兼容性错误。</p><span id="more"></span><p>原文是这样的:</p><pre class="line-numbers language-none"><code class="language-none">The specific problem here is that OperatorWrap did not support the METHOD_REF token until Checkstyle 7.2. Technically this configuration file is invalid unless you specify Checkstyle version 7.2 or higher.With Gradle 3.3 (default Checkstyle 5.9), that configuration was still not correct, but you did not receive an error due to looser validation (in Checkstyle, not Gradle). That version only failed on tokens that were completely unknown, not those that were only valid for other rules.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以在官方暂时没有解决方案的情况，可以在Gradle中指定CheckStyle的版本。</p><p>如下所示</p><pre class="line-numbers language-none"><code class="language-none">apply plugin: &#39;checkstyle&#39;checkstyle &#123;    toolVersion &#x3D; &#39;5.9&#39;&#125;task checkstyle(type: Checkstyle) &#123;    configFile file(&quot;checkstyle.xml&quot;)    ignoreFailures false    showViolations true    source &#39;src&#39;    include &#39;**&#x2F;*.java&#39;    exclude &#39;**&#x2F;gen&#x2F;**&#39;, &#39;**&#x2F;test&#x2F;**&#39;, &#39;**&#x2F;build&#x2F;**&#39;    classpath &#x3D; files()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://discuss.gradle.org/t/checkstyle-checker-cannot-be-created-with-gradle-3-5/22474">官方地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码分析 </tag>
            
            <tag> check style </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 自定义视图总结</title>
      <link href="/2017/03/25/Android-view/"/>
      <url>/2017/03/25/Android-view/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-自定义视图总结"><a href="#Android-自定义视图总结" class="headerlink" title="Android 自定义视图总结"></a>Android 自定义视图总结</h1><hr><p>很多在开发的过程中，经常会需要把某个UI视图给单独抽取出来，以便重复使用，下面举个简单例子，分析一下。</p><span id="more"></span><p>比如我们这边有个这样的视图，如下所示，显示一个订单模块中，经常显示一个商品的信息、数量以及价格。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/GoodsDemo/master/doc/1.png"></p><p>上面的显示商品的实体是这样的。</p><pre class="line-numbers language-none"><code class="language-none">public class GoodsItem implements Serializable &#123;    public String name;    public int count;    public double price;    @Override    public String toString() &#123;        return &quot;GoodsItem&#123;&quot; +                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +                &quot;, count&#x3D;&quot; + count +                &quot;, price&#x3D;&quot; + price +                &#39;&#125;&#39;;    &#125;&#125;GoodsItem goodsItem &#x3D; new GoodsItem();goodsItem.name &#x3D; &quot;可口可乐&quot;;goodsItem.count &#x3D; 123;goodsItem.price &#x3D; 321;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正常情况"><a href="#正常情况" class="headerlink" title="正常情况"></a>正常情况</h2><p>正常情况下，我们如果只需要用一次，那么我们定义好布局就好了，然后简单的赋值就好，下面是代码。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>showIn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@layout/activity_main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tvName<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">tools:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>可口可乐<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tvCount<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">tools:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tvPrice<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">tools:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>￥100<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// normal</span><span class="token class-name">TextView</span> tvName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tvName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TextView</span> tvCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tvCount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TextView</span> tvPrice <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tvPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>tvName<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>goodsItem<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>tvCount<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"x%s"</span><span class="token punctuation">,</span> goodsItem<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tvPrice<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"￥%s"</span><span class="token punctuation">,</span> goodsItem<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是最简单的方式，也是初学Android的时候常用的方式。</p><h2 id="Databinding"><a href="#Databinding" class="headerlink" title="Databinding"></a>Databinding</h2><p>Google官方给出了一个Databinding的方式，这样我们代码了里面就可以少些很多代码，在对上面的代码进行少许优化后，就可以使用Databinding的方式。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">tools:</span>showIn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@layout/activity_main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tvName<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">tools:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>可口可乐<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tvCount<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">tools:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tvPrice<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">tools:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>￥100<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// databind</span>binding<span class="token punctuation">.</span>includeDatabinding<span class="token punctuation">.</span>tvName<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>goodsItem<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>binding<span class="token punctuation">.</span>includeDatabinding<span class="token punctuation">.</span>tvCount<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"x%s"</span><span class="token punctuation">,</span> goodsItem<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>binding<span class="token punctuation">.</span>includeDatabinding<span class="token punctuation">.</span>tvPrice<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"￥%s"</span><span class="token punctuation">,</span> goodsItem<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用Databinding的最好好处，就不需要写烦人的findViewById了。</p><h2 id="Databinding升级"><a href="#Databinding升级" class="headerlink" title="Databinding升级"></a>Databinding升级</h2><p>如果使用Databinding绑定的形式，那么赋值的方式就更加容易了，在定义xml的时候定义传递一个GoodsItem对象，然后在界面赋值一个对象就好了，简单明了。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>good<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.mycommons.goodsdemo.GoodsItem<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">tools:</span>showIn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@layout/activity_main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tvName<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;good.name&#125;<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">tools:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>可口可乐<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tvCount<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>@&#123;<span class="token punctuation">"</span>x<span class="token punctuation">"</span>+good.count&#125;<span class="token punctuation">'</span></span>            <span class="token attr-name"><span class="token namespace">tools:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tvPrice<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>@&#123;<span class="token punctuation">"</span>￥<span class="token punctuation">"</span>+good.price&#125;<span class="token punctuation">'</span></span>            <span class="token attr-name"><span class="token namespace">tools:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>￥100<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// databind with param</span>binding<span class="token punctuation">.</span>includeDatabindingWithParam<span class="token punctuation">.</span><span class="token function">setGood</span><span class="token punctuation">(</span>goodsItem<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="自定义View"><a href="#自定义View" class="headerlink" title="自定义View"></a>自定义View</h2><p>刚刚的示例比较，可以使用简单复制就可以搞定，有时候，业务比较复制，可能还要处理手势事件，如果使用Databinding就不怎么方便了。<br>所以自定义View是我们另外的一种方式。</p><p>首先我们顶一个自定义的View，这个view是专门用来显示商品信息的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsItemView</span> <span class="token keyword">extends</span> <span class="token class-name">FrameLayout</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">TextView</span> tvName<span class="token punctuation">,</span> tvCount<span class="token punctuation">,</span> tvPrice<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">GoodsItemView</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">GoodsItemView</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">AttributeSet</span> attrs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LayoutInflater</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>databinding<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tvName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tvName<span class="token punctuation">)</span><span class="token punctuation">;</span>        tvCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tvCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        tvPrice <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tvPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUI</span><span class="token punctuation">(</span><span class="token class-name">GoodsItem</span> goodsItem<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tvName<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>goodsItem<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        tvCount<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"x%s"</span><span class="token punctuation">,</span> goodsItem<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tvPrice<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"￥%s"</span><span class="token punctuation">,</span> goodsItem<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然在布局中引入就可以了，最好在Activity中找到所对应的对象，最后赋值就可以了。</p><pre class="line-numbers language-none"><code class="language-none">&lt;cn.mycommons.goodsdemo.GoodsItemView    android:id&#x3D;&quot;@+id&#x2F;goodsItemView&quot;    android:layout_width&#x3D;&quot;match_parent&quot;    android:layout_height&#x3D;&quot;wrap_content&quot; &#x2F;&gt;    &#x2F;&#x2F; custom viewGoodsItemView goodsItemView &#x3D; (GoodsItemView) findViewById(R.id.goodsItemView);goodsItemView.updateUI(goodsItem);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义Module"><a href="#自定义Module" class="headerlink" title="自定义Module"></a>自定义Module</h2><p>有时候一个自定义View会有所限制，比如，自定义View不能代码混淆，而且自定义View会受到分类的限制。<br>有时候仅仅只是一处使用，单独提取一个View代价太大，那么我们可以单独自定义一个Module的方式，这样做的话，可以减少Activity的代码量。<br>话不多说，先看代码。</p><p>首先商品展示界面还在定义在Activity的布局中。</p><pre class="line-numbers language-none"><code class="language-none">&lt;include    android:id&#x3D;&quot;@+id&#x2F;includeModule&quot;    layout&#x3D;&quot;@layout&#x2F;databinding&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后我们定义一个通用的Module接口，以及实现类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IModule</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsItemModule</span> <span class="token keyword">implements</span> <span class="token class-name">IModule</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">View</span> rootView<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">TextView</span> tvName<span class="token punctuation">,</span> tvCount<span class="token punctuation">,</span> tvPrice<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">GoodsItemModule</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">View</span> rootView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rootView <span class="token operator">=</span> rootView<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tvName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> rootView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tvName<span class="token punctuation">)</span><span class="token punctuation">;</span>        tvCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> rootView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tvCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        tvPrice <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> rootView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tvPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUI</span><span class="token punctuation">(</span><span class="token class-name">GoodsItem</span> goodsItem<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tvName<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>goodsItem<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        tvCount<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"x%s"</span><span class="token punctuation">,</span> goodsItem<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tvPrice<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"￥%s"</span><span class="token punctuation">,</span> goodsItem<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tvName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        tvCount <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        tvPrice <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在Activity中，把商品展示的接的根视图传入到Module中，这样对商品展示的所有逻辑都是写在了GoodsItemModule中了，<br>这样就减少了耦合，Activity的代码量也比较少，同时 Module中定义了简单的生命周期，可以在Activity中调用，方便管理。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; modulegoodsItemModule &#x3D; new GoodsItemModule(findViewById(R.id.includeModule));goodsItemModule.create();goodsItemModule.updateUI(goodsItem);&#x2F;&#x2F; 这一段可以在Activity.onDestroy中执行goodsItemModule.destroy();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><p>看到上面了方法，是不是想到了Fragment，其实Fragment也是Google提供的自定义Module的一种实现。Fragment提供更加完善的生命周期，不过也是一个值得吐槽的地方。<br>导致很多实用Fragment的时候不知道怎么用，以及实用过于复杂。</p><p>下面展示下Fragment的使用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsItemFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> EXTRA_GOODS_ITEM <span class="token operator">=</span> <span class="token string">"goods_item"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">GoodsItemFragment</span> <span class="token function">newFragment</span><span class="token punctuation">(</span><span class="token class-name">GoodsItem</span> goodsItem<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GoodsItemFragment</span> fragment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoodsItemFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Bundle</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">putSerializable</span><span class="token punctuation">(</span>EXTRA_GOODS_ITEM<span class="token punctuation">,</span> goodsItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        fragment<span class="token punctuation">.</span><span class="token function">setArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> fragment<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span><span class="token class-name">LayoutInflater</span> inflater<span class="token punctuation">,</span>                             <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ViewGroup</span> container<span class="token punctuation">,</span>                             <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>databinding<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onViewCreated</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onViewCreated</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">TextView</span> tvName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tvName<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">TextView</span> tvCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tvCount<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">TextView</span> tvPrice <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tvPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GoodsItem</span> goodsItem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">GoodsItem</span><span class="token punctuation">)</span> <span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSerializable</span><span class="token punctuation">(</span>EXTRA_GOODS_ITEM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>goodsItem <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tvName<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>goodsItem<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            tvCount<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"x%s"</span><span class="token punctuation">,</span> goodsItem<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tvPrice<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"￥%s"</span><span class="token punctuation">,</span> goodsItem<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以及Activity中的调用方式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// fragment</span><span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>fragmentContainer<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">GoodsItemFragment</span><span class="token punctuation">.</span><span class="token function">newFragment</span><span class="token punctuation">(</span>goodsItem<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面展示了Android中自定义视图模块的常用方式，下面进行比较和总结：</p><ul><li>正常情况 : 简单明了，所有的开发人员都会，只不过代码比较冗余，不利于解耦。</li><li>Databinding : 简单明了，减少繁琐的findViewById代码，而且方便。</li><li>Databinding升级 : 更加简单明了，不过有少许的学习成本，不过现在已经是Android程序员的基本技能了。</li><li>自定义View : 代码稍微复杂，开发繁琐，同时自定义View不能进行代码混淆，可以根据View的名字，猜想逻辑。</li><li>自定义Module : 这种方式，简单粗暴，学习成本比较低，小项目内可以自由使用，不过不利于推广。</li><li>Fragment : 高级的自定义Module方式，有学习成本，利于推广和维护。</li></ul><p>上面的自定义View和自定义Module是两种程序的实习方式，有句话叫做组合由于继承，所以有时候，我会选择后者。</p><p>个人的喜爱程度是这样，当然有时候会根据项目的实际情况进行选择，也有时候会进行组合使用。</p><p>Databinding升级 = Databinding &gt; Fragment &gt; 自定义Module &gt; 正常情况 &gt; 自定义View</p><p>以上就是作者对Android自定义视图总结，欢迎前来讨论。</p><p><a href="https://github.com/LiushuiXiaoxia/GoodsDemo">示例代码地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio插件：布局文件转化Databinding</title>
      <link href="/2017/02/25/Android-databing-plugin/"/>
      <url>/2017/02/25/Android-databing-plugin/</url>
      
        <content type="html"><![CDATA[<h1 id="AndroidStudio插件：布局文件转化Databinding"><a href="#AndroidStudio插件：布局文件转化Databinding" class="headerlink" title="AndroidStudio插件：布局文件转化Databinding"></a>AndroidStudio插件：布局文件转化Databinding</h1><hr><h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>这几天一直在做代码重构，因为Android是提供Databinding的MVVM架构，所以就想把代码里面所有的Butterknife代码换成Databinding形式。</p><p><a href="https://github.com/LiushuiXiaoxia/DatabindingConvert">Github地址</a></p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>一个简单的Android Studio 插件，把当前的布局文件转化成Databinding的形式。</p><p>如，当一个布局文件如下所示:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.TabLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tabLayout<span class="token punctuation">"</span></span>            <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@style/tabLayoutStyle<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/colorPrimary<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v4.view.ViewPager</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/vpMainContainer<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转化过就是这样(注意：还没有实现代码转化后的格式化，需要手动格式化)：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.TabLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tabLayout<span class="token punctuation">"</span></span>            <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@style/tabLayoutStyle<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/colorPrimary<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v4.view.ViewPager</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/vpMainContainer<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="操作示范"><a href="#操作示范" class="headerlink" title="操作示范"></a>操作示范</h1><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/DatabindingConvert/master/doc/1.gif"></p><h1 id="插件下载"><a href="#插件下载" class="headerlink" title="插件下载"></a>插件下载</h1><p><a href="https://github.com/LiushuiXiaoxia/DatabindingConvert/blob/master/DatabindingConvert_v0.1.jar?raw=true">DatabindingConvert_v0.1.jar</a></p><h1 id="后续优化"><a href="#后续优化" class="headerlink" title="后续优化"></a>后续优化</h1><ul><li>布局代码转换后，自动格式化代码</li><li>创建带模板的Databinding文件</li></ul><h1 id="版本更新"><a href="#版本更新" class="headerlink" title="版本更新"></a>版本更新</h1><ul><li>v0.0.1 完成基本的布局转换</li></ul>]]></content>
      
      
      <categories>
          
          <category> Plugin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Andorid Studio plugin </tag>
            
            <tag> Databinding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Http网络开发神兵利器</title>
      <link href="/2016/12/25/Android-Net/"/>
      <url>/2016/12/25/Android-Net/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-Http网络开发神兵利器"><a href="#Android-Http网络开发神兵利器" class="headerlink" title="Android Http网络开发神兵利器"></a>Android Http网络开发神兵利器</h1><hr><p>本人在Android移动端开发已经有不少年的经验，经历颇多，感受颇深，特写下此文记录下在Android Http网络开发中的各种工具使用，如果有其他想法和建议，欢迎前来交流 <a href="mailto:&#x78;&#105;&#x61;&#113;&#x69;&#117;&#x6c;&#x65;&#105;&#x40;&#x31;&#x32;&#54;&#x2e;&#99;&#x6f;&#x6d;">&#x78;&#105;&#x61;&#113;&#x69;&#117;&#x6c;&#x65;&#105;&#x40;&#x31;&#x32;&#54;&#x2e;&#99;&#x6f;&#x6d;</a> 。 本人文笔较差，请不要见怪。</p><p>Android开发的时候，很多APP都是基于网络请求的，大部分应用都是基于http的，少部分是基于Socket的，本文主要介绍Android Http开发的主要实践和工具。</p><p>本文最先发表于<a href="https://github.com/LiushuiXiaoxia/AndroidHttp">Github</a>，如有转载，请注明转载出处。</p><span id="more"></span><h1 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h1><p>说起Http网络请求，那么要介绍下Http协议，我在公司面试的时候也很喜欢问这个问题。很多做好了3-5年的工程师，竟然不知道Http协议，只知道怎么调用类库，不知道原理。</p><p>作为一个有追求的程序员，Http协议还是需要了解的。知其然知其所以然，在了解Http协议的情况下，才能在实际开发中灵活运用和优化。</p><p>这里有篇 <a href="http://www.cnblogs.com/ranyonsue/p/5984001.html">文章</a> ，Http协议介绍的很详细。</p><h2 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h2><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p><p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p><p>HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。</p><p>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidHttp/master/doc/http_request_response.jpg"></p><h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><p>1、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p><p>2、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p><p>3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p><p>4.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p><p>5、支持B/S及C/S模式。</p><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidHttp/master/doc/http_request.png" alt="Http请求消息结构"></p><p>上图是一个Http请求消息结构，我们可以使用抓包工具抓取网络请求,因为是Get请求，所以后面没有请求数据</p><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;562f25980001b1b106000338.jpg HTTP&#x2F;1.1Host    img.mukewang.comUser-Agent    Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;51.0.2704.106 Safari&#x2F;537.36Accept    image&#x2F;webp,image&#x2F;*,*&#x2F;*;q&#x3D;0.8Referer    http:&#x2F;&#x2F;www.imooc.com&#x2F;Accept-Encoding    gzip, deflate, sdchAccept-Language    zh-CN,zh;q&#x3D;0.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.</p><p>GET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。</p><p>第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息</p><p>从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等</p><p>第三部分：空行，请求头部后面的空行是必须的</p><p>即使第四部分的请求数据为空，也必须有空行。</p><p>第四部分：请求数据也叫主体，可以添加任意的其他数据。</p><p>这个例子的请求数据为空。</p><p>下面这个例子是Post方式。</p><pre class="line-numbers language-none"><code class="language-none">POST &#x2F; HTTP1.1Host:www.wrox.comUser-Agent:Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)Content-Type:application&#x2F;x-www-form-urlencodedContent-Length:40Connection: Keep-Alivename&#x3D;Professional%20Ajax&amp;publisher&#x3D;Wiley<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一部分：请求行，第一行明了是post请求，以及http1.1版本。</p><p>第二部分：请求头部，第二行至第六行。</p><p>第三部分：空行，第七行的空行。</p><p>第四部分：请求数据，第八行。</p><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><p>一般情况下，服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息。</p><p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidHttp/master/doc/http_reponse.jpg" alt="Http响应消息结构"></p><pre class="line-numbers language-none"><code class="language-none">HTTP&#x2F;1.1 200 OKDate: Fri, 22 May 2009 06:07:21 GMTContent-Type: text&#x2F;html; charset&#x3D;UTF-8&lt;html&gt;      &lt;head&gt;&lt;&#x2F;head&gt;      &lt;body&gt;            &lt;!--body goes here--&gt;      &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。</p><p>第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）</p><p>第二部分：消息报头，用来说明客户端要使用的一些附加信息</p><p>第二行和第三行为消息报头，<br>Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8</p><p>第三部分：空行，消息报头后面的空行是必须的</p><p>第四部分：响应正文，服务器返回给客户端的文本信息。</p><p>空行后面的html部分为响应正文。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:</p><p>1xx：指示信息–表示请求已接收，继续处理</p><p>2xx：成功–表示请求已被成功接收、理解、接受</p><p>3xx：重定向–要完成请求必须进行更进一步的操作</p><p>4xx：客户端错误–请求有语法错误或请求无法实现</p><p>5xx：服务器端错误–服务器未能实现合法的请求</p><p>常见状态码：</p><pre class="line-numbers language-none"><code class="language-none">200 OK                        &#x2F;&#x2F; 客户端请求成功400 Bad Request               &#x2F;&#x2F; 客户端请求有语法错误，不能被服务器所理解401 Unauthorized              &#x2F;&#x2F; 请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用403 Forbidden                 &#x2F;&#x2F; 服务器收到请求，但是拒绝提供服务404 Not Found                 &#x2F;&#x2F; 请求资源不存在，eg：输入了错误的URL500 Internal Server Error     &#x2F;&#x2F; 服务器发生不可预期的错误503 Server Unavailable        &#x2F;&#x2F; 服务器当前不能处理客户端的请求，一段时间后可能恢复正常<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p>根据HTTP标准，HTTP请求可以使用多种请求方法。<br>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。<br>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p><pre class="line-numbers language-none"><code class="language-none">GET     请求指定的页面信息，并返回实体主体。HEAD     类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头POST     向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和&#x2F;或已有资源的修改。PUT     从客户端向服务器传送的数据取代指定的文档的内容。DELETE      请求服务器删除指定的页面。CONNECT     HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器。OPTIONS     允许客户端查看服务器的性能。TRACE     回显服务器收到的请求，主要用于测试或诊断。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>HTTP消息由客户端到服务器的请求和服务器到客户端的响应组成。请求消息和响应消息都是由开始行（对于请求消息，开始行就是请求行，对于响应消息，开始行就是状态行），消息报头（可选），空行（只有CRLF的行），消息正文（可选）组成。</p><p>HTTP消息报头包括普通报头、请求报头、响应报头、实体报头。<br>每一个报头域都是由名字+“：”+空格+值 组成，消息报头域的名字是大小写无关的。</p><h1 id="网络请求库"><a href="#网络请求库" class="headerlink" title="网络请求库"></a>网络请求库</h1><p>下面介绍几个常见的Android http网路开发的工具库。</p><h2 id="URLConnection"><a href="#URLConnection" class="headerlink" title="URLConnection"></a>URLConnection</h2><p>URLConnection是Java JDK中自带的网络请求类，使用的场景不多，因为使用比较繁琐，直接使用底层IO流进行开发，需要了解Http协议才能很好的使用，很多时候需要自己封装，不方便。一般的一些提供第三方服务的sdk会使用，一是为了保证sdk体积大小，二是减少不必要的第三方库引入。</p><p>这里不做详细介绍， <a href="http://www.blogjava.net/supercrsky/articles/247449.html">这里有一篇博可以详细介绍了</a> 。</p><h2 id="Apache-HttpClient"><a href="#Apache-HttpClient" class="headerlink" title="Apache HttpClient"></a>Apache HttpClient</h2><p>HttpClient是Apache Jakarta Common下的子项目，用来提供高效的、最新的、功能丰富的支持HTTP协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。HttpClient已经应用在很多的项目中，比如Apache Jakarta上很著名的另外两个开源项目Cactus和HTMLUnit都使用了HttpClient。</p><p>HttpClient相比传统JDK自带的URLConnection，增加了易用性和灵活性，它不仅是客户端发送Http请求变得容易，而且也方便了开发人员测试接口（基于Http协议的），即提高了开发的效率，也方便提高代码的健壮性。</p><p>Android在低版本的系统Api中也有Httpclient相关类，但是后来就已经废弃,相关资料可以 <a href="https://developer.android.com/reference/org/apache/http/client/package-summary.html">参考这里</a>.</p><p><a href="http://blog.csdn.net/wangpeng047/article/details/19624529">HttpClient相关博客</a></p><h2 id="Volley"><a href="#Volley" class="headerlink" title="Volley"></a>Volley</h2><p><a href="https://developer.android.com/training/volley/index.html">Android Volley</a> 是在2013年Google I/O大会上推出了一个新的网络通信框架——Volley。Volley可是说是把AsyncHttpClient和Universal-Image-Loader的优点集于了一身，既可以像AsyncHttpClient一样非常简单地进行HTTP通信，也可以像Universal-Image-Loader一样轻松加载网络上的图片。除了简单易用之外，Volley在性能方面也进行了大幅度的调整，它的设计目标就是非常适合去进行数据量不大，但通信频繁的网络操作，而对于大数据量的网络操作，比如说下载文件等，Volley的表现就会非常糟糕。</p><p>有 <a href="http://blog.csdn.net/guolin_blog/article/details/12452307">资料</a> 指出Volley在进行网络请求时，在Android 2.3及以上版本，使用的是HttpURLConnection，而在Android 2.2及以下版本，使用的是HttpClient。主要是因为HttpURLConnection存在相关bug。</p><p><a href="http://blog.csdn.net/guolin_blog/article/details/17482095">Volley相关资料</a></p><p><a href="http://blog.csdn.net/guolin_blog/article/details/12452307">Volley相关资料</a></p><h2 id="OkHttp-amp-Retrofit"><a href="#OkHttp-amp-Retrofit" class="headerlink" title="OkHttp &amp; Retrofit"></a>OkHttp &amp; Retrofit</h2><p>OkHttpSquare公司开源的处理网络请求的开源项目,是安卓端最火热的轻量级框架，用于替代HttpUrlConnection和Apache HttpClient。最新的版本是OkHttp3，Github地址在 <a href="https://github.com/square/okhttp">这里</a> 。</p><p>Retrofit也是是Square公司开发的一款针对Android网络请求的框架，Retrofit2底层基于OkHttp实现的，OkHttp现在已经得到Google官方认可，大量的app都采用OkHttp做网络请求， <a href="https://github.com/square/retrofit">Github地址</a> 。</p><p>网络上也有很多关于OkHttp、Retrofit的示例和资料，而且是目前Android移动端最流行的框架，还是很值得了解一下，在这里就不做详细介绍。</p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h2><p>Charles是一个HTTP代理服务器,HTTP监视器,反转代理服务器·它允许一个开发者查看所有连接互联网的HTTP通信·这些包括request、response、headers（包含cookies与caching信息），由于笔者的开发机器是Mac，所以只介绍了Charles，Windows开发环境的同学可以使用fiddler。</p><p><a href="http://blog.devtang.com/2015/11/14/charles-introduction/">Charles介绍</a></p><p>Charles 主要的功能包括：</p><blockquote><p>截取 Http 和 Https 网络封包。</p></blockquote><blockquote><p>支持网络请求调试，设置断点，方便调试</p></blockquote><blockquote><p>支持重发网络请求，方便后端调试。</p></blockquote><blockquote><p>支持修改网络请求参数。</p></blockquote><blockquote><p>支持网络请求的截获并动态修改。</p></blockquote><blockquote><p>支持模拟弱网。</p></blockquote><p>上面介绍了，可以使用Charles方便设置断点，方便调试，可以很容易的修改数据包，这样可以动态修改数据，mock api接口，在实际开发过程中很有用。</p><p><a href="http://blog.csdn.net/guijiaoba/article/details/43198503">Charles Mock 数据</a></p><h2 id="PostMan-amp-Paw"><a href="#PostMan-amp-Paw" class="headerlink" title="PostMan &amp; Paw"></a>PostMan &amp; Paw</h2><p>上面介绍了网络抓包工具Charles，先介绍2款模拟http请求的软件。</p><p>Postman是一款功能强大的网页调试与发送网页HTTP请求的Chrome插件,使用很简单。</p><p>下图模拟发送知乎Api的网络请求。</p><p><code>http://news-at.zhihu.com/api/4/themes</code></p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidHttp/master/doc/post_man.png"></p><p><a href="https://www.getpostman.com/">Postman官网</a></p><p><a href="http://chromecj.com/web-development/2014-09/60.html">Postman资料</a></p><p>Paw 也是类似于Postman的一款模拟http请求的软件，只不过postman依赖于chrome，经常需要点击2此才可以打开postman，所以个人更加喜欢paw，下图是paw请求知乎api的示例。BTW, paw是一款收费的软件，不过么网上也有破解的，在这里就不介绍如何获取了，反正大家都懂的。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidHttp/master/doc/paw.png"></p><p><a href="https://paw.cloud/">Paw 官网</a></p><p><a href="https://yq.aliyun.com/articles/29772">Paw 使用教程</a></p><h2 id="Chrome-Dev-Tools"><a href="#Chrome-Dev-Tools" class="headerlink" title="Chrome Dev Tools"></a>Chrome Dev Tools</h2><p>Chrome dev tools是Google Chrome浏览器中自带一块调试工具。如果你是做软件开发的，基本都了解过。</p><p>虽然Chrome dev tools 在web开发中使用很多，但是在移动端中也是有用到的，这个后面再介绍。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidHttp/master/doc/chrome_dev_tools.png"></p><p><a href="https://developer.chrome.com/devtools">Chrome dev tools 相关资料</a></p><p><a href="https://github.com/GoogleChrome/devtools-docs">Chrome dev tools 相关资料</a></p><p><a href="https://segmentfault.com/a/1190000000683599">Chrome dev tools 相关资料</a></p><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>curl也是和上面poastman与paw功能类似的，不过没有和上面两款放在一起讲是因为curl比较重要，而且具有统一标准性与方便性。</p><p>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。</p><p>还是原先的例子，请求知乎的api。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidHttp/master/doc/curl.png"></p><p>很简单在curl命令直接加入url即可发送网络请求。</p><p>为什么有postman和paw这么友好的软件后，还需要介绍的curl呢，因为curl是一个命令，是文本，是字符串，当你其他同事开发联调的时候，直接通过im工具发送即可，这样网络请求就能很容移动复现。很多的上面介绍的charles、paw、google dev tool都支持把某一条请求导出为curl命令。这就相当于curl是一个标准，可以在不同机器上面复用，所以了解和使用curl是很有必要的。比如联调开发时候，服务器某个api调试不通过，需要与服务器同学沟通与复习，你直接丢一个curl语句即可，如果对方很懂，那么会觉的你很专业，如果对方不懂，顺便可以装个逼。</p><p><a href="http://www.cnblogs.com/gbyukg/p/3326825.html">curl 资料</a></p><p><a href="https://curl.haxx.se/">curl 官网</a></p><h1 id="OkHttp相关"><a href="#OkHttp相关" class="headerlink" title="OkHttp相关"></a>OkHttp相关</h1><p>前面介绍了OkHttp，下面介绍几个基于OkHttp拦截器机制衍生出的常用的工具。</p><h2 id="logging-interceptor"><a href="#logging-interceptor" class="headerlink" title="logging-interceptor"></a>logging-interceptor</h2><p>开发中经常需要对网络请求进行查看，抓包是可以的，不过现在很多app都是全栈https，想要抓包就没有那么容易了，那么最简单的还是打日志。</p><p><code>logging-interceptor</code>就是干这个事的，在初始化okhttpclient的时候，添加下这个拦截器，那么所有的网络请求会被记录下来。</p><p><a href="https://github.com/square/okhttp/wiki/Interceptors">相关资料</a></p><p><a href="https://github.com/ihsanbal/LoggingInterceptor">相关资料</a></p><h2 id="Stetho"><a href="#Stetho" class="headerlink" title="Stetho"></a>Stetho</h2><p>Stetho是Facebook开源的一个工具，前面说过Google Chrome dev tools，那么Stetho可以让Chrome调试Android，监控网络请求。</p><p>同时Stetho还支持查看数据库，SharePreference等，而这个前提是必须root，查看view树，使用Stetho也可以做到。</p><p>网上也有很多也有很多相关资料，这里不介绍详细使用。</p><p><a href="https://github.com/facebook/stetho">stetho github</a></p><p><a href="http://www.jianshu.com/p/03da9f91f41f">stetho 相关资料</a></p><h2 id="chuck"><a href="#chuck" class="headerlink" title="chuck"></a>chuck</h2><p>上面介绍的两款工具，一种是需要在logcat中查看网络请求数据，一种是需要在chrome中查看数据，有没有办法不需要借助任何第三方工具，直接查看呢，答案是肯定的。chuck是我最近关注比较高的一个开源工具，而且很快的就在项目中使用了。</p><p>下面官网的截图，可以先了解下chuck的使用效果。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidHttp/master/doc/chuck.gif"></p><p>在高版本的Android中，还支持多屏显示，那么一边操作一边显示。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidHttp/master/doc/multiwindow.gif"></p><p>集成的方法都很简单，只需要在初始化OkHttpClient的时候，添加对应的拦截器即可。</p><p>Gradle依赖</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">dependencies &#123;   debugCompile &#39;com.readystatesoftware.chuck:library:1.0.4&#39;   releaseCompile &#39;com.readystatesoftware.chuck:library-no-op:1.0.4&#39; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>添加拦截器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">OkHttpClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChuckInterceptor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/jgilfelt/chuck">Chuck github</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><p>RESTful一种软件架构风格，设计风格而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p>REST（英文：Representational State Transfer，简称REST）描述了一个架构样式的网络系统，比如 web 应用程序。它首次出现在 2000 年 Roy Fielding 的博士论文中，他是 HTTP 规范的主要编写者之一。在目前主流的三种Web服务交互方案中，REST相比于SOAP（Simple Object Access protocol，简单对象访问协议）以及XML-RPC更加简单明了，无论是对URL的处理还是对Payload的编码，REST都倾向于用更加简单轻量的方法设计和实现。值得注意的是REST并没有一个明确的标准，而更像是一种设计的风格。</p><p>虽然本文的主题是介绍Android Http开发的相关内容，并且RESTful是服务端的一种概念。但是我觉的，还是有很必要了解的，最起码可以作为判断你的服务端小伙伴给的接口是否满足RESTful的标准的依据。</p><p>后面贴一篇<a href="http://www.ruanyifeng.com/blog/2011/09/restful">阮一峰大神的博客介绍RESTful</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>上面介绍了很多种关于网络请求的工具，具体可以分为这几类。</p><p>HTTP接口调用工具，这类工具主要是模拟客户端，发起网络请求，方便调试服务器接口。</p><ul><li>postman</li><li>paw</li><li>curl</li></ul><p>抓包工具，这类工具不光适合Android开发，也适合其他网络开发，工具使用简单，不过在使用前需要做少许代理配置。WiresShark是一款更加强大的工具，使用比较复杂，而且比较底层，所以在本文中就没介绍，有兴趣的同学可以自己查阅相关资料。</p><ul><li>Charles</li><li>Fiddler</li><li>WiresShark</li></ul><p>Android Http请求工具库，这类工具类变化很快，经常会过个几年就会有新的一种工具替换，但是本质思想还是一样的，都是基于URLConnection和HTTP做了一次封装调用。</p><ul><li>URLConnection</li><li>HttpClient</li><li>Volley</li><li>OkHttp</li></ul><p>OkHttp相关，这类工具都是基于OkHttp做了二次封装开发，这个主要归功于OkHttp强大开发模式和架构，开发人员可以方便对OkHttp进行自定义和二次开发。工具很强大，不过也有局限性，只能依附于OkHttp的框架，不利于扩展到其他平台和工具。</p><ul><li>logging-interceptor</li><li>Stetho</li><li>Chuck</li></ul><h2 id="工具对比"><a href="#工具对比" class="headerlink" title="工具对比"></a>工具对比</h2><p>上面介绍好几款可以监控App网络请求的工具，那么如何根据实际情况，选择一款适合自己项目和团队的工具呢？</p><h3 id="Charles-amp-Fiddler"><a href="#Charles-amp-Fiddler" class="headerlink" title="Charles &amp; Fiddler"></a>Charles &amp; Fiddler</h3><p>这类工具不依赖与平台和App开发的工具库，不管你是Android、还是iOS，不管使用的是Volley，还是OkHttp都是可以监控的，同时还支持HTTP的调试，方便mock数据，简直是神器。</p><p>不过也有少许缺点，比如是不支持Https，如果你的app使用的是https接口，那么这类工具一般情况是不能使用的，不过也有办法，比如把charles的证书设置为根证书，则可以检测到。但是也是有局限的，如果app设置强制校验https证书，此类方法还是不可行。</p><p>因为平台无光，可检测到某个手机设备上面的全部网络请求，数据量有时候会很大，如果经常调试某一个app，那么域名一般是固定的，可进行相对应的过滤。</p><h3 id="OkHttp相关-1"><a href="#OkHttp相关-1" class="headerlink" title="OkHttp相关"></a>OkHttp相关</h3><p>通过标题可以看成，此类工具必须依附于OKHttp，那么只能满足Android平台并且App的网络请求库是OkHttp。上面介绍的三款工具，可以选择性的选择其中几种或者是全部，暂时还没有发现冲突的地方。因为是直接嵌入到代码中，那么Https也是可以监控到。同时也只能监控当前设备上的当前应用，不可以检测其他的app。</p><p>不过在发布线上或者正式颁布时，需要手动去除这些代码，否则会有很大麻烦，同时也会把相关的隐私和安全反馈给使用的用户。</p><p>好了，上面就是关于App网络情况的监控工具比较，建议两个大分类都可以几个或者多个配合使用，具体问题在根据具体工具使用，方便问题解决与网络监控。</p><h2 id="其他建议"><a href="#其他建议" class="headerlink" title="其他建议"></a>其他建议</h2><p>上面介绍的OkHttp的相关的工具，都是需要在初始化OkHttpClient的时候，手动添加对应的拦截器，如果忘记添加则不会产生效果。</p><p>那么可以使用现在流行的Aop技术，在编译时候，会在所有调用OkHttpClient的地方，自动添加，保证不会忘记，如果你的App还是用其他的sdk，sdk里面也是用OKhttp的话，也会监控到sdk里面的网络请求，不少大厂已经使用了这种方法，然后收集请求数据到后端，方便管理和优化。</p><p>下面简单介绍相关代码:</p><p>首先集成<code>gradle_plugin_android_aspectjx</code>插件</p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">dependencies &#123;    classpath &#39;com.hujiang.aspectjx:gradle-android-plugin-aspectjx:1.0.9&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后定义Aspectj切入点</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>stetho<span class="token punctuation">.</span>okhttp3<span class="token punctuation">.</span></span><span class="token class-name">StethoInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>readystatesoftware<span class="token punctuation">.</span>chuck<span class="token punctuation">.</span></span><span class="token class-name">ChuckInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Pointcut</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">me<span class="token punctuation">.</span>ele<span class="token punctuation">.</span>breakfastapp<span class="token punctuation">.</span></span><span class="token class-name">AppContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">okhttp3<span class="token punctuation">.</span></span><span class="token class-name">OkHttpClient</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OkHttpAspect</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"call(public okhttp3.OkHttpClient build())"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"build()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">aroundBuild</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> target <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">)</span> target<span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">addNetworkInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StethoInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">addNetworkInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChuckInterceptor</span><span class="token punctuation">(</span><span class="token class-name">AppContext</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么在代码编译的时候，会自动插入字节码。</p><p>Aop相关资料:</p><p><a href="http://blog.csdn.net/innost/article/details/49387395">Aop介绍</a></p><p><a href="http://blog.csdn.net/crazy__chen/article/details/52014672">Aop资料</a></p><p><a href="http://www.jianshu.com/p/bb9343e8af17">Assectj</a></p><p><a href="https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx">Assectj Gradle 插件</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.cnblogs.com/ranyonsue/p/5984001.html">Http博客</a></p><p><a href="http://www.cnblogs.com/li0803/archive/2008/11/03/1324746.html">Http博客</a></p><p><a href="http://www.blogjava.net/supercrsky/articles/247449.html">URLConnection</a></p><p><a href="https://developer.android.com/reference/org/apache/http/client/package-summary.html">Android HttpClient</a></p><p><a href="http://blog.csdn.net/wangpeng047/article/details/19624529">HttpClient相关博客</a></p><p><a href="http://blog.csdn.net/guolin_blog/article/details/17482095">Volley相关资料</a></p><p><a href="http://blog.csdn.net/guolin_blog/article/details/12452307">Volley相关资料</a></p><p><a href="https://github.com/square/okhttp">OkHttp</a></p><p><a href="https://github.com/square/retrofit">Retrofit Github地址</a></p><p><a href="http://blog.devtang.com/2015/11/14/charles-introduction/">Charles介绍</a></p><p><a href="http://blog.csdn.net/guijiaoba/article/details/43198503">Charles Mock 数据</a></p><p><a href="https://www.getpostman.com/">Postman官网</a></p><p><a href="http://chromecj.com/web-development/2014-09/60.html">Postman资料</a></p><p><a href="https://paw.cloud/">Paw 官网</a></p><p><a href="https://yq.aliyun.com/articles/29772">Paw 使用教程</a></p><p><a href="https://developer.chrome.com/devtools">Chrome dev tools 相关资料</a></p><p><a href="https://github.com/GoogleChrome/devtools-docs">Chrome dev tools 相关资料</a></p><p><a href="https://segmentfault.com/a/1190000000683599">Chrome dev tools 相关资料</a></p><p><a href="http://www.cnblogs.com/gbyukg/p/3326825.html">curl 资料</a></p><p><a href="https://curl.haxx.se/">curl 官网</a></p><p><a href="https://github.com/square/okhttp/wiki/Interceptors">Interceptors相关资料</a></p><p><a href="https://github.com/ihsanbal/LoggingInterceptor">LoggingInterceptors相关资料</a></p><p><a href="https://github.com/facebook/stetho">stetho github</a></p><p><a href="http://www.jianshu.com/p/03da9f91f41f">stetho 相关资料</a></p><p><a href="https://github.com/jgilfelt/chuck">Chuck github</a></p><p><a href="http://www.ruanyifeng.com/blog/2011/09/restful">RESTful</a></p><p><a href="http://blog.csdn.net/innost/article/details/49387395">Aop介绍</a></p><p><a href="http://blog.csdn.net/crazy__chen/article/details/52014672">Aop资料</a></p><p><a href="http://www.jianshu.com/p/bb9343e8af17">Assectj</a></p><p><a href="https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx">Assectj Gradle 插件</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Http </tag>
            
            <tag> OkHttp </tag>
            
            <tag> Curl </tag>
            
            <tag> PostMan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android测试总结</title>
      <link href="/2016/07/25/Android-Test/"/>
      <url>/2016/07/25/Android-Test/</url>
      
        <content type="html"><![CDATA[<h1 id="Android测试总结"><a href="#Android测试总结" class="headerlink" title="Android测试总结"></a>Android测试总结</h1><hr><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>最近整理了Android测试方便的只是，主要涉及代码测试和自动化测试。</p><span id="more"></span><h1 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h1><h2 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h2><p><a href="http://mycommons.cn/2016/07/19/JUnit%E6%B5%85%E8%B0%88/">JUnit浅谈</a></p><h2 id="Mockito"><a href="#Mockito" class="headerlink" title="Mockito"></a>Mockito</h2><p><a href="http://mycommons.cn/2016/07/19/Mockito%E6%B5%85%E8%B0%88/">Mockito浅谈</a></p><h2 id="Mockwebserver"><a href="#Mockwebserver" class="headerlink" title="Mockwebserver"></a>Mockwebserver</h2><p><a href="http://mycommons.cn/2016/07/25/MockWebServer/">MockWebServer</a></p><h1 id="Android自动化测试"><a href="#Android自动化测试" class="headerlink" title="Android自动化测试"></a>Android自动化测试</h1><h2 id="Android-monkey"><a href="#Android-monkey" class="headerlink" title="Android monkey"></a>Android monkey</h2><p><a href="http://mycommons.cn/2016/07/19/Android-Monkey%E6%95%B4%E7%90%86/">Android Monkey整理</a></p><h2 id="Android-monkeyrunner"><a href="#Android-monkeyrunner" class="headerlink" title="Android monkeyrunner"></a>Android monkeyrunner</h2><p><a href="http://mycommons.cn/2016/07/25/AndroidMonkeyRunner/">Android monkeyrunner整理</a></p><h2 id="Android-UIAutomator"><a href="#Android-UIAutomator" class="headerlink" title="Android UIAutomator"></a>Android UIAutomator</h2><p><a href="http://mycommons.cn/2016/07/25/Android-UIAutomator/">Android UIAutomator浅谈</a></p><h2 id="Android-Espresso"><a href="#Android-Espresso" class="headerlink" title="Android Espresso"></a>Android Espresso</h2><p><a href="http://mycommons.cn/2016/07/25/Android-Espresso/">Android Espresso浅谈</a></p><h2 id="自动化测试示例"><a href="#自动化测试示例" class="headerlink" title="自动化测试示例"></a>自动化测试示例</h2><p>下面示例一个Android项目，就是一个简单的登录页面，依次使用上面介绍的自动化测试方案测试界面。</p><p>首先是界面布局:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/activity_main<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.mycommons.testcase.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/edtUserName<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Input user name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/edtPasswd<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Input password<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>contentDescription</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Input password<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textPassword<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/btnLogin<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Login<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其次是页面代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>mycommons<span class="token punctuation">.</span>testcase</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">AppCompatActivity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">EditText</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">Toast</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">EditText</span> edtUserName<span class="token punctuation">;</span>    <span class="token class-name">EditText</span> edtPasswd<span class="token punctuation">;</span>    <span class="token class-name">Button</span> btnLogin<span class="token punctuation">;</span>    <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token class-name">String</span> passwd<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        edtUserName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>edtUserName<span class="token punctuation">)</span><span class="token punctuation">;</span>        edtPasswd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>edtPasswd<span class="token punctuation">)</span><span class="token punctuation">;</span>        btnLogin <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btnLogin<span class="token punctuation">)</span><span class="token punctuation">;</span>        btnLogin<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                userName <span class="token operator">=</span> edtUserName<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                passwd <span class="token operator">=</span> edtPasswd<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">doLogin</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token class-name">String</span> passwd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>userName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">showToast</span><span class="token punctuation">(</span><span class="token string">"User name invalidate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>passwd<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">showToast</span><span class="token punctuation">(</span><span class="token string">"Password invalidate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">doLogin</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token class-name">String</span> passwd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">showToast</span><span class="token punctuation">(</span><span class="token string">"Login success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">SuccessActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">showToast</span><span class="token punctuation">(</span><span class="token string">"Login fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">showToast</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Monkey"><a href="#Monkey" class="headerlink" title="Monkey"></a>Monkey</h3><p>Monkey只是检查使用下shell命令即可。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">adb shell monkey -p cn.mycommons.testcase -v 50000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Monkey-Runner"><a href="#Monkey-Runner" class="headerlink" title="Monkey Runner"></a>Monkey Runner</h3><p>Monkey Runner提供的是一个python文件，然后调用monkeyrunner命令即可。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ monkeyrunner test_case.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Imports the monkeyrunner modules used by this program</span><span class="token keyword">from</span> com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>monkeyrunner <span class="token keyword">import</span> MonkeyRunner<span class="token punctuation">,</span> MonkeyDevice<span class="token comment"># Connects to the current device, returning a MonkeyDevice object</span><span class="token keyword">print</span> <span class="token string">'wait for device connection.'</span>device <span class="token operator">=</span> MonkeyRunner<span class="token punctuation">.</span>waitForConnection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'connect device success.'</span><span class="token comment"># Takes a screenshot</span>result <span class="token operator">=</span> device<span class="token punctuation">.</span>takeSnapshot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'takeSnapshot success.'</span><span class="token comment"># Writes the screenshot to a file</span>result<span class="token punctuation">.</span>writeToFile<span class="token punctuation">(</span><span class="token string">'./test_case1.png'</span><span class="token punctuation">,</span><span class="token string">'png'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'save image to file success.'</span><span class="token comment"># input user name</span>device<span class="token punctuation">.</span>touch<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">380</span><span class="token punctuation">,</span><span class="token string">'DOWN_AND_UP'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'touch user name'</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>device<span class="token punctuation">.</span>press<span class="token punctuation">(</span><span class="token string">"KEYCODE_DEL"</span><span class="token punctuation">,</span><span class="token string">'DOWN_AND_UP'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'delete user name'</span>device<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'input admin to user name'</span><span class="token comment"># input passwd </span>device<span class="token punctuation">.</span>touch<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">'DOWN_AND_UP'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'touch password'</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>device<span class="token punctuation">.</span>press<span class="token punctuation">(</span><span class="token string">"KEYCODE_DEL"</span><span class="token punctuation">,</span><span class="token string">'DOWN_AND_UP'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'delete password'</span>device<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'input admin to password'</span><span class="token comment"># press login button</span>device<span class="token punctuation">.</span>touch<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">680</span><span class="token punctuation">,</span><span class="token string">'DOWN_AND_UP'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'press login button'</span>MonkeyRunner<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># Takes a screenshot</span>result <span class="token operator">=</span> device<span class="token punctuation">.</span>takeSnapshot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'takeSnapshot success.'</span><span class="token comment"># Writes the screenshot to a file</span>result<span class="token punctuation">.</span>writeToFile<span class="token punctuation">(</span><span class="token string">'./test_case2.png'</span><span class="token punctuation">,</span><span class="token string">'png'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'save image to file success.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="UiAutomator"><a href="#UiAutomator" class="headerlink" title="UiAutomator"></a>UiAutomator</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>mycommons<span class="token punctuation">.</span>testcase</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Context</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Build</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span><span class="token class-name">InstrumentationRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>filters<span class="token punctuation">.</span></span><span class="token class-name">SdkSuppress</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">AndroidJUnit4</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>uiautomator<span class="token punctuation">.</span></span><span class="token class-name">By</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>uiautomator<span class="token punctuation">.</span></span><span class="token class-name">UiDevice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>uiautomator<span class="token punctuation">.</span></span><span class="token class-name">UiObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>uiautomator<span class="token punctuation">.</span></span><span class="token class-name">UiObjectNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>uiautomator<span class="token punctuation">.</span></span><span class="token class-name">UiSelector</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>uiautomator<span class="token punctuation">.</span></span><span class="token class-name">Until</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span></span><span class="token class-name">Matchers</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span>assertThat<span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">AndroidJUnit4</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SdkSuppress</span><span class="token punctuation">(</span>minSdkVersion <span class="token operator">=</span> <span class="token class-name">Build</span><span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>JELLY_BEAN_MR2<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivityTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> BASIC_SAMPLE_PACKAGE <span class="token operator">=</span> <span class="token string">"cn.mycommons.testcase"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LAUNCH_TIMEOUT <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> STRING_TO_BE_TYPED <span class="token operator">=</span> <span class="token string">"UiAutomator"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">UiDevice</span> mDevice<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mDevice <span class="token operator">=</span> <span class="token class-name">UiDevice</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">InstrumentationRegistry</span><span class="token punctuation">.</span><span class="token function">getInstrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mDevice<span class="token punctuation">.</span><span class="token function">pressHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Wait for launcher</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> launcherPackage <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">getLauncherPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertThat</span><span class="token punctuation">(</span>launcherPackage<span class="token punctuation">,</span> <span class="token class-name">Matchers</span><span class="token punctuation">.</span><span class="token function">notNullValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mDevice<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token class-name">Until</span><span class="token punctuation">.</span><span class="token function">hasObject</span><span class="token punctuation">(</span><span class="token class-name">By</span><span class="token punctuation">.</span><span class="token function">pkg</span><span class="token punctuation">(</span>launcherPackage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">depth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LAUNCH_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token class-name">InstrumentationRegistry</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Intent</span> intent <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLaunchIntentForPackage</span><span class="token punctuation">(</span>BASIC_SAMPLE_PACKAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>FLAG_ACTIVITY_CLEAR_TASK<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Wait for the app to appear</span>        mDevice<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token class-name">Until</span><span class="token punctuation">.</span><span class="token function">hasObject</span><span class="token punctuation">(</span><span class="token class-name">By</span><span class="token punctuation">.</span><span class="token function">pkg</span><span class="token punctuation">(</span>BASIC_SAMPLE_PACKAGE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">depth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LAUNCH_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogin1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UiObjectNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UiObject</span> login <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UiObject</span> edtUserName <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Input user name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UiObject</span> edtPasswd <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">descriptionContains</span><span class="token punctuation">(</span><span class="token string">"Input password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtUserName<span class="token punctuation">.</span><span class="token function">clearTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtPasswd<span class="token punctuation">.</span><span class="token function">clearTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtUserName<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtPasswd<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        login<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mDevice<span class="token punctuation">.</span><span class="token function">waitForWindowUpdate</span><span class="token punctuation">(</span><span class="token class-name">BuildConfig</span><span class="token punctuation">.</span>FLAVOR<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogin2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UiObjectNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UiObject</span> login <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UiObject</span> edtUserName <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Input user name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UiObject</span> edtPasswd <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">descriptionContains</span><span class="token punctuation">(</span><span class="token string">"Input password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtUserName<span class="token punctuation">.</span><span class="token function">clearTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtPasswd<span class="token punctuation">.</span><span class="token function">clearTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtUserName<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtPasswd<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        login<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogin3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UiObjectNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UiObject</span> login <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UiObject</span> edtUserName <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Input user name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UiObject</span> edtPasswd <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">descriptionContains</span><span class="token punctuation">(</span><span class="token string">"Input password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtUserName<span class="token punctuation">.</span><span class="token function">clearTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtPasswd<span class="token punctuation">.</span><span class="token function">clearTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtUserName<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtPasswd<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        login<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogin4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UiObjectNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UiObject</span> login <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UiObject</span> edtUserName <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Input user name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UiObject</span> edtPasswd <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">descriptionContains</span><span class="token punctuation">(</span><span class="token string">"Input password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtUserName<span class="token punctuation">.</span><span class="token function">clearTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtPasswd<span class="token punctuation">.</span><span class="token function">clearTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtUserName<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtPasswd<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        login<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogin5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UiObjectNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UiObject</span> login <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UiObject</span> edtUserName <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Input user name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UiObject</span> edtPasswd <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">descriptionContains</span><span class="token punctuation">(</span><span class="token string">"Input password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtUserName<span class="token punctuation">.</span><span class="token function">clearTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtPasswd<span class="token punctuation">.</span><span class="token function">clearTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtUserName<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtPasswd<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        login<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogin6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UiObjectNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UiObject</span> login <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UiObject</span> edtUserName <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Input user name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UiObject</span> edtPasswd <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">descriptionContains</span><span class="token punctuation">(</span><span class="token string">"Input password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtUserName<span class="token punctuation">.</span><span class="token function">clearTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtPasswd<span class="token punctuation">.</span><span class="token function">clearTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtUserName<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"abcedf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtPasswd<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        login<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogin7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UiObjectNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UiObject</span> login <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UiObject</span> edtUserName <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Input user name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UiObject</span> edtPasswd <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">descriptionContains</span><span class="token punctuation">(</span><span class="token string">"Input password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtUserName<span class="token punctuation">.</span><span class="token function">clearTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtPasswd<span class="token punctuation">.</span><span class="token function">clearTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtUserName<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"abcedf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edtPasswd<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"abcedf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        login<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Espressor"><a href="#Espressor" class="headerlink" title="Espressor"></a>Espressor</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>mycommons<span class="token punctuation">.</span>testcase</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>espresso<span class="token punctuation">.</span></span><span class="token class-name">Espresso</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>espresso<span class="token punctuation">.</span>action<span class="token punctuation">.</span></span><span class="token class-name">ViewActions</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>espresso<span class="token punctuation">.</span>matcher<span class="token punctuation">.</span></span><span class="token class-name">ViewMatchers</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>rule<span class="token punctuation">.</span></span><span class="token class-name">ActivityTestRule</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">AndroidJUnit4</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Rule</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">AndroidJUnit4</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivityEspressoTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Rule</span>    <span class="token keyword">public</span> <span class="token class-name">ActivityTestRule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MainActivity</span><span class="token punctuation">></span></span> testRule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActivityTestRule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withContentDescription</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>edtUserName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">typeText</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>edtPasswd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">typeText</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btnLogin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogin1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>edtUserName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">typeText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>edtPasswd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">typeText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btnLogin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogin2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>edtUserName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">typeText</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>edtPasswd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">typeText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btnLogin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogin3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>edtUserName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">typeText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>edtPasswd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">typeText</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btnLogin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogin4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>edtUserName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">typeText</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>edtPasswd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">typeText</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btnLogin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogin5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>edtUserName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">typeText</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>edtPasswd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">typeText</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btnLogin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">ViewActions</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自动化测试总结"><a href="#自动化测试总结" class="headerlink" title="自动化测试总结"></a>自动化测试总结</h2><ul><li><p>Monkey<br>准确来说，这不算是自动化测试，因为其只能产生随机的事件，无法按照既定的步骤操作；</p></li><li><p>Monkeyrunner<br>优点：操作最为简单，可以录制测试脚本，可视化操作；<br>缺点：主要生成坐标的自动化操作，移植性不强，功能最为局限，上面代码中已经显示出来，完全使用的数字坐标，移植到另外一个设备，则不能运行。</p></li><li><p> UiAutomator<br>优点：可以对所有操作进行自动化，操作简单；<br>缺点：Android版本需要高于4.3，无法根据控件ID操作，相对来说功能较为局限，但也够用了；</p></li><li><p>Espresso<br>优点：主要针对某一个APK进行自动化测试，APK可以有源码，也可以没有源码，功能强大；<br>缺点：针对APK操作，因此操作相对复杂；</p></li></ul><p><strong>总结：</strong>由上面介绍可以有这样的结论：测试某个APK，可以选择Espresso；测试过程可能涉及多个APK，选择UiAutomator；一些简单的测试，选择Monkeyrunner；</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android测试 </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MockWebServer</title>
      <link href="/2016/07/25/MockWebServer/"/>
      <url>/2016/07/25/MockWebServer/</url>
      
        <content type="html"><![CDATA[<h1 id="MockWebServer"><a href="#MockWebServer" class="headerlink" title="MockWebServer"></a>MockWebServer</h1><hr><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://github.com/square/okhttp/tree/master/mockwebserver">MockWebServer Github地址</a></p><p>按照官方文档定义，MockWebServer是一个可脚本化的用于测试HTTP客户端的Web服务器。<br>主要用于测试你的应用在进行HTTP、HTTPS请求时是否按照预期的行为动作。使用该工具，你可以验证应用的请求是否符合预期，你可以选择返回的响应。</p><p>MockWebServer包含了所有的HTTP栈，所以可以测试所有的事。甚至可以直接将真实Web服务器中的HTTP响应内容复制过来，以创建相应的测试用例。此外，还可以测试应用在糟糕的网络环境下的表现，比如500错误或者响应返回缓慢。</p><span id="more"></span><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>MockWebServer使用方法和Mockito类似，按照如下步骤。</p><ul><li>编写模拟脚本</li><li>运行应用程序代码</li><li>验证做出的请求是否符合预期</li></ul><p>下面是官方给的示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建一个 MockWebServer</span>    <span class="token class-name">MockWebServer</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MockWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置响应</span>    server<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MockResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MockResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"sup, bra?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MockResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"yo dog"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 启动服务</span>    <span class="token comment">// Start the server.</span>    server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置服务端的URL，客户端请求中使用</span>    <span class="token class-name">HttpUrl</span> baseUrl <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"/v1/chat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 运行你的应用程序代码，进行HTTP请求</span>    <span class="token comment">// 响应会按照上面设置中放入队列的顺序被返回</span>    <span class="token class-name">Chat</span> chat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chat</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    chat<span class="token punctuation">.</span><span class="token function">loadMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"hello, world!"</span><span class="token punctuation">,</span> chat<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chat<span class="token punctuation">.</span><span class="token function">loadMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chat<span class="token punctuation">.</span><span class="token function">loadMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">""</span>                <span class="token operator">+</span> <span class="token string">"hello, world!\n"</span>                <span class="token operator">+</span> <span class="token string">"sup, bra?\n"</span>                <span class="token operator">+</span> <span class="token string">"yo dog"</span><span class="token punctuation">,</span> chat<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 可选：确认你的应用做出了正确的请求</span>    <span class="token class-name">RecordedRequest</span> request1 <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">takeRequst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"/v1/chat/messages/"</span><span class="token punctuation">,</span> request1<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>request1<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RecordedRequest</span> request2 <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">takeRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"/v1/chat/message/2"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RecordedRequest</span> request3 <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">takeRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"/v1/chat/message/3"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭服务，因为不能重用</span>    server<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单元测试时候，可以把 server 作为一个字段，然后在 tearDown() 方法中关闭服务。</p><h1 id="Api接口"><a href="#Api接口" class="headerlink" title="Api接口"></a>Api接口</h1><h2 id="模拟Response-MockResponse"><a href="#模拟Response-MockResponse" class="headerlink" title="模拟Response(MockResponse)"></a>模拟Response(MockResponse)</h2><p>MockResponse 可以默认返回http code是200的response，相依可以设置字符串、输入流、字节数组，设置可以设置Header。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MockResponse</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MockResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json,charset=utf-8"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>MockResponse还可以模拟低速率网络的情况。这一点在测试超时和交互式测试时非常有用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">throttleBody</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="记录请求（RecordedRequest）"><a href="#记录请求（RecordedRequest）" class="headerlink" title="记录请求（RecordedRequest）"></a>记录请求（RecordedRequest）</h2><p>校验请求的请求方法、路径、HTTP版本、请求体、请求头。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RecordedRequest</span> request <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">takeRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"POST /v1/chat/send HTTP/1.1"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"application/json; charset=utf-8"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getUtf8Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="转发器（Dispatcher）"><a href="#转发器（Dispatcher）" class="headerlink" title="转发器（Dispatcher）"></a>转发器（Dispatcher）</h2><p>默认情况下 MockWebServer 使用队列来指定响应。另外，可以根据需要使用另外一种响应策略，可以通过转发器来处理器，可以通过请求的路径来选择转发策略。比如，我们可以过滤请求替代 server.enqueue()。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Dispatcher</span> dispatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">MockResponse</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token class-name">RecordedRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/v1/login/auth/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MockResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setResponseCode</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"v1/check/version/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MockResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setResponseCode</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"version=9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/v1/profile/info"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MockResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setResponseCode</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"&#123;\\\"info\\\":&#123;\\\"name\":\"Lucas Albuquerque\",\"age\":\"21\",\"gender\":\"male\"&#125;&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MockResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setResponseCode</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">setDispatcher</span><span class="token punctuation">(</span>dispatcher<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h1><ul><li>Gradle</li></ul><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">testCompile <span class="token string">'com.squareup.okhttp3:mockwebserver:(insert latest version)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Maven</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.squareup.okhttp3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mockwebserver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>(insert latest version)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> Web Server Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Espresso</title>
      <link href="/2016/07/25/Android-Espresso/"/>
      <url>/2016/07/25/Android-Espresso/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-Espresso浅谈"><a href="#Android-Espresso浅谈" class="headerlink" title="Android Espresso浅谈"></a>Android Espresso浅谈</h1><hr><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Espresso 也是一款自动化测试的框架，和UiAutomator类似。<br>基本上使用流程和UiAutomator类似。</p><span id="more"></span><p><strong>步骤：</strong></p><ul><li>查找元素：找到UI上测试的元素位置，比如找到一个按钮</li><li>执行操作：给某个元素执行一个动作，比如触发按钮的点击事件</li><li>检查结果：判断做出的动作是否符合期望，比如按钮点击后，是否符合我的期望</li></ul><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>集成Espresso，首先需要保证App项目已经依赖了Gradle Testing。然后在gradle中添加如下依赖即可。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    androidTestCompile <span class="token string">'com.android.support.test.espresso:espresso-core:2.2.1'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="创建Test-Case"><a href="#创建Test-Case" class="headerlink" title="创建Test Case"></a>创建Test Case</h1><p>创建一个Espresso测试用例可以按照如下步骤。</p><ul><li>找到你想测试的Activity，然后使用<code>onView</code>或者<code>onData</code>来查找UI元素</li><li>模拟用户用户点击，可以调用 <code>ViewInteraction.perform() </code>or<code> DataInteraction.perform()</code>,为了顺序的给同一个组件执行一些列的动作，可以使用链式的调用方式调用，中间使用逗号分隔，相当于传入一个动作数组。</li></ul><p>下面是官方网站给出的一个例子，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">onView</span><span class="token punctuation">(</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>my_view<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// withId(R.id.my_view) is a ViewMatcher</span>        <span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment">// click() is a ViewAction</span>        <span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token function">isDisplayed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// matches(isDisplayed()) is a ViewAssertion</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="使用ActivityTestRule创建Espresso"><a href="#使用ActivityTestRule创建Espresso" class="headerlink" title="使用ActivityTestRule创建Espresso"></a>使用ActivityTestRule创建Espresso</h2><p>接下来的步骤是，使用ActivityTestRule来创建Espresso测试用例，下面是代码示例。<code>@RunWith(AndroidJUnit4.class)</code>设置测试代码怎么运行，<code>@Rule</code>来标注一个测试的Rule。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>android<span class="token punctuation">.</span>testing<span class="token punctuation">.</span>espresso<span class="token punctuation">.</span></span><span class="token class-name">BasicSample</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Rule</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>rule<span class="token punctuation">.</span></span><span class="token class-name">ActivityTestRule</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">AndroidJUnit4</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">AndroidJUnit4</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@LargeTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChangeTextBehaviorTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mStringToBetyped<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Rule</span>    <span class="token keyword">public</span> <span class="token class-name">ActivityTestRule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MainActivity</span><span class="token punctuation">></span></span> mActivityRule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActivityTestRule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>            <span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initValidString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Specify a valid string.</span>        mStringToBetyped <span class="token operator">=</span> <span class="token string">"Espresso"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeText_sameActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Type text and then press the button.</span>        <span class="token function">onView</span><span class="token punctuation">(</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>editTextUserInput<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">typeText</span><span class="token punctuation">(</span>mStringToBetyped<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">closeSoftKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">onView</span><span class="token punctuation">(</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>changeTextBt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Check that the text was changed.</span>        <span class="token function">onView</span><span class="token punctuation">(</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>textToBeChanged<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token function">withText</span><span class="token punctuation">(</span>mStringToBetyped<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用ActivityInstrumentationTestCase2来创建Espresso"><a href="#使用ActivityInstrumentationTestCase2来创建Espresso" class="headerlink" title="使用ActivityInstrumentationTestCase2来创建Espresso"></a>使用ActivityInstrumentationTestCase2来创建Espresso</h2><p>相对于上的测试用例，也可以使用ActivityInstrumentationTestCase2来创建Esprsso测试用例。<br>下面是代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span><span class="token class-name">InstrumentationRegistry</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyEspressoTest</span> <span class="token keyword">extends</span> <span class="token class-name">ActivityInstrumentationTestCase2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyActivity</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">MyActivity</span> mActivity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyEspressoTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">MyActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">injectInstrumentation</span><span class="token punctuation">(</span><span class="token class-name">InstrumentationRegistry</span><span class="token punctuation">.</span><span class="token function">getInstrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mActivity <span class="token operator">=</span> <span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="访问UI元素"><a href="#访问UI元素" class="headerlink" title="访问UI元素"></a>访问UI元素</h1><p>对比与UiAutomator，Espresso可以直接根据id来访问元素，同样Espresso也是可以根据文本信息匹配进行访问的。<br>Espresso 提供<code>onView()</code>方法来访问UI元素，然后在执行一种操作，最后再进行验证。<br>下面的一个代码示例，表示访问一个EditText，输入一些内容，关闭输入法，最后点击按钮。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testChangeText_sameActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Type text and then press the button.</span>    <span class="token function">onView</span><span class="token punctuation">(</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>editTextUserInput<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">typeText</span><span class="token punctuation">(</span>STRING_TO_BE_TYPED<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">closeSoftKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">onView</span><span class="token punctuation">(</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>changeTextButton<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>withId()</code>进行Id访问，也可以使用<code>withText()</code>进行文本匹配。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withText</span><span class="token punctuation">(</span><span class="token string">"Sign-in"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Espresso</span><span class="token punctuation">.</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token class-name">ViewMatchers</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_signin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结合 Hamcrest库中的<code>Matchers</code>，可以使用<code>allOf()</code>来组合选择多个UI元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">onView</span><span class="token punctuation">(</span><span class="token function">allOf</span><span class="token punctuation">(</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_signin<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">withText</span><span class="token punctuation">(</span><span class="token string">"Sign-in"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">onView</span><span class="token punctuation">(</span><span class="token function">allOf</span><span class="token punctuation">(</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_signin<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">not</span><span class="token punctuation">(</span><span class="token function">withText</span><span class="token punctuation">(</span><span class="token string">"Sign-out"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="AdapterView"><a href="#AdapterView" class="headerlink" title="AdapterView"></a>AdapterView</h1><p>当查找<code>AdapterView</code>之类的组件的时候，它的子元素都是动态生成的，如果要访问这些类的子元素，使用<code>onView</code>就会起不了作用。<br>Espresso提供<code>onData</code>方法来获取<code>DataInteraction</code>对象，然后在来访问目标元素。Espresso处理加载目标元素到当前层次结构。</p><p><strong>注意</strong><br><code>onData() </code>方法不检查找到的元素是否匹配，它只是检查当前层次结构，如果不匹配会抛出<code>NoMatchingviewExption</code>异常。</p><p>下面代码演示，使用<code>onData</code>方法加载指定字符串数组的，找到对应的元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">onData</span><span class="token punctuation">(</span><span class="token function">allOf</span><span class="token punctuation">(</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token function">instanceOf</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">hasEntry</span><span class="token punctuation">(</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token class-name">LongListActivity</span><span class="token punctuation">.</span>ROW_TEXT<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">is</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>`</p><h1 id="执行动作"><a href="#执行动作" class="headerlink" title="执行动作"></a>执行动作</h1><p>调用<code> ViewInteraction.perform()</code>和 <code>DataInteraction.perform() </code>，可以模拟用户执行UI元素的操作。可以指定一个或者多个动作，Espresso会按照指定的顺序，依次发送动作事件，这些动作是线程安全的。<br><code> ViewActions</code> 可以提供一些列常用的方法，我们可以利用写方法来操作UI元素。</p><ul><li>ViewActions.click():  点击事件</li><li>ViewActions.typeText(): 输入指定的文字内容</li><li>ViewActions.scrollTo():  滑动</li><li>ViewActions.pressKey():  按下按键</li><li>ViewActions.clearText():  清空文本</li></ul><h1 id="校验结果"><a href="#校验结果" class="headerlink" title="校验结果"></a>校验结果</h1><p>调用<code>ViewInteraction.check()</code>和<code>DataInteraction.check()</code>方法，可以判断UI元素的状态，如果断言失败，会抛出<code>AssertionFailedError</code>异常。<br>比如：</p><ul><li>doesNotExist: 断言某一个view不存在</li><li>matches:  断言某个view存在，且符合一列的匹配</li><li>selectedDescendentsMatch :断言指定的子元素存在，且他们的状态符合一些列的匹配</li></ul><p>如下所示，代码表示查找的元素是否符合指定的字符串。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testChangeText_sameActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Type text and then press the button.</span>    <span class="token comment">// Check that the text was changed.</span>    <span class="token function">onView</span><span class="token punctuation">(</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>textToBeChanged<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token function">withText</span><span class="token punctuation">(</span>STRING_TO_BE_TYPED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://developer.android.com/training/testing/ui-testing/espresso-testing.html">https://developer.android.com/training/testing/ui-testing/espresso-testing.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android Espresso </tag>
            
            <tag> Android测试 </tag>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android UIAutomator</title>
      <link href="/2016/07/25/Android-UIAutomator/"/>
      <url>/2016/07/25/Android-UIAutomator/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-UIAutomator浅谈"><a href="#Android-UIAutomator浅谈" class="headerlink" title="Android UIAutomator浅谈"></a>Android UIAutomator浅谈</h1><hr><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Uiautomator是谷歌推出的，用于UI自动化测试的工具，也就是普通的手工测试，点击每个控件元素看看输出的结果是否符合预期。比如登陆界面分别输入正确和错误的用户名密码然后点击登陆按钮看看是否能否登陆以及是否有错误提示等。</p><p>注意：UI Automator测试框架是基于instrumentation的API，运行在Android JunitRunner 之上，同时UI Automator Test只运行在Android 4.3(API level 18)以上版本。</p><span id="more"></span><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>集成UI Automator，首先需要保证App项目已经依赖了Gradle Testing。然后在gradle中添加如下依赖即可。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    androidTestCompile <span class="token string">'com.android.support.test.uiautomator:uiautomator-v18:2.1.1'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="UI元素查找"><a href="#UI元素查找" class="headerlink" title="UI元素查找"></a>UI元素查找</h1><p>在Android开发中，可以种findViewById来找到相应的控件，但是UI Automator是用来测试界面的，如果也是用相同的方式，那么则会依赖很大。UI Automator使用一种类似的方式来查找元素。UI Automator是根据元素的text、hint、contentDescription等属性进行查找的，为了使UI Automator能够获取到以上的属性值，请测试的UI界面是可以访问的，同时UI Automator也是可以访问这些控件元素。</p><p>可以使用uiautomatorviewer，来获取界面元素的层次关系以及各个元素的属性，然后UI Automator就可以根据这些属性信息查找到对应的控件元素。</p><p>获取步骤：</p><ul><li>启动设备上的App</li><li>把设备连接到开发机器上</li><li>打开Android sdk目录，<code>&lt;android-sdk&gt;/tools/</code>。</li><li>启动<code>uiautomatorviewer</code><br>然后可以操作<code>uiautomatorviewer</code></li><li>点击Device ScreenShot，稍等一会，获取到了屏幕的快照，界面右侧是当前界面的布局结构以及属性信息。</li></ul><p><strong>确保UI可以访问</strong><br>上面介绍过，UI Automator是根据元素的text、hint、contentDescription等属性进行查找的，所以需要尽可能给布局中的元素添加上面的属性。有时候程序员需要自定义一些控件，那么请实现<code>AccessibilityNodeProvider</code>，以确保可以正常使用。</p><h2 id="访问UI控件"><a href="#访问UI控件" class="headerlink" title="访问UI控件"></a>访问UI控件</h2><p>UI Automator 提供 <code>UiDevice</code> 类，这个类提供一些方法，可以获取设备的一些状态和属性，同时可以执行一系列动作来操作设备。下面是一个示例，演示怎么样货到 UiDevice 对象，以及按下Home键。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">AndroidJUnit4</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>uiautomator<span class="token punctuation">.</span></span><span class="token class-name">UiDevice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>uiautomator<span class="token punctuation">.</span></span><span class="token class-name">By</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>test<span class="token punctuation">.</span>uiautomator<span class="token punctuation">.</span></span><span class="token class-name">Until</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">AndroidJUnit4</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SdkSuppress</span><span class="token punctuation">(</span>minSdkVersion <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChangeTextBehaviorTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> BASIC_SAMPLE_PACKAGE            <span class="token operator">=</span> <span class="token string">"com.example.android.testing.uiautomator.BasicSample"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LAUNCH_TIMEOUT <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> STRING_TO_BE_TYPED <span class="token operator">=</span> <span class="token string">"UiAutomator"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">UiDevice</span> mDevice<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startMainActivityFromHomeScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Initialize UiDevice instance</span>        mDevice <span class="token operator">=</span> <span class="token class-name">UiDevice</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">InstrumentationRegistry</span><span class="token punctuation">.</span><span class="token function">getInstrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Start from the home screen</span>        mDevice<span class="token punctuation">.</span><span class="token function">pressHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Wait for launcher</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> launcherPackage <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">getLauncherPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertThat</span><span class="token punctuation">(</span>launcherPackage<span class="token punctuation">,</span> <span class="token function">notNullValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mDevice<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token class-name">Until</span><span class="token punctuation">.</span><span class="token function">hasObject</span><span class="token punctuation">(</span><span class="token class-name">By</span><span class="token punctuation">.</span><span class="token function">pkg</span><span class="token punctuation">(</span>launcherPackage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">depth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                LAUNCH_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Launch the app</span>        <span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token class-name">InstrumentationRegistry</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Intent</span> intent <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getLaunchIntentForPackage</span><span class="token punctuation">(</span>BASIC_SAMPLE_PACKAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Clear out any previous instances</span>        intent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>FLAG_ACTIVITY_CLEAR_TASK<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Wait for the app to appear</span>        mDevice<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token class-name">Until</span><span class="token punctuation">.</span><span class="token function">hasObject</span><span class="token punctuation">(</span><span class="token class-name">By</span><span class="token punctuation">.</span><span class="token function">pkg</span><span class="token punctuation">(</span>BASIC_SAMPLE_PACKAGE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">depth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                LAUNCH_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 然后可以使用<code>findObject()</code>方法来获取到界面的UI控件，如下所示，在一个设备上面找出符合规则的UI元素，然后再执行一些列动作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">UiObject</span> cancelButton <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Cancel"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">"android.widget.Button"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UiObject</span> okButton <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">"android.widget.Button"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Simulate a user-click on the OK button, if found.</span><span class="token keyword">if</span><span class="token punctuation">(</span>okButton<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> okButton<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    okButton<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指定一个选择器"><a href="#指定一个选择器" class="headerlink" title="指定一个选择器"></a>指定一个选择器</h2><p>有时候，需要访问一个特定的UI组件，可以使用<code>UiSelector </code>。这个类提供一些列的方法，帮助找到特定的UI组件。<br>当有多个符合条件UI元素被查找到时候，第一个元素会不是使用。可以传递的一个UiSelector到构造方法，相当于链式访问。如果没有元素被找到，那么会抛出<code>UiAutomatorObjectNotFoundException </code>异常。<br>也可以使用<code>childSelector() </code>来帅选多个UiSelector对象，如下所示，ListView的子元素中有很多是相同的，可以根据这个方法，选择某一个子元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">UiObject</span> appItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UiObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">"android.widget.ListView"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">childSelector</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Apps"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的查找还是很复杂，我们可以根据ResourceId 来替代文本查找的方式。文本找到的方式很脆弱，而且很容使测试失败，而且当语言环境变化了，文本查找就需要对照多个翻译版本的文本了。</p><h1 id="执行动作"><a href="#执行动作" class="headerlink" title="执行动作"></a>执行动作</h1><p>当我们根据文本查找找到对应的文本元素后，我们就可以随心所欲的进行操作了。</p><ul><li>click() 点击</li><li>dragTo() 拖动当前元素</li><li>setText() 设置文本</li><li>swipeUp() 向上滑动，同理也有向下、向左、向右，swipeDown、swipeLeft、swipeRight。</li></ul><p>UI Automator也可以提供一个Context，这样可以方便发送一个Intent或者是启动一个Activity。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Launch a simple calculator app</span>    <span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token function">getInstrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Intent</span> intent <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getLaunchIntentForPackage</span><span class="token punctuation">(</span>CALC_PACKAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    intent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>FLAG_ACTIVITY_CLEAR_TASK<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Clear out any previous instances</span>    context<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    mDevice<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token class-name">Until</span><span class="token punctuation">.</span><span class="token function">hasObject</span><span class="token punctuation">(</span><span class="token class-name">By</span><span class="token punctuation">.</span><span class="token function">pkg</span><span class="token punctuation">(</span>CALC_PACKAGE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">depth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><p>可以使用<code> UiCollection</code>来模拟用户对一组UI控件进行操作，比如有时候界面上有个Listview。为了创建一个 UiCollection 对象，可以指定一个UiSelector搜索这个UI容器上满足这个条件的所有子元素。</p><p>下面代码演示如何在一个一组控件中进行操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">UiCollection</span> videos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UiCollection</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">"android.widget.FrameLayout"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Retrieve the number of videos in this collection:</span><span class="token keyword">int</span> count <span class="token operator">=</span> videos<span class="token punctuation">.</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">"android.widget.LinearLayout"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Find a specific video and simulate a user-click on it</span><span class="token class-name">UiObject</span> video <span class="token operator">=</span> videos<span class="token punctuation">.</span><span class="token function">getChildByText</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">"android.widget.LinearLayout"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Cute Baby Laughing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>video<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Simulate selecting a checkbox that is associated with the video</span><span class="token class-name">UiObject</span> checkBox <span class="token operator">=</span> video<span class="token punctuation">.</span><span class="token function">getChild</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">"android.widget.Checkbox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>checkBox<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> checkbox<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="操作可以滚动的UI元素"><a href="#操作可以滚动的UI元素" class="headerlink" title="操作可以滚动的UI元素"></a>操作可以滚动的UI元素</h2><p>可以使用<code>UiScrollable </code>来模拟用户对界面的滚动操作（水平、垂直）,这个技术可以帮我们搞定，当某个界面没有显示的时候，我们可以滚动界面，把那个界面显示出来。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">UiScrollable</span> settingsItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UiScrollable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">"android.widget.ListView"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UiObject</span> about <span class="token operator">=</span> settingsItem<span class="token punctuation">.</span><span class="token function">getChildByText</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">"android.widget.LinearLayout"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"About tablet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>about<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="校验结果"><a href="#校验结果" class="headerlink" title="校验结果"></a>校验结果</h1><p>Ui Automator 是基于InstrumentationTestCase，同样InstrumentationTestCase是基于标准的JUnit Assert，那么我们也可以使用标准的JUnit Assert来判断结果。</p><p>下面代码片段演示一个计算器的代码，以及验证结果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CALC_PACKAGE <span class="token operator">=</span> <span class="token string">"com.myexample.calc"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTwoPlusThreeEqualsFive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Enter an equation: 2 + 3 = ?</span>    mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">packageName</span><span class="token punctuation">(</span>CALC_PACKAGE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resourceId</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">packageName</span><span class="token punctuation">(</span>CALC_PACKAGE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resourceId</span><span class="token punctuation">(</span><span class="token string">"plus"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">packageName</span><span class="token punctuation">(</span>CALC_PACKAGE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resourceId</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UiSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">packageName</span><span class="token punctuation">(</span>CALC_PACKAGE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resourceId</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Verify the result = 5</span>    <span class="token class-name">UiObject</span> result <span class="token operator">=</span> mDevice<span class="token punctuation">.</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token class-name">By</span><span class="token punctuation">.</span><span class="token function">res</span><span class="token punctuation">(</span>CALC_PACKAGE<span class="token punctuation">,</span> <span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Api"><a href="#Api" class="headerlink" title="Api"></a>Api</h1><h2 id="UiDevice"><a href="#UiDevice" class="headerlink" title="UiDevice"></a>UiDevice</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span><span class="token function">clearLastTraversedText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Clears the text from the last UI traversal event.</span><span class="token comment">// 清楚上次UI遍历的事件？</span><span class="token keyword">boolean</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token comment">// Perform a click at arbitrary coordinates specified by the user</span><span class="token comment">// 根据坐标点击</span><span class="token keyword">boolean</span><span class="token function">drag</span><span class="token punctuation">(</span><span class="token keyword">int</span> startX<span class="token punctuation">,</span> <span class="token keyword">int</span> startY<span class="token punctuation">,</span> <span class="token keyword">int</span> endX<span class="token punctuation">,</span> <span class="token keyword">int</span> endY<span class="token punctuation">,</span> <span class="token keyword">int</span> steps<span class="token punctuation">)</span><span class="token comment">// Performs a swipe from one coordinate to another coordinate.</span><span class="token comment">// 拖动</span><span class="token keyword">void</span><span class="token function">dumpWindowHierarchy</span><span class="token punctuation">(</span><span class="token class-name">File</span> dest<span class="token punctuation">)</span><span class="token comment">// Dump the current window hierarchy to a File.</span><span class="token comment">// dump当前的层次化结构到文件中</span><span class="token keyword">void</span><span class="token function">dumpWindowHierarchy</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span><span class="token comment">// Dump the current window hierarchy to an OutputStream.</span><span class="token comment">// dump当前的层次化结构到流中</span><span class="token keyword">void</span><span class="token function">dumpWindowHierarchy</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span><span class="token comment">// This method is deprecated. Use dumpWindowHierarchy(File) or dumpWindowHierarchy(OutputStream) instead.</span><span class="token comment">// dump当前的层次化结构到文件中</span><span class="token class-name">UiObject2</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token class-name">BySelector</span> selector<span class="token punctuation">)</span><span class="token comment">// Returns the first object to match the selector criteria.</span><span class="token comment">// 根据BySelector查找</span><span class="token class-name">UiObject</span><span class="token function">findObject</span><span class="token punctuation">(</span><span class="token class-name">UiSelector</span> selector<span class="token punctuation">)</span><span class="token comment">// Returns a UiObject which represents a view that matches the specified selector criteria.</span><span class="token comment">// 根据UiSelector 查找</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UiObject2</span><span class="token punctuation">></span></span><span class="token function">findObjects</span><span class="token punctuation">(</span><span class="token class-name">BySelector</span> selector<span class="token punctuation">)</span><span class="token comment">// Returns all objects that match the selector criteria.</span><span class="token comment">// 根据BySelector查找</span><span class="token keyword">void</span><span class="token function">freezeRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Disables the sensors and freezes the device rotation at its current rotation state.</span><span class="token comment">// 冻结旋转的状态</span><span class="token class-name">String</span><span class="token function">getCurrentActivityName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// This method is deprecated. The results returned should be considered unreliable</span><span class="token comment">// 获取当前Activity的名字，已经被废弃</span><span class="token class-name">String</span><span class="token function">getCurrentPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Retrieves the name of the last package to report accessibility events.</span><span class="token comment">// 获取当前package</span><span class="token keyword">int</span><span class="token function">getDisplayHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Gets the height of the display, in pixels.</span><span class="token keyword">int</span><span class="token function">getDisplayRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Returns the current rotation of the display, as defined in Surface</span><span class="token class-name">Point</span><span class="token function">getDisplaySizeDp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Returns the display size in dp (device-independent pixel) The returned display size is adjusted per screen rotation.</span><span class="token keyword">int</span><span class="token function">getDisplayWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Gets the width of the display, in pixels.</span><span class="token keyword">static</span> <span class="token class-name">UiDevice</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// This method is deprecated. Should use getInstance(Instrumentation) instead. This version hides UiDevice's dependency on having an Instrumentation reference and is prone to misuse.</span><span class="token comment">// 获取一个对象</span><span class="token keyword">static</span> <span class="token class-name">UiDevice</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Instrumentation</span> instrumentation<span class="token punctuation">)</span><span class="token comment">// Retrieves a singleton instance of UiDevice</span><span class="token class-name">String</span><span class="token function">getLastTraversedText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Retrieves the text from the last UI traversal event received.</span><span class="token comment">// 获取上一次遍历的文本</span><span class="token class-name">String</span><span class="token function">getLauncherPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Retrieves default launcher package name</span><span class="token comment">// 获取运行的packagename</span><span class="token class-name">String</span><span class="token function">getProductName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Retrieves the product name of the device.</span><span class="token keyword">boolean</span><span class="token function">hasAnyWatcherTriggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Checks if any registered UiWatcher have triggered.</span><span class="token comment">// 检查是否有触发器触发</span><span class="token keyword">boolean</span><span class="token function">hasObject</span><span class="token punctuation">(</span><span class="token class-name">BySelector</span> selector<span class="token punctuation">)</span><span class="token comment">// Returns whether there is a match for the given selector criteria.</span><span class="token comment">// 是否有符合的条件的</span><span class="token keyword">boolean</span><span class="token function">hasWatcherTriggered</span><span class="token punctuation">(</span><span class="token class-name">String</span> watcherName<span class="token punctuation">)</span><span class="token comment">// Checks if a specific registered UiWatcher has triggered.</span><span class="token keyword">boolean</span><span class="token function">isNaturalOrientation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Check if the device is in its natural orientation.</span><span class="token keyword">boolean</span><span class="token function">isScreenOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Checks the power manager if the screen is ON.</span><span class="token keyword">boolean</span><span class="token function">openNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Opens the notification shade.</span><span class="token comment">// 打开通知</span><span class="token keyword">boolean</span><span class="token function">openQuickSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Opens the Quick Settings shade.</span><span class="token comment">// 打开设置</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token class-name">R</span><span class="token function">performActionAndWait</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> action<span class="token punctuation">,</span> <span class="token class-name">EventCondition</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> condition<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token comment">// Performs the provided action and waits for the condition to be met.</span><span class="token keyword">boolean</span><span class="token function">pressBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Simulates a short press on the BACK button.</span><span class="token keyword">boolean</span><span class="token function">pressDPadCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Simulates a short press on the CENTER button.</span><span class="token keyword">boolean</span><span class="token function">pressDPadDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Simulates a short press on the DOWN button.</span><span class="token keyword">boolean</span><span class="token function">pressDPadLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Simulates a short press on the LEFT button.</span><span class="token keyword">boolean</span><span class="token function">pressDPadRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Simulates a short press on the RIGHT button.</span><span class="token keyword">boolean</span><span class="token function">pressDPadUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Simulates a short press on the UP button.</span><span class="token keyword">boolean</span><span class="token function">pressDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Simulates a short press on the DELETE key.</span><span class="token keyword">boolean</span><span class="token function">pressEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Simulates a short press on the ENTER key.</span><span class="token keyword">boolean</span><span class="token function">pressHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Simulates a short press on the HOME button.</span><span class="token keyword">boolean</span><span class="token function">pressKeyCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> keyCode<span class="token punctuation">)</span><span class="token comment">// Simulates a short press using a key code.</span><span class="token keyword">boolean</span><span class="token function">pressKeyCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> keyCode<span class="token punctuation">,</span> <span class="token keyword">int</span> metaState<span class="token punctuation">)</span><span class="token comment">// Simulates a short press using a key code.</span><span class="token keyword">boolean</span><span class="token function">pressMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Simulates a short press on the MENU button.</span><span class="token keyword">boolean</span><span class="token function">pressRecentApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Simulates a short press on the Recent Apps button.</span><span class="token keyword">boolean</span><span class="token function">pressSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Simulates a short press on the SEARCH button.</span><span class="token keyword">void</span><span class="token function">registerWatcher</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">UiWatcher</span> watcher<span class="token punctuation">)</span><span class="token comment">// Registers a UiWatcher to run automatically when the testing framework is unable to find a match using a UiSelector.</span><span class="token keyword">void</span><span class="token function">removeWatcher</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token comment">// Removes a previously registered UiWatcher.</span><span class="token keyword">void</span><span class="token function">resetWatcherTriggers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Resets a UiWatcher that has been triggered.</span><span class="token keyword">void</span><span class="token function">runWatchers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// This method forces all registered watchers to run.</span><span class="token keyword">void</span><span class="token function">setCompressedLayoutHeirarchy</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> compressed<span class="token punctuation">)</span><span class="token comment">// Enables or disables layout hierarchy compression.</span><span class="token keyword">void</span><span class="token function">setOrientationLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Simulates orienting the device to the left and also freezes rotation by disabling the sensors.</span><span class="token comment">// 设置旋转方向</span><span class="token keyword">void</span><span class="token function">setOrientationNatural</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Simulates orienting the device into its natural orientation and also freezes rotation by disabling the sensors.</span><span class="token keyword">void</span><span class="token function">setOrientationRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Simulates orienting the device to the right and also freezes rotation by disabling the sensors.</span><span class="token keyword">void</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// This method simply presses the power button if the screen is ON else it does nothing if the screen is already OFF.</span><span class="token comment">// 关闭屏幕</span><span class="token keyword">boolean</span><span class="token function">swipe</span><span class="token punctuation">(</span><span class="token keyword">int</span> startX<span class="token punctuation">,</span> <span class="token keyword">int</span> startY<span class="token punctuation">,</span> <span class="token keyword">int</span> endX<span class="token punctuation">,</span> <span class="token keyword">int</span> endY<span class="token punctuation">,</span> <span class="token keyword">int</span> steps<span class="token punctuation">)</span><span class="token comment">// Performs a swipe from one coordinate to another using the number of steps to determine smoothness and speed.</span><span class="token keyword">boolean</span><span class="token function">swipe</span><span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token punctuation">]</span> segments<span class="token punctuation">,</span> <span class="token keyword">int</span> segmentSteps<span class="token punctuation">)</span><span class="token comment">// Performs a swipe between points in the Point array.</span><span class="token keyword">boolean</span><span class="token function">takeScreenshot</span><span class="token punctuation">(</span><span class="token class-name">File</span> storePath<span class="token punctuation">,</span> <span class="token keyword">float</span> scale<span class="token punctuation">,</span> <span class="token keyword">int</span> quality<span class="token punctuation">)</span><span class="token comment">// Take a screenshot of current window and store it as PNG The screenshot is adjusted per screen rotation</span><span class="token comment">// 截屏</span><span class="token keyword">boolean</span><span class="token function">takeScreenshot</span><span class="token punctuation">(</span><span class="token class-name">File</span> storePath<span class="token punctuation">)</span><span class="token comment">// Take a screenshot of current window and store it as PNG Default scale of 1.0f (original size) and 90% quality is used The screenshot is adjusted per screen rotation</span><span class="token keyword">void</span><span class="token function">unfreezeRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Re-enables the sensors and un-freezes the device rotation allowing its contents to rotate with the device physical rotation.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token class-name">R</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token class-name">SearchCondition</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> condition<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token comment">// Waits for given the condition to be met.</span><span class="token keyword">void</span><span class="token function">waitForIdle</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token comment">// Waits for the current application to idle.</span><span class="token keyword">void</span><span class="token function">waitForIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Waits for the current application to idle.</span><span class="token keyword">boolean</span><span class="token function">waitForWindowUpdate</span><span class="token punctuation">(</span><span class="token class-name">String</span> packageName<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token comment">// Waits for a window content update event to occur.</span><span class="token keyword">void</span><span class="token function">wakeUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// This method simulates pressing the power button if the screen is OFF else it does nothing if the screen is already ON.</span><span class="token comment">// 点亮屏幕</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="UiObject"><a href="#UiObject" class="headerlink" title="UiObject"></a>UiObject</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span><span class="token function">clearTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Clears the existing text contents in an editable field.</span><span class="token comment">// 清空输入接口</span><span class="token keyword">boolean</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Performs a click at the center of the visible bounds of the UI element represented by this UiObject.</span><span class="token comment">// 点击</span><span class="token keyword">boolean</span><span class="token function">clickAndWaitForNewWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Waits for window transitions that would typically take longer than the usual default timeouts.</span><span class="token comment">// 点击并等待新界面</span><span class="token keyword">boolean</span><span class="token function">clickAndWaitForNewWindow</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token comment">// Performs a click at the center of the visible bounds of the UI element represented by this UiObject and waits for window transitions.</span><span class="token comment">// 点击并等待新界面，设置等待时间</span><span class="token keyword">boolean</span><span class="token function">clickBottomRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Clicks the bottom and right corner of the UI element</span><span class="token comment">// 点击右下边</span><span class="token keyword">boolean</span><span class="token function">clickTopLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Clicks the top and left corner of the UI element</span><span class="token keyword">boolean</span><span class="token function">dragTo</span><span class="token punctuation">(</span><span class="token class-name">UiObject</span> destObj<span class="token punctuation">,</span> <span class="token keyword">int</span> steps<span class="token punctuation">)</span><span class="token comment">// Drags this object to a destination UiObject.</span><span class="token comment">// 拖动</span><span class="token keyword">boolean</span><span class="token function">dragTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> destX<span class="token punctuation">,</span> <span class="token keyword">int</span> destY<span class="token punctuation">,</span> <span class="token keyword">int</span> steps<span class="token punctuation">)</span><span class="token comment">// Drags this object to arbitrary coordinates.</span><span class="token keyword">boolean</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Check if view exists.</span><span class="token comment">// 判断是否存在</span><span class="token class-name">Rect</span><span class="token function">getBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Returns the view's bounds property.</span><span class="token comment">// 返回边界</span><span class="token class-name">UiObject</span><span class="token function">getChild</span><span class="token punctuation">(</span><span class="token class-name">UiSelector</span> selector<span class="token punctuation">)</span><span class="token comment">// Creates a new UiObject for a child view that is under the present UiObject.</span><span class="token comment">// 根据条件获取子元素</span><span class="token keyword">int</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Counts the child views immediately under the present UiObject.</span><span class="token comment">// 获取子元素数量</span><span class="token class-name">String</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Retrieves the className property of the UI element.</span><span class="token comment">// 获取当前元素的class name</span><span class="token class-name">String</span><span class="token function">getContentDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Reads the content_desc property of the UI element</span><span class="token class-name">UiObject</span><span class="token function">getFromParent</span><span class="token punctuation">(</span><span class="token class-name">UiSelector</span> selector<span class="token punctuation">)</span><span class="token comment">// Creates a new UiObject for a sibling view or a child of the sibling view, relative to the present UiObject.</span><span class="token class-name">String</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Reads the view's package property</span><span class="token keyword">final</span> <span class="token class-name">UiSelector</span><span class="token function">getSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Debugging helper.</span><span class="token class-name">String</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Reads the text property of the UI element</span><span class="token class-name">Rect</span><span class="token function">getVisibleBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Returns the visible bounds of the view.</span><span class="token comment">// 获取可见边界</span><span class="token keyword">boolean</span><span class="token function">isCheckable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Checks if the UI element's checkable property is currently true.</span><span class="token comment">// 是否可以点击</span><span class="token keyword">boolean</span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Check if the UI element's checked property is currently true</span><span class="token comment">// 是否已经选中</span><span class="token keyword">boolean</span><span class="token function">isClickable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Checks if the UI element's clickable property is currently true.</span><span class="token keyword">boolean</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Checks if the UI element's enabled property is currently true.</span><span class="token keyword">boolean</span><span class="token function">isFocusable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Check if the UI element's focusable property is currently true.</span><span class="token keyword">boolean</span><span class="token function">isFocused</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Check if the UI element's focused property is currently true</span><span class="token keyword">boolean</span><span class="token function">isLongClickable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Check if the view's long-clickable property is currently true</span><span class="token keyword">boolean</span><span class="token function">isScrollable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Check if the view's scrollable property is currently true</span><span class="token keyword">boolean</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Checks if the UI element's selected property is currently true.</span><span class="token keyword">boolean</span><span class="token function">longClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Long clicks the center of the visible bounds of the UI element</span><span class="token comment">// 长按</span><span class="token keyword">boolean</span><span class="token function">longClickBottomRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Long clicks bottom and right corner of the UI element</span><span class="token keyword">boolean</span><span class="token function">longClickTopLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Long clicks on the top and left corner of the UI element</span><span class="token keyword">boolean</span><span class="token function">performMultiPointerGesture</span><span class="token punctuation">(</span><span class="token class-name">PointerCoords</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> touches<span class="token punctuation">)</span><span class="token comment">// Performs a multi-touch gesture.</span><span class="token keyword">boolean</span><span class="token function">performTwoPointerGesture</span><span class="token punctuation">(</span><span class="token class-name">Point</span> startPoint1<span class="token punctuation">,</span> <span class="token class-name">Point</span> startPoint2<span class="token punctuation">,</span> <span class="token class-name">Point</span> endPoint1<span class="token punctuation">,</span> <span class="token class-name">Point</span> endPoint2<span class="token punctuation">,</span> <span class="token keyword">int</span> steps<span class="token punctuation">)</span><span class="token comment">// Generates a two-pointer gesture with arbitrary starting and ending points.</span><span class="token keyword">boolean</span><span class="token function">pinchIn</span><span class="token punctuation">(</span><span class="token keyword">int</span> percent<span class="token punctuation">,</span> <span class="token keyword">int</span> steps<span class="token punctuation">)</span><span class="token comment">// Performs a two-pointer gesture, where each pointer moves diagonally toward the other, from the edges to the center of this UiObject .</span><span class="token keyword">boolean</span><span class="token function">pinchOut</span><span class="token punctuation">(</span><span class="token keyword">int</span> percent<span class="token punctuation">,</span> <span class="token keyword">int</span> steps<span class="token punctuation">)</span><span class="token comment">// Performs a two-pointer gesture, where each pointer moves diagonally opposite across the other, from the center out towards the edges of the this UiObject.</span><span class="token keyword">boolean</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token comment">// Sets the text in an editable field, after clearing the field's content.</span><span class="token comment">// 设置输入内容</span><span class="token keyword">boolean</span><span class="token function">swipeDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> steps<span class="token punctuation">)</span><span class="token comment">// Performs the swipe down action on the UiObject.</span><span class="token keyword">boolean</span><span class="token function">swipeLeft</span><span class="token punctuation">(</span><span class="token keyword">int</span> steps<span class="token punctuation">)</span><span class="token comment">// Performs the swipe left action on the UiObject.</span><span class="token keyword">boolean</span><span class="token function">swipeRight</span><span class="token punctuation">(</span><span class="token keyword">int</span> steps<span class="token punctuation">)</span><span class="token comment">// Performs the swipe right action on the UiObject.</span><span class="token keyword">boolean</span><span class="token function">swipeUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> steps<span class="token punctuation">)</span><span class="token comment">// Performs the swipe up action on the UiObject.</span><span class="token keyword">boolean</span><span class="token function">waitForExists</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token comment">// Waits a specified length of time for a view to become visible.</span><span class="token keyword">boolean</span><span class="token function">waitUntilGone</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token comment">// Waits a specified length of time for a view to become undetectable.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>优点：</strong></p><ul><li>可以对所有操作进行自动化，操作简单</li><li>不需要对被测程序进行重签名，且，可以测试所有设备上的程序，比如<del>某APP，比如</del>拨号，比如~发信息等等</li><li>对于控件定位，要比robotium简单一点点</li></ul><p><strong>缺点：</strong></p><ul><li>Ui Automator需要android level 16以上才可以使用，因为在level 16及以上的API里面才带有uiautomator工具</li><li>如果想要使用resource-id定位控件，则需要level 18及以上才可以</li><li>对中文支持不好（不代表不支持，第三方jar可以实现）</li></ul><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://developer.android.com/training/testing/ui-testing/uiautomator-testing.html">https://developer.android.com/training/testing/ui-testing/uiautomator-testing.html</a>``</p>]]></content>
      
      
      <categories>
          
          <category> Android测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android测试 </tag>
            
            <tag> 自动化测试 </tag>
            
            <tag> Android UIAutomator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidMonkeyRunner</title>
      <link href="/2016/07/25/AndroidMonkeyRunner/"/>
      <url>/2016/07/25/AndroidMonkeyRunner/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-monkeyrunner整理"><a href="#Android-monkeyrunner整理" class="headerlink" title="Android monkeyrunner整理"></a>Android monkeyrunner整理</h1><hr><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>monkeyrunner即android SDK中自带的工具之一，此工具提供API可按制android设备或模拟器。<br>monkeyrunner提供了一个API，使用此API写出的程序可以在Android代码之外控制Android设备和模拟器。通过monkeyrunner，您可以写出一个Python程序去安装一个Android应用程序或测试包，运行它，向它发送模拟击键，截取它的用户界面图片，并将截图存储于工作站上。<br>monkeyrunner工具的主要目的是用于测试功能/框架水平上的应用程序和设备，或用于运行单元测试套件，但您当然也可以将其用于其它目的。</p><span id="more"></span><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li><p>多设备控制：monkeyrunner API可以跨多个设备或模拟器实施测试套件。您可以在同一时间接上所有的设备或一次启动全部模拟器（或统统一起），依据程序依次连接到每一个，然后运行一个或多个测试。您也可以用程序启动一个配置好的模拟器，运行一个或多个测试，然后关闭模拟器。</p></li><li><p>功能测试：monkeyrunner可以为一个应用自动化功能测试。为您提供按键或触摸事件的输入数值，然后观察输出结果的截屏。       </p></li><li><p>回归测试：monkeyrunner可以运行某个应用，并将其结果截屏与既定已知正确的结果截屏相比较，以此测试应用的稳定性。       </p></li><li><p>可扩展的自动化：由于monkeyrunner是一个API工具包，您可以基于Python模块和程序开发一整套系统，以此来控制Android设备。除了使用monkeyrunner    API之外，您还可以使用标准的Python    os和subprocess模块来调用如adb这样的Android工具。    </p></li></ul><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="Monkeyrunner-API"><a href="#Monkeyrunner-API" class="headerlink" title="Monkeyrunner API"></a>Monkeyrunner API</h2><p>主要包括三个模块<br>1、MonkeyRunner:这个类提供了用于连接monkeyrunner和设备或模拟器的方法，它还提供了用于创建用户界面显示提供了方法。<br>2、MonkeyDevice:代表一个设备或模拟器。这个类为安装和卸载包、开启Activity、发送按键和触摸事件、运行测试包等提供了方法。<br>3、MonkeyImage:这个类提供了捕捉屏幕的方法。这个类为截图、将位图转换成各种格式、对比两个MonkeyImage对象、将image保存到文件等提供了方法。</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment">#引用导入API</span><span class="token keyword">from</span> com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>monkeyrunner <span class="token keyword">import</span> <span class="token operator">&lt;</span>module<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>命令语法为：</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">monkeyrunner -plugin &lt;plugin_jar&gt; &lt;program_filename&gt; &lt;program_options&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方式一：在CMD命令窗口直接运行monkeyrunner<br>方式二：使用Python编写测试代码文件，在CMD中执行monkeyrunner Findyou.py运行<br>不论使用哪种方式，您都需要调用SDK目录的tools子目录下的monkeyrunner命令。</p><p><strong>注意</strong><br>在运行monkeyrunner之前必须先运行相应的模拟器或连接真机，否则monkeyrunner无法连接到设备</p><p>运行模拟器有两种方法：<br>1、通过eclipse中执行模拟器<br> 2、在CMD中通过命令调用模拟器<br>这里介绍通过命令，在CMD中执行模拟器的方法<br><code>emulator -avd test</code><br>上面命令中test是指模拟器的名称。</p><p>附：<br>问题：CMD运行提示monkeyrunner不是内部或外部命令，也不是可运行的程序或批处理文件。<br>解决：电脑环境变量未配置，将monkeyrunner所在目录配在环境变量里。<br>变量名：Path<br>变量值：<code>$&#123;ANDROID_HOME&#125;\platform-tools</code></p><h1 id="示例——卸载旧的APP，安装新的APP"><a href="#示例——卸载旧的APP，安装新的APP" class="headerlink" title="示例——卸载旧的APP，安装新的APP"></a>示例——卸载旧的APP，安装新的APP</h1><p><strong>准备</strong><br>a. 连接安卓真机设备<br>b. 运行CMD，检测是否连接成功<br><strong>命令</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">adb devices<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>1.打开CMD，运行monkeyrunner<br>2.进入monkeyrunner的shell命令交互模式后，逐条输入以下命令</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>monkeyrunner <span class="token keyword">import</span> MonkeyRunner<span class="token punctuation">,</span> MonkeyDevice<span class="token punctuation">,</span> MonkeyImagedevice <span class="token operator">=</span> MonkeyRunner<span class="token punctuation">.</span>waitForConnection<span class="token punctuation">(</span><span class="token punctuation">)</span>device<span class="token punctuation">.</span>removePackage<span class="token punctuation">(</span><span class="token string">'xx.oo.package'</span><span class="token punctuation">)</span>device<span class="token punctuation">.</span>installPackage<span class="token punctuation">(</span><span class="token string">'xx.oo.apk'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注：每条命令的作用，请见方法二中的注解</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ul><li> 编写Python测试代码</li></ul><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># 引入本程序所用到的模块</span><span class="token keyword">from</span> com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>monkeyrunner <span class="token keyword">import</span> MonkeyRunner<span class="token punctuation">,</span> MonkeyDevice<span class="token punctuation">,</span> MonkeyImage<span class="token comment"># 连接手机设备</span>device <span class="token operator">=</span> MonkeyRunner<span class="token punctuation">.</span>waitForConnection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 截图</span>result <span class="token operator">=</span> device<span class="token punctuation">.</span>takeSnapshot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将截图保存到文件 </span>result<span class="token punctuation">.</span>writeToFile<span class="token punctuation">(</span><span class="token string">'./shot01.png'</span><span class="token punctuation">,</span><span class="token string">'png'</span><span class="token punctuation">)</span><span class="token comment"># 卸载APP</span>device<span class="token punctuation">.</span>removePackage<span class="token punctuation">(</span><span class="token string">'xx.oo.package'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Uninstall xx.oo.package Success!'</span><span class="token punctuation">)</span><span class="token comment"># 暂停5秒</span>MonkeyRunner<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># 截图</span>result <span class="token operator">=</span> device<span class="token punctuation">.</span>takeSnapshot<span class="token punctuation">(</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span>writeToFile<span class="token punctuation">(</span><span class="token string">'./shot02.png'</span><span class="token punctuation">,</span><span class="token string">'png'</span><span class="token punctuation">)</span><span class="token comment"># 安装新的APP</span>device<span class="token punctuation">.</span>installPackage<span class="token punctuation">(</span><span class="token string">'xx.oo.apk'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Install xx.oo.apk Success!'</span><span class="token punctuation">)</span><span class="token comment"># 截图</span>result <span class="token operator">=</span> device<span class="token punctuation">.</span>takeSnapshot<span class="token punctuation">(</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span>writeToFile<span class="token punctuation">(</span><span class="token string">'./shot03.png'</span><span class="token punctuation">,</span><span class="token string">'png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：</strong>拷贝运行时请去掉中文注释；或者在开头加入 #coding=utf-8 </p><ul><li>运行脚本</li></ul><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">Monkeyrunner Test1.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>检查手机app是否已更新</li></ul><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p>Monkey Runner主要API有下面三种，代码package为<code>com.android.monkeyrunner</code>。</p><ul><li>MonkeyRunner<br>弹出警告框、选择列表、帮助文档、输入、暂停、等待连接设备等。</li><li>MonkeyDevice<br>主要操作设备的，包含安装、卸载，发送广播，启动应用等。</li><li>MonkeyImage<br>主要操作图片，包含图片保存、对比、格式转化、获取像素点等。</li></ul><h2 id="MonkeyRunner"><a href="#MonkeyRunner" class="headerlink" title="MonkeyRunner"></a>MonkeyRunner</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span>alert <span class="token punctuation">(</span>string message<span class="token punctuation">,</span> string title<span class="token punctuation">,</span> string okTitle<span class="token punctuation">)</span><span class="token comment">// Displays an alert dialog to the process running the current program.</span><span class="token comment">// 弹出一个确认框，在pc上面</span>integerchoice <span class="token punctuation">(</span>string message<span class="token punctuation">,</span> iterable choices<span class="token punctuation">,</span> string title<span class="token punctuation">)</span><span class="token comment">// Displays a dialog with a list of choices to the process running the current program.</span><span class="token comment">// 弹出一个选择框，在pc上面</span><span class="token keyword">void</span>help <span class="token punctuation">(</span>string format<span class="token punctuation">)</span><span class="token comment">// Displays the monkeyrunner API reference in a style similar to that of Python's pydoc tool, using the specified format.</span>stringinput <span class="token punctuation">(</span>string message<span class="token punctuation">,</span> string initialValue<span class="token punctuation">,</span> string title<span class="token punctuation">,</span> string okTitle<span class="token punctuation">,</span> string cancelTitle<span class="token punctuation">)</span><span class="token comment">// Displays a dialog that accepts input.</span><span class="token comment">// 弹出一个输入框，在pc上面</span><span class="token keyword">void</span>sleep <span class="token punctuation">(</span><span class="token keyword">float</span> seconds<span class="token punctuation">)</span><span class="token comment">// Pauses the current program for the specified number of seconds.</span><span class="token class-name">MonkeyDevice</span>waitForConnection <span class="token punctuation">(</span><span class="token keyword">float</span> timeout<span class="token punctuation">,</span> string deviceId<span class="token punctuation">)</span><span class="token comment">// Tries to make a connection between the monkeyrunner backend and the specified device or emulator.</span><span class="token comment">// 待定设备连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MonkeyDevice"><a href="#MonkeyDevice" class="headerlink" title="MonkeyDevice"></a>MonkeyDevice</h2><p>可以使用<code>newdevice = MonkeyRunner.waitForConnection()</code>获取MonkeyDevice对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span>broadcastIntent <span class="token punctuation">(</span>string uri<span class="token punctuation">,</span> string action<span class="token punctuation">,</span> string data<span class="token punctuation">,</span> string mimetype<span class="token punctuation">,</span> iterable categories dictionary extras<span class="token punctuation">,</span> component component<span class="token punctuation">,</span> iterable flags<span class="token punctuation">)</span><span class="token comment">//Broadcasts an Intent to this device, as if the Intent were coming from an application.</span><span class="token comment">// 向设备发送一个广播</span><span class="token keyword">void</span>drag <span class="token punctuation">(</span>tuple start<span class="token punctuation">,</span> tuple end<span class="token punctuation">,</span> <span class="token keyword">float</span> duration<span class="token punctuation">,</span> integer steps<span class="token punctuation">)</span><span class="token comment">// Simulates a drag gesture (touch, hold, and move) on this device's screen.</span><span class="token comment">// 拖动</span>objectgetProperty <span class="token punctuation">(</span>string key<span class="token punctuation">)</span><span class="token comment">//Given the name of a system environment variable, returns its value for this device. The available variable names are listed in the detailed description of this method.</span><span class="token comment">//objectgetSystemProperty (string key)</span><span class="token comment">//The API equivalent of adb shell getprop &lt;key>. This is provided for use by platform developers.</span><span class="token comment">// 获取一个属性</span><span class="token keyword">void</span>installPackage <span class="token punctuation">(</span>string path<span class="token punctuation">)</span><span class="token comment">//Installs the Android application or test package contained in packageFile onto this device. If the application or test package is already installed, it is replaced.</span><span class="token comment">//dictionaryinstrument (string className, dictionary args)</span><span class="token comment">//Runs the specified component under Android instrumentation, and returns the results in a dictionary whose exact format is dictated by the component being run. The component must already be present on this device.</span><span class="token comment">// 安装一个apk，参数是apk的路径</span><span class="token keyword">void</span>press <span class="token punctuation">(</span>string name<span class="token punctuation">,</span> dictionary type<span class="token punctuation">)</span><span class="token comment">//Sends the key event specified by type to the key specified by keycode.</span><span class="token comment">// 发送一个按钮事件</span><span class="token keyword">void</span>reboot <span class="token punctuation">(</span>string into<span class="token punctuation">)</span><span class="token comment">//Reboots this device into the bootloader specified by bootloadType.</span><span class="token comment">// 重启设备</span><span class="token keyword">void</span>removePackage <span class="token punctuation">(</span>string <span class="token keyword">package</span><span class="token punctuation">)</span><span class="token comment">//Deletes the specified package from this device, including its data and cache.</span><span class="token comment">//根据apk的package删除app</span>objectshell <span class="token punctuation">(</span>string cmd<span class="token punctuation">)</span><span class="token comment">//Executes an adb shell command and returns the result, if any.</span><span class="token comment">// 执行一个shell命令</span><span class="token keyword">void</span>startActivity <span class="token punctuation">(</span>string uri<span class="token punctuation">,</span> string action<span class="token punctuation">,</span> string data<span class="token punctuation">,</span> string mimetype<span class="token punctuation">,</span> iterable categories dictionary extras<span class="token punctuation">,</span> component component<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token comment">//Starts an Activity on this device by sending an Intent constructed from the supplied arguments.</span><span class="token comment">//MonkeyImagetakeSnapshot()</span><span class="token comment">//Captures the entire screen buffer of this device, yielding a MonkeyImage object containing a screen capture of the current display.</span><span class="token comment">// 启动一个activity</span><span class="token keyword">void</span>touch <span class="token punctuation">(</span>integer x<span class="token punctuation">,</span> integer y<span class="token punctuation">,</span> integer type<span class="token punctuation">)</span><span class="token comment">//Sends a touch event specified by type to the screen location specified by x and y.</span><span class="token comment">// 发送触摸事件</span><span class="token keyword">void</span>type <span class="token punctuation">(</span>string message<span class="token punctuation">)</span><span class="token comment">//Sends the characters contained in message to this device, as if they had been typed on the device's keyboard. This is equivalent to calling press() for each keycode in message using the key event type DOWN_AND_UP.</span><span class="token comment">// 向设备输入一些字符串</span><span class="token keyword">void</span>wake <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//Wakes the screen of this device.</span><span class="token comment">// 唤醒设备</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MonkeyImage"><a href="#MonkeyImage" class="headerlink" title="MonkeyImage"></a>MonkeyImage</h2><p>使用<code>newimage = MonkeyDevice.takeSnapshot()</code>获取MonkeyImage对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">stringconvertToBytes <span class="token punctuation">(</span>string format<span class="token punctuation">)</span><span class="token comment">// Converts the current image to a particular format and returns it as a string that you can then access as an iterable of binary bytes.</span><span class="token comment">// 转换格式</span>tuplegetRawPixel <span class="token punctuation">(</span>integer x<span class="token punctuation">,</span> integer y<span class="token punctuation">)</span><span class="token comment">// Returns the single pixel at the image location (x,y), as an a tuple of integer, in the form (a,r,g,b).</span><span class="token comment">// 获取像素值</span>integergetRawPixelInt <span class="token punctuation">(</span>integer x<span class="token punctuation">,</span> integer y<span class="token punctuation">)</span><span class="token comment">// Returns the single pixel at the image location (x,y), as a 32-bit integer.</span><span class="token comment">// 获取像素值</span><span class="token class-name">MonkeyImage</span>getSubImage <span class="token punctuation">(</span>tuple rect<span class="token punctuation">)</span><span class="token comment">// Creates a new MonkeyImage object from a rectangular selection of the current image.</span><span class="token comment">// 获取像素值</span><span class="token comment">// 根据举行获取一个新的对象</span><span class="token keyword">boolean</span>sameAs <span class="token punctuation">(</span><span class="token class-name">MonkeyImage</span> other<span class="token punctuation">,</span> <span class="token keyword">float</span> percent<span class="token punctuation">)</span><span class="token comment">// Compares this MonkeyImage object to another and returns the result of the comparison. The percent argument specifies the percentage difference that is allowed for the two images to be "equal".</span><span class="token comment">// 比较2各图片是相同</span><span class="token keyword">void</span>writeToFile <span class="token punctuation">(</span>string path<span class="token punctuation">,</span> string format<span class="token punctuation">)</span><span class="token comment">// Writes the current image to the file specified by filename, in the format specified by format.</span><span class="token comment">// 保存图片</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><p>Monkeyrunner可以运行多个device，能够截屏，能够提供按键和输入事件。可以基于python进行扩展开发，功能强大。</p><h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><p>Monkeyrunner获取控件是根据坐标进行定位的，不同的设备的坐标不一样，获取不稳定。</p><h2 id="Monkey与Monkeyrunner差别"><a href="#Monkey与Monkeyrunner差别" class="headerlink" title="Monkey与Monkeyrunner差别"></a>Monkey与Monkeyrunner差别</h2><ul><li>Monkey<br>Monkey工具直接运行在设备或模拟器的adb shell中，生成用户或系统的伪随机事件流。</li><li>Monkeyrunner<br>Monkeyrunner工具是在工作站上通过API定义的特定命令和事件控制设备或模拟器。</li></ul><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://developer.android.com/studio/test/monkeyrunner/index.html">https://developer.android.com/studio/test/monkeyrunner/index.html</a><br><a href="http://www.cnblogs.com/findyou/p/3420936.html">http://www.cnblogs.com/findyou/p/3420936.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Android测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android测试 </tag>
            
            <tag> 自动化测试 </tag>
            
            <tag> Android Monkey Runner </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Monkey整理</title>
      <link href="/2016/07/19/Android-Monkey/"/>
      <url>/2016/07/19/Android-Monkey/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-Monkey整理"><a href="#Android-Monkey整理" class="headerlink" title="Android Monkey整理"></a>Android Monkey整理</h1><hr><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Monkey是Android中的一个命令行工具，可以运行在模拟器里或实际设备中。它向系统发送伪随机的用户事件流(如按键输入、触摸屏输入、手势输入等)，实现对正在开发的应用程序进行压力测试。Monkey测试是一种为了测试软件的稳定性、健壮性的快速有效的方法。</p><span id="more"></span><p>Monkey命令包含下面4个命令选项。</p><ul><li>常规选项</li><li>运行约束</li><li>事件类型和频率</li><li>调试选项</li></ul><p>当命令运行的时候，它会产生随机的事件到Android系统，然后监听系统的测试情况，同时对一些条件进行特俗对待。</p><ul><li>当你对一个或者多个设备进行测试的时候，如果app跳转大其他app，则会停止运行</li><li>当程序发送了奔溃或者是一些列没有处理的异常，命令会停止同时报告错误</li><li>当程序发送ANR的时候，命令也会停止并报告错误</li></ul><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>基本语法如下：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">adb shell monkey [options] &lt;event-count&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不指定options，Monkey将以无反馈模式启动，并把事件任意发送到安装在目标环境中的全部包。下面是一个更为典型的命令行示例，它启动指定的应用程序，并向其发送500个伪随机事件：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">adb shell monkey -p your.package.name -v 500<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="命令语法"><a href="#命令语法" class="headerlink" title="命令语法"></a>命令语法</h1><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><blockquote><p>–help<br>Prints a simple usage guide.<br>列出简单的用法。</p><p>-v<br>Each -v on the command line will increment the verbosity level.<br>Level 0 (the default) provides little information beyond startup notification, test completion, and final results. Level 1 provides more details about the test as it runs, such as individual events being sent to your activities. Level 2 provides more detailed setup information such as activities selected or not selected for testing.</p><p>命令行的每一个 -v 将增加反馈信息的级别。<br>Level 0(缺省值)除启动提示、测试完成和最终结果之外，提供较少信息。<br>Level 1提供较为详细的测试信息，如逐个发送到Activity的事件。<br>Level 2提供更加详细的设置信息，如测试中被选中的或未被选中的Activity。</p></blockquote><h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><blockquote><p>-s <seed><br>Seed value for pseudo-random number generator. If you re-run the Monkey with the same seed value, it will generate the same sequence of events.<br>用于指定伪随机数生成器的seed值，如果seed相同，则两次Monkey测试所产生的事件序列也相同的。</p><p>–throttle <milliseconds><br>Inserts a fixed delay between events. You can use this option to slow down the Monkey. If not specified, there is no delay and the events are generated as rapidly as possible.<br>在事件之间插入固定延迟。通过这个选项可以减缓 Monkey 的执行速度。如果不指定该选项，Monkey 将不会被延迟，事件将尽可能快地被产成。</p><p>–pct-touch <percent><br>Adjust percentage of touch events. (Touch events are a down-up event in a single place on the screen.)<br>调整触摸事件的百分比(触摸事件是一个 down-up 事件，它发生在屏幕上的某单一位置)。</p><p>–pct-motion <percent><br>Adjust percentage of motion events. (Motion events consist of a down event somewhere on the screen, a series of pseudo-random movements, and an up event.)<br>调整动作事件的百分比(动作事件由屏幕上某处的一个 down 事件、一系列的伪随机事件和一个 up 事件组成)。</p><p>–pct-trackball <percent><br>Adjust percentage of trackball events. (Trackball events consist of one or more random movements, sometimes followed by a click.)<br>调整轨迹事件的百分比(轨迹事件由一个或几个随机的移动组成，有时还伴随有点击)。</p><p>–pct-nav <percent><br>Adjust percentage of “basic” navigation events. (Navigation events consist of up/down/left/right, as input from a directional input device.)<br>调整“基本”导航事件的百分比(导航事件由来自方向输入设备的 up/down/left/right 组成)。</p><p>–pct-majornav <percent><br>Adjust percentage of “major” navigation events. (These are navigation events that will typically cause actions within your UI, such as the center button in a 5-way pad, the back key, or the menu key.)<br>调整“主要”导航事件的百分比(这些导航事件通常引发图形界面中的动作，如：5-way键盘的中间按键、回退按键、菜单按键)</p><p>–pct-syskeys <percent><br>Adjust percentage of “system” key events. (These are keys that are generally reserved for use by the system, such as Home, Back, Start Call, End Call, or Volume controls.)<br>调整“系统”按键事件的百分比(这些按键通常被保留，由系统使用，如 Home、Back、Start Call、End Call 及音量控制键)。</p><p>–pct-appswitch <percent><br>Adjust percentage of activity launches. At random intervals, the Monkey will issue a startActivity() call, as a way of maximizing coverage of all activities within your package.<br>调整启动 Activity 的百分比。在随机间隔里，Monkey 将执行一个 startActivity() 调用，作为最大程度覆盖包中全部Activity 的一种方法。</p><p>–pct-anyevent <percent><br>Adjust percentage of other types of events. This is a catch-all for all other types of events such as keypresses, other less-used buttons on the device, and so forth.<br>调整其它类型事件的百分比。它包罗了所有其它类型的事件，如：按键、其它不常用的设备按钮、等等。</p></blockquote><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><blockquote><p>-p <allowed-package-name><br>If you specify one or more packages this way, the Monkey will only allow the system to visit activities within those packages. If your application requires access to activities in other packages (e.g. to select a contact) you’ll need to specify those packages as well. If you don’t specify any packages, the Monkey will allow the system to launch activities in all packages. To specify multiple packages, use the -p option multiple times — one -p option per package.</p><p>如果用此参数指定了一个或几个包，Monkey 将只允许系统启动这些包里的 Activity。如果你的应用程序还需要访问其它包里的 Activity (如选择取一个联系人)，那些包也需要在此同时指定。如果不指定任何包，Monkey 将允许系统启动全部包里的 Activity。要指定多个包，需要使用多个 -p 选项，每个 -p 选项只能用于一个包。</p><p>指定一个包： adb shell monkey -p com.htc.Weather 100<br>说明：com.htc.Weather为包名，100是事件计数（即让Monkey程序模拟100次随机用户事件）。<br>指定多个包：adb shell monkey -p com.htc.Weather –p com.htc.pdfreader -p com.htc.photo.widgets 100<br>不指定包：adb shell monkey 100<br>说明：Monkey随机启动APP并发送100个随机事件。</p><p>-c <main-category><br>If you specify one or more categories this way, the Monkey will only allow the system to visit activities that are listed with one of the specified categories. If you don’t specify any categories, the Monkey will select activities listed with the category Intent.CATEGORY_LAUNCHER or Intent.CATEGORY_MONKEY. To specify multiple categories, use the -c option multiple times — one -c option per category.<br>如果用此参数指定了一个或几个类别，Monkey 将只允许系统启动被这些类别中的某个类别列出的 Activity。如果不指定任何类别，Monkey 将选 择下列类别中列出的 Activity： Intent.CATEGORY_LAUNCHER 或Intent.CATEGORY_MONKEY。要指定多个类别，需要使用多个 -c 选项，每个 -c 选 项只能用于一个类别。</p></blockquote><h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><blockquote><p>–dbg-no-events<br>When specified, the Monkey will perform the initial launch into a test activity, but will not generate any further events. For best results, combine with -v, one or more package constraints, and a non-zero throttle to keep the Monkey running for 30 seconds or more. This provides an environment in which you can monitor package transitions invoked by your application.<br>设置此选项，Monkey将执行初始启动，进入到一个测试Activity，然后不会再进一步生成事件。为了得到最佳结果，把它与-v、一个或几个包约 束、以及一个保持Monkey运行30秒或更长时间的非零值联合起来，从而提供一个环境，可以监视应用程序所调用的包之间的转换。</p><p>–hprof<br>If set, this option will generate profiling reports immediately before and after the Monkey event sequence. This will generate large (<del>5Mb) files in data/misc, so use with care. See Traceview for more information on trace files.<br>设置此选项，将在Monkey事件序列之前和之后立即生成profiling报告。这将会在data/misc中生成大文件(</del>5Mb)，所以要小心使用它。</p><p>–ignore-crashes<br>Normally, the Monkey will stop when the application crashes or experiences any type of unhandled exception. If you specify this option, the Monkey will continue to send events to the system, until the count is completed.<br>通常，当应用程序崩溃或发生任何失控异常时，Monkey将停止运行。如果设置此选项，Monkey将继续向系统发送事件，直到计数完成。</p><p>–ignore-timeouts<br>Normally, the Monkey will stop when the application experiences any type of timeout error such as a “Application Not Responding” dialog. If you specify this option, the Monkey will continue to send events to the system, until the count is completed.<br>通常，当应用程序发生任何超时错误(如“Application Not Responding”对话框)时，Monkey 将停止运行。如果设置此选项，Monkey 将继续向系统发送事件，直到计数完成。</p><p>–ignore-security-exceptions<br>Normally, the Monkey will stop when the application experiences any type of permissions error, for example if it attempts to launch an activity that requires certain permissions. If you specify this option, the Monkey will continue to send events to the system, until the count is completed.<br>通常，当应用程序发生许可错误(如启动一个需要某些许可的 Activity )时，Monkey 将停止运行。如果设置了此选项，Monkey 将继续向系统发送事件，直到计数完成。</p><p>–kill-process-after-error<br>Normally, when the Monkey stops due to an error, the application that failed will be left running. When this option is set, it will signal the system to stop the process in which the error occurred. Note, under a normal (successful) completion, the launched process(es) are not stopped, and the device is simply left in the last state after the final event.<br>通常，当 Monkey 由于一个错误而停止时，出错的应用程序将继续处于运行状态。当设置了此选项时，将会通知系统停止发生错误的进程。注意，正常的(成功的)结束，并没有停止启动的进程，设备只是在结束事件之后，简单地保持在最后的状态。</p><p>–monitor-native-crashes<br>Watches for and reports crashes occurring in the Android system native code. If –kill-process-after-error is set, the system will stop.<br>监视并报告 Android 系统中本地代码的崩溃事件。如果设置了 –kill-process-after-error，系统将停止运行。</p><p>–wait-dbg<br>Stops the Monkey from executing until a debugger is attached to it.<br>停止执行中的 Monkey，直到有调试器和它相连接。</p></blockquote><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://developer.android.com/studio/test/monkey.html">https://developer.android.com/studio/test/monkey.html</a><br><a href="http://www.cnblogs.com/yyangblog/archive/2011/03/10/1980068.html">http://www.cnblogs.com/yyangblog/archive/2011/03/10/1980068.html</a><br><a href="http://blog.csdn.net/huangbiao86/article/details/8490743">http://blog.csdn.net/huangbiao86/article/details/8490743</a></p>]]></content>
      
      
      <categories>
          
          <category> Android测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android测试 </tag>
            
            <tag> Android Monkey </tag>
            
            <tag> Monkey测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Android Studio对代码进行重构</title>
      <link href="/2016/07/19/Android-Studio-Refactor/"/>
      <url>/2016/07/19/Android-Studio-Refactor/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Android-Studio对代码进行重构"><a href="#使用Android-Studio对代码进行重构" class="headerlink" title="使用Android Studio对代码进行重构"></a>使用Android Studio对代码进行重构</h1><hr><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>2013年Google I/O大会上，谷歌推出新的Android开发环境——Android Studio，从此Android程序员有了新的选择，使用Android Studio进行App开发。AndroidStudio是一项全新的基于IntelliJ IDEA的Android开发环境。类似于Eclipse ADT插件，现在已经成为了官方推荐的ide，同时Eclipse不再进行更新。</p><p>软件开发中，经过几个版本迭代，不少程序员会觉的以前的代码架构可能不满足日益增长的需求，这时候都会想到了重构，关于重构网上也有不少用于的资料。</p><p><a href="http://blog.csdn.net/knightswarrior/article/details/9447815">重构资料</a></p><p>资料里面列举了如下几种方法，对代码进行重构。</p><span id="more"></span><pre class="line-numbers language-none"><code class="language-none">31天重构学习笔记01. 封装集合31天重构学习笔记02. 移动方法31天重构学习笔记03. 提升方法31天重构学习笔记04. 降低方法31天重构学习笔记05. 提升字段31天重构学习笔记06. 降低字段31天重构学习笔记07. 重命名（方法，类，参数）31天重构学习笔记08. 使用委派代替继承31天重构学习笔记09. 提取接口31天重构学习笔记10. 提取方法31天重构学习笔记11. 使用策略类31天重构学习笔记12. 分解依赖31天重构学习笔记13. 提取方法对象31天重构学习笔记14. 分离职责31天重构学习笔记15. 移除重复内容31天重构学习笔记16. 封装条件31天重构学习笔记17. 提取父类31天重构学习笔记18. 使用条件判断代替异常31天重构学习笔记19. 提取工厂类31天重构学习笔记20. 提取子类31天重构学习笔记21. 合并继承31天重构学习笔记22. 分解方法31天重构学习笔记23. 引入参数对象31天重构学习笔记24. 分解复杂判断31天重构学习笔记25. 引入契约式设计31天重构学习笔记26. 避免双重否定31天重构学习笔记27. 去除上帝类31天重构学习笔记28. 为布尔方法命名31天重构学习笔记29. 去除中间人对象31天重构学习笔记30. 尽快返回31天重构学习笔记31. 使用多态代替条件判断<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Android Studio是基于优秀的ide的，ide提供了丰富的功能，很方便的对代码进行重构，下图是我的Android Studio Refactor菜单，部分快捷键与默认快捷键不同是因为方便而修改的。</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//1.png" alt="Android Studio Refactor"></p><p>古人云『工欲善其事必先利其器』，所以在对代码进行重构前，需要详细了解Android Studio提供的功能，下面对AS(Android Studio，后面简称AS)菜单进行简单示例。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>鼠标光标选中或者放在代码上，按下快捷键就可以弹出当前代码可以使用的功能。<br>如下所示：</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//1.gif" alt="如何使用"></p><h2 id="代码与操作示例"><a href="#代码与操作示例" class="headerlink" title="代码与操作示例"></a>代码与操作示例</h2><ul><li>ChangeSignature，改变函数签名，可以修改函数的名字，参数的顺序，参数的名字。</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 改变签名void testChangeSignature(int second, int first) &#123;    System.out.println(first + &quot;-&gt;&quot; + second);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//2.gif" alt="改变签名"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 改变签名void testChangeSignature(int one, int two) &#123;    System.out.println(one + &quot;-&gt;&quot; + two);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改前参数依次是second、first，修改是one、two。</p><ul><li>ChangeClassSignatuere，改变类的签名，可以修改类的泛型签名</li></ul><p>Before：</p><pre class="line-numbers language-none"><code class="language-none">    &#x2F;&#x2F; 改变类的签名    void testChangeClassSignatuere() &#123;        String second &#x3D; &quot;second&quot;;        int first &#x3D; 100;        new ChangeClassSignatuere(second, first);    &#125;    &#x2F;&#x2F; **********************分割线*******************************        public class ChangeClassSignatuere &#123;    private int first;    private String second;    public ChangeClassSignatuere(String second, int first) &#123;        this.first &#x3D; first;        this.second &#x3D; second;    &#125;    @Override    public String toString() &#123;        return &quot;ChangeClassSignatuere&#123;&quot; +                &quot;second&#x3D;&#39;&quot; + second + &#39;\&#39;&#39; +                &quot;,first&#x3D;&quot; + first +                &#39;&#125;&#39;;    &#125;&#125;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//3.gif" alt="改变类签名"></p><p>After：</p><pre class="line-numbers language-none"><code class="language-none">    &#x2F;&#x2F; 改变类的签名    void testChangeClassSignatuere() &#123;        String second &#x3D; &quot;second&quot;;        int first &#x3D; 100;        new ChangeClassSignatuere&lt;Activity&gt;(second, first);    &#125;&#x2F;&#x2F; **********************分割线*******************************    public class ChangeClassSignatuere&lt;A&gt; &#123;    private int first;    private String second;    public ChangeClassSignatuere(String second, int first) &#123;        this.first &#x3D; first;        this.second &#x3D; second;    &#125;    @Override    public String toString() &#123;        return &quot;ChangeClassSignatuere&#123;&quot; +                &quot;second&#x3D;&#39;&quot; + second + &#39;\&#39;&#39; +                &quot;,first&#x3D;&quot; + first +                &#39;&#125;&#39;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改匿名类为内部类</li></ul><p>Before：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 匿名类改成内部类void testConvertAnonymousToInner() &#123;    View.OnClickListener clickListener &#x3D; new View.OnClickListener() &#123;        @Override        public void onClick(View v) &#123;            System.out.println(&quot;onClick&quot;);        &#125;    &#125;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//4.gif" alt="改变类签名"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 匿名类改成内部类void testConvertAnonymousToInner() &#123;    View.OnClickListener clickListener &#x3D; new Abc123();&#125;private static class Abc123 implements View.OnClickListener &#123;    @Override    public void onClick(View v) &#123;        System.out.println(&quot;onClick&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个是我最喜欢的一个功能，有时候匿名类刚刚开始逻辑很简单，过不了多久逻辑太多，就可以使用快捷键变成一个内部类。</p><ul><li>ConvertToInstanceMethod，修改一个方法变成成员方法</li></ul><p>Befor:</p><pre class="line-numbers language-none"><code class="language-none">    &#x2F;&#x2F; 变成成员方法    void testConvertToInstanceMethod() &#123;        TestClass.convertToInstanceMethod(this, &quot;test&quot;);    &#125;    public class TestClass &#123;    static void convertToInstanceMethod(RefactorDemo demo, String string) &#123;        System.out.println(&quot;convertToInstanceMethod &#x3D; &quot; + demo);        System.out.println(&quot;convertToInstanceMethod &#x3D; &quot; + string);    &#125;&#125;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 变成成员方法void testConvertToInstanceMethod() &#123;    this.convertToInstanceMethod(&quot;test&quot;);&#125;void convertToInstanceMethod(String string) &#123;    System.out.println(&quot;convertToInstanceMethod &#x3D; &quot; + this);    System.out.println(&quot;convertToInstanceMethod &#x3D; &quot; + string);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在修改前，调用convertToInstanceMethod方法，第一个参数相是RefactorDemo，传递是this， 修改后就那个方法直接移动到本类中。</p><ul><li>Copy，复制一个类</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">    &#x2F;&#x2F; 复制一个类    void testCopy() &#123;        new FirstClass();    &#125;    public class FirstClass implements Serializable &#123;    public String first;    @Override    public String toString() &#123;        return &quot;FirstClass&#123;&quot; +                &quot;first&#x3D;&#39;&quot; + first + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//5.gif" alt="复制一个类"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">public class SecondClass implements Serializable &#123;    public String first;    @Override    public String toString() &#123;        return &quot;SecondClass&#123;&quot; +                &quot;first&#x3D;&#39;&quot; + first + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>EncapsulateFields，压缩一个字段，间接访问</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">String filed &#x3D; &quot;filed&quot;;&#x2F;&#x2F; 压缩一个字段，间接访问void testEncapsulateFields() &#123;    System.out.println(filed);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After:</p><pre class="line-numbers language-none"><code class="language-none">private String filed &#x3D; &quot;filed&quot;;&#x2F;&#x2F; 压缩一个字段，间接访问void testEncapsulateFields() &#123;    System.out.println(getFiled());&#125;public String getFiled() &#123;    return filed;&#125;public void setFiled(String filed) &#123;    this.filed &#x3D; filed;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相当于简介访问一个field，自动生成setter和getter。</p><ul><li>GenerifyRefactoring，泛型重构</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 泛型重构void testGenerifyRefactoring() &#123;    List list &#x3D; new ArrayList();    list.add(&quot;one&quot;);    list.add(&quot;two&quot;);    list.add(&quot;three&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 泛型重构void testGenerifyRefactoring() &#123;    List&lt;String&gt; list &#x3D; new ArrayList&lt;String&gt;();    list.add(&quot;one&quot;);    list.add(&quot;two&quot;);    list.add(&quot;three&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自动添加泛型的参数。</p><ul><li>Inline，内联函数</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 内联void testInline() &#123;    int a &#x3D; 100;    int b &#x3D; 200;    System.out.println(add(a, b));&#125;int add(int a, int b) &#123;    return a + b;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//6.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 内联void testInline() &#123;    int a &#x3D; 100;    int b &#x3D; 200;    System.out.println(a + b);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原先需要调用一个函数的地方，直接把那个函数里面的代码复制过来。</p><ul><li>InvertBoolean，重构Boolean</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 重构Booleanvoid testInvertBoolean() &#123;    System.out.println(checkPaswd(null));    System.out.println(checkPaswd(&quot;&quot;));    System.out.println(checkPaswd(&quot;admin&quot;));&#125;boolean checkPaswd(String passwd) &#123;    if (passwd !&#x3D; null &amp;&amp; passwd.length() !&#x3D; 0) &#123;        return true;    &#125;    return false;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//7.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 重构Booleanvoid testInvertBoolean() &#123;    System.out.println(checkPaswd(null));    System.out.println(checkPaswd(&quot;&quot;));    System.out.println(checkPaswd(&quot;admin&quot;));&#125;boolean checkPaswd(String passwd) &#123;    return passwd !&#x3D; null &amp;&amp; passwd.length() !&#x3D; 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>MakeClassStatic，使类变成静态的</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 使类变成静态的void testMakeClassStatic() &#123;    new MyClass().fun();&#125;String myClassField &#x3D; &quot;abc&quot;;class MyClass &#123;    void fun() &#123;        System.out.println(&quot;myClassField &#x3D; &quot; + myClassField);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//8.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 使类变成静态的void testMakeClassStatic() &#123;    new MyClass(myClassField).fun();&#125;String myClassField &#x3D; &quot;abc&quot;;static class MyClass &#123;    private String myClassField;    public MyClass(String myClassField) &#123;        this.myClassField &#x3D; myClassField;    &#125;    void fun() &#123;        System.out.println(&quot;myClassField &#x3D; &quot; + myClassField);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改前需要调用外部内的成员变量myClassField，实际编译过后MyClass的class是持有外部类的对象，这样才能访问myClassField，通过重构，使得myClassField通过构造方法传入进去，然后再在fun方法中使用，这样重构会减少类的依赖。</p><ul><li>MakeMethodStatic，使方法变成静态的</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 使方法变成静态的void testMakeMethodStatic() &#123;    myFun();&#125;void myFun() &#123;    System.out.println(&quot;myFun&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 使方法变成静态的void testMakeMethodStatic() &#123;    myFun();&#125;static void myFun() &#123;    System.out.println(&quot;myFun&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Move，移动一个类</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 移动一个类void testMove() &#123;    new MoveClass().fun();&#125;static class MoveClass &#123;    String movde;    @Override    public String toString() &#123;        return &quot;MoveClass&#123;&quot; +                &quot;movde&#x3D;&#39;&quot; + movde + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;    void fun() &#123;        System.out.println(this);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//9.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">    &#x2F;&#x2F; 移动一个类    void testMove() &#123;        new MoveClassxxxxxx().fun();    &#125;    class MoveClassxxxxxx &#123;    String movde;    @Override    public String toString() &#123;        return &quot;MoveClass&#123;&quot; +                &quot;movde&#x3D;&#39;&quot; + movde + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;    void fun() &#123;        System.out.println(this);    &#125;&#125;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>PullMenmberUp，上移</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">public class Base &#123;    public String baseString;    public Base(String baseString) &#123;        this.baseString &#x3D; baseString;    &#125;    public void funBase() &#123;        System.out.println(baseString);    &#125;&#125;public class Sub extends Base &#123;    public Sub(String baseString) &#123;        super(baseString);    &#125;    public void funSub() &#123;        System.out.println(baseString);    &#125;&#125;    &#x2F;&#x2F; 上移    void testPullMenmberUp() &#123;        new Sub(&quot;base&quot;).funSub();    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//10.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">public class Base &#123;    public String baseString;    public Base(String baseString) &#123;        this.baseString &#x3D; baseString;    &#125;    public void funBase() &#123;        System.out.println(baseString);    &#125;    public void funSub() &#123;        System.out.println(baseString);    &#125;&#125;public class Sub extends Base &#123;    public Sub(String baseString) &#123;        super(baseString);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上就是把子类中的方法移动到父类中。</p><ul><li>PullMenmberDown，下移</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">public class Base &#123;    public String baseString;    public Base(String baseString) &#123;        this.baseString &#x3D; baseString;    &#125;    public void funBase() &#123;        System.out.println(baseString);    &#125;&#125;public class Sub extends Base &#123;    public Sub(String baseString) &#123;        super(baseString);    &#125;    public void funSub() &#123;        System.out.println(baseString);    &#125;&#125;    &#x2F;&#x2F; 下移    void testPullMenmberDown() &#123;        new Sub(&quot;base&quot;).funBase();    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After:</p><pre class="line-numbers language-none"><code class="language-none">public class Base &#123;    public String baseString;    public Base(String baseString) &#123;        this.baseString &#x3D; baseString;    &#125;&#125;public class Sub extends Base &#123;    public Sub(String baseString) &#123;        super(baseString);    &#125;    public void funSub() &#123;        System.out.println(baseString);    &#125;    public void funBase() &#123;        System.out.println(baseString);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上就是把父类中的方法移动到子类中。</p><ul><li>Rename，重命名</li></ul><p>这个功能也是我最喜欢的，只要选择重命名一个对象或者资源，所有使用到这个对象或者资源的地方，都会进行重新命名。</p><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 重命名void testRename() &#123;    String first &#x3D; &quot;second&quot;;    System.out.println(first);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//11.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 重命名void testRename() &#123;    String second &#x3D; &quot;second&quot;;    System.out.println(second);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ReplaceConstructorWithBuilder，构造方法变成builder</li></ul><p>还在羡慕Picasso，Fresco人性化调用方式吗？很简单，通过这个功能就可以快速生成代码</p><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">public class MyAlertDialog &#123;    private String title;    private String message;    private String okButton;    private String cancelButton;    public MyAlertDialog(String title, String message, String okButton, String cancelButton) &#123;        this.title &#x3D; title;        this.message &#x3D; message;        this.okButton &#x3D; okButton;        this.cancelButton &#x3D; cancelButton;    &#125;&#125;        &#x2F;&#x2F; 构造方法变成builder    void testReplaceConstructorWithBuilder() &#123;        new MyAlertDialog(&quot;title&quot;, &quot;message&quot;, &quot;ok&quot;, &quot;cancel&quot;).show();    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//12.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">    &#x2F;&#x2F; 构造方法变成builder    void testReplaceConstructorWithBuilder() &#123;        new MyAlertDialog.Builder()                .setTitle(&quot;title&quot;)                .setMessage(&quot;message&quot;)                .setOkButton(&quot;ok&quot;)                .setCancelButton(&quot;cancel&quot;)                .createMyAlertDialog()                .show();    &#125;    public static class Builder &#123;    private String title;    private String message;    private String okButton;    private String cancelButton;    public Builder setTitle(String title) &#123;        this.title &#x3D; title;        return this;    &#125;    public Builder setMessage(String message) &#123;        this.message &#x3D; message;        return this;    &#125;    public Builder setOkButton(String okButton) &#123;        this.okButton &#x3D; okButton;        return this;    &#125;    public Builder setCancelButton(String cancelButton) &#123;        this.cancelButton &#x3D; cancelButton;        return this;    &#125;    public MyAlertDialog createMyAlertDialog() &#123;        return new MyAlertDialog(title, message, okButton, cancelButton);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ReplaceConstructorWithFactory，构造方法变成工程方法</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 构造方法变成工程方法void testReplaceConstructorWithFactory() &#123;    new MyAlertDialog(&quot;title&quot;, &quot;message&quot;, &quot;ok&quot;, &quot;cancel&quot;).show();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//13.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">    &#x2F;&#x2F; 构造方法变成工程方法    void testReplaceConstructorWithFactory() &#123;        MyAlertDialog.newInstance(&quot;title&quot;, &quot;message&quot;, &quot;ok&quot;, &quot;cancel&quot;)                .show();    &#125;public class MyAlertDialog &#123;        private MyAlertDialog(String title, String message, String okButton, String cancelButton) &#123;        this.title &#x3D; title;        this.message &#x3D; message;        this.okButton &#x3D; okButton;        this.cancelButton &#x3D; cancelButton;    &#125;    public static MyAlertDialog newInstance(String title, String message, String okButton, String cancelButton) &#123;        return new MyAlertDialog(title, message, okButton, cancelButton);    &#125;&#125;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面代码发现，如果构造方法变成了工厂方式，那么它的构造参数是private的，这样调用者只能通过工厂方式来生成对象。</p><ul><li>ReplaceInheritanceWithDelegation，代理代替继承</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">public abstract class AbsClass &#123;    public abstract void sayHello();&#125;public class ExtClass extends AbsClass &#123;    @Override    public void sayHello() &#123;        System.out.println(&quot;hello&quot;);    &#125;&#125;    &#x2F;&#x2F; 代理代替继承    void testReplaceInheritanceWithDelegation() &#123;        new ExtClass().sayHello();    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//14.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">public class ExtClass &#123;    private final AbsClassImpl abs &#x3D; new AbsClassImpl();    public void sayHello() &#123;        abs.sayHello();    &#125;    private class AbsClassImpl extends AbsClass &#123;        @Override        public void sayHello() &#123;            System.out.println(&quot;hello&quot;);        &#125;    &#125;&#125;    &#x2F;&#x2F; 代理代替继承    void testReplaceInheritanceWithDelegation() &#123;        new ExtClass().sayHello();    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>书上说过，组合由于继承大概说的就是这个意思。</p><ul><li>SafeDelete，安全删除</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 安全删除void testSafeDelete() &#123;    String unUsedString &#x3D; &quot;abc&quot;;    unUsedString &#x3D; getUnUsedString();    System.out.println(new Date());&#125;public String getUnUsedString() &#123;    return unUsedString;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 安全删除void testSafeDelete() &#123;    System.out.println(new Date());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个比较简单，如果某个变量没有使用，那么直接直接删除所有引用这个变量的地方。</p><ul><li>WrapReturnValue，封装返回值</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 封装返回值void testWrapReturnValue() &#123;    System.out.println(getUserName());&#125;private String getUserName() &#123;    return &quot;userName&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//15.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 包装下返回值void testWrapReturnValue() &#123;    System.out.println(getUserName().getValue());&#125;private UserInfo getUserName() &#123;    return new UserInfo(&quot;userName&quot;);&#125;public class UserInfo &#123;    private final String value;    public UserInfo(String value) &#123;        this.value &#x3D; value;    &#125;    public String getValue() &#123;        return value;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>RemoveMiddleMan，去除中间人</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 去除中间人void testRemoveMiddleMan() &#123;    OrderManager manager &#x3D; new OrderManager();    manager.newOrder(&quot;new&quot;);    manager.confirm(&quot;confir&quot;);    manager.invalidOrder(&quot;invalid&quot;);&#125;public static class OrderManager &#123;    private List&lt;String&gt; unProcessOrderList;    private List&lt;String&gt; processedOrderList;    public OrderManager() &#123;        unProcessOrderList &#x3D; new ArrayList&lt;&gt;();        processedOrderList &#x3D; new ArrayList&lt;&gt;();    &#125;    public void newOrder(String order) &#123;        unProcessOrderList.add(order);    &#125;    public void confirm(String order) &#123;        unProcessOrderList.remove(order);        processedOrderList.add(order);    &#125;    public void invalidOrder(String order) &#123;        processedOrderList.remove(order);    &#125;    public void display() &#123;        System.out.println(unProcessOrderList);        System.out.println(processedOrderList);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//16.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 去除中间人void testRemoveMiddleMan() &#123;    OrderManager manager &#x3D; new OrderManager();    manager.getUnProcessOrderList().add(&quot;new&quot;);    manager.confirm(&quot;confir&quot;);    manager.getProcessedOrderList().remove(&quot;invalid&quot;);&#125;public static class OrderManager &#123;    private List&lt;String&gt; unProcessOrderList;    private List&lt;String&gt; processedOrderList;    public OrderManager() &#123;        unProcessOrderList &#x3D; new ArrayList&lt;&gt;();        processedOrderList &#x3D; new ArrayList&lt;&gt;();    &#125;    public void confirm(String order) &#123;        unProcessOrderList.remove(order);        processedOrderList.add(order);    &#125;    public void display() &#123;        System.out.println(unProcessOrderList);        System.out.println(processedOrderList);    &#125;    public List&lt;String&gt; getUnProcessOrderList() &#123;        return unProcessOrderList;    &#125;    public List&lt;String&gt; getProcessedOrderList() &#123;        return processedOrderList;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用途就是，原先OrderManager持有一个List来保存Order，调用方直接使用OrderManager来处理订单，去除中间人的意思就是说，调用法直接获取保存Order的容器，调用方直接自己控制容器。</p><h2 id="代码抽取"><a href="#代码抽取" class="headerlink" title="代码抽取"></a>代码抽取</h2><p>代码抽取在实际使用当中非常有用。</p><ul><li>ExtraMethod，抽取一个方法</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 抽取一个方法void testExtraMethod() &#123;    Map&lt;String, Integer&gt; map &#x3D; new HashMap&lt;&gt;();    map.put(&quot;one&quot;, 1);    map.put(&quot;two&quot;, 2);    map.put(&quot;three&quot;, 2);    System.out.println(map);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//17.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 抽取一个方法void testExtraMethod() &#123;    Map&lt;String, Integer&gt; map &#x3D; initMap();    System.out.println(map);&#125;@NonNullprivate Map&lt;String, Integer&gt; initMap() &#123;    Map&lt;String, Integer&gt; map &#x3D; new HashMap&lt;&gt;();    map.put(&quot;one&quot;, 1);    map.put(&quot;two&quot;, 2);    map.put(&quot;three&quot;, 2);    return map;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ExtraMethodObject，抽取一个方法到一个对象中</li></ul><p>和上面那个差不多，只不过把方法移动到另外一个类中。</p><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 抽取一个方法到一个对象中void testExtraMethodObject() &#123;    Map&lt;String, Integer&gt; map &#x3D; new HashMap&lt;&gt;();    map.put(&quot;one&quot;, 1);    map.put(&quot;two&quot;, 22);    map.put(&quot;three&quot;, 33);    System.out.println(map);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 抽取一个方法到一个对象中void testExtraMethodObject() &#123;    Map&lt;String, Integer&gt; map &#x3D; MapUtil.invoke();    System.out.println(map);&#125;private static class MapUtil &#123;    private static Map&lt;String, Integer&gt; invoke() &#123;        Map&lt;String, Integer&gt; map &#x3D; new HashMap&lt;&gt;();        map.put(&quot;one&quot;, 1);        map.put(&quot;two&quot;, 22);        map.put(&quot;three&quot;, 33);        return map;    &#125;&#125;   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ExtractParameterObject，抽取若干参数成一个类</li></ul><p>这个比较使用，有时候一个方法参数太多，可以把这些参数合并成一个类。</p><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 抽取若干参数成一个类void testExtractParameterObject() &#123;    print(100, 200);&#125;&#x2F;&#x2F; widht,height --&gt; Size Classvoid print(int width, int height) &#123;    System.out.println(&quot;width &#x3D; &quot; + width + &quot;, height &#x3D; &quot; + height);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//18.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">    &#x2F;&#x2F; 抽取若干参数成一个类    void testExtractParameterObject() &#123;        print(new Size(100, 200));    &#125;    &#x2F;&#x2F; widht,height --&gt; Size Class    void print(Size size) &#123;        System.out.println(&quot;width &#x3D; &quot; + size.getWidth() + &quot;, height &#x3D; &quot; + size.getHeight());    &#125;        public class Size &#123;    private final int width;    private final int height;    public Size(int width, int height) &#123;        this.width &#x3D; width;        this.height &#x3D; height;    &#125;    public int getWidth() &#123;        return width;    &#125;    public int getHeight() &#123;        return height;    &#125;&#125;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ExtractSuperclass，抽取到父类</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 抽取到父类void testExtractSuperclass() &#123;    sendEvent(&quot;login_success&quot;);&#125;public void sendEvent(Object event) &#123;    &#x2F;&#x2F; EventBus.getDefault().send(event);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//19.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">public class BaseExtractDemo &#123;    public void sendEvent(Object event) &#123;        &#x2F;&#x2F; EventBus.getDefault().send(event);    &#125;&#125;public class ExtractDemo extends BaseExtractDemo &#123;    &#x2F;&#x2F; 抽取到父类    void testExtractSuperclass() &#123;        sendEvent(&quot;login_success&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ExtractConstant，抽取常量</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 抽取常量void testExtractConstant() &#123;    String email &#x3D; &quot;admin@123.com&quot;;    String passwd &#x3D; &quot;1qaz2wsx&quot;;    Bundle bundle &#x3D; new Bundle();    bundle.putString(&quot;email&quot;, email);    bundle.putString(&quot;passwd&quot;, passwd);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//20.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">public static final String KEY_EMAIL &#x3D; &quot;email&quot;;public static final String KEY_PASSWD &#x3D; &quot;passwd&quot;;&#x2F;&#x2F; 抽取常量void testExtractConstant() &#123;    String email &#x3D; &quot;admin@123.com&quot;;    String passwd &#x3D; &quot;1qaz2wsx&quot;;    Bundle bundle &#x3D; new Bundle();    bundle.putString(KEY_EMAIL, email);    bundle.putString(KEY_PASSWD, passwd);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ExtractField，抽取成成员变量</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 抽取成成员变量void testExtractField() &#123;    String testExtractField &#x3D;  &quot;testExtractField&quot;;    System.out.println(testExtractField);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After:</p><pre class="line-numbers language-none"><code class="language-none">private String testExtractField;&#x2F;&#x2F; 抽取成成员变量void testExtractField() &#123;    testExtractField &#x3D; &quot;testExtractField&quot;;    System.out.println(testExtractField);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ExtractVariable，抽取成变量</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 抽取成变量void testExtractVariable() &#123;    System.out.println(&quot;long name &#x3D; &quot; + getLoooooooooooooooooooooooooooooooooooooooooooooooooooooongName());&#125;String getLoooooooooooooooooooooooooooooooooooooooooooooooooooooongName() &#123;    return &quot;getLoooooooooooooooooooooooooooooooooooooooooooooooooooooongName&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//21.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 抽取成变量void testExtractVariable() &#123;    String name &#x3D; getLoooooooooooooooooooooooooooooooooooooooooooooooooooooongName();    System.out.println(&quot;long name &#x3D; &quot; + name);&#125;String getLoooooooooooooooooooooooooooooooooooooooooooooooooooooongName() &#123;    return &quot;getLoooooooooooooooooooooooooooooooooooooooooooooooooooooongName&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有时候，一行代码写的很长，可以使用这个方法，对代码进行重构。</p><ul><li>ExtractParameter，抽取成方法的参数</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 抽取成方法的参数void testExtractParameter() &#123;    printHelloString();&#125;private void printHelloString() &#123;    String str &#x3D; &quot;printHello&quot;;    System.out.println(str);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//22.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 抽取成方法的参数void testExtractParameter() &#123;    String str &#x3D; &quot;printHello&quot;;    printStringAndLength(str);&#125;private void printStringAndLength(String paramStr) &#123;    System.out.println(paramStr + &quot; -&gt; &quot; + paramStr.length());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Android资源重构"><a href="#Android资源重构" class="headerlink" title="Android资源重构"></a>Android资源重构</h2><ul><li>ExtractLayout，布局文件抽取</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;android.support.design.widget.CoordinatorLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;    android:layout_width&#x3D;&quot;match_parent&quot;    android:layout_height&#x3D;&quot;match_parent&quot;    android:fitsSystemWindows&#x3D;&quot;true&quot;&gt;    &lt;android.support.design.widget.AppBarLayout        android:layout_width&#x3D;&quot;match_parent&quot;        android:layout_height&#x3D;&quot;wrap_content&quot;        android:theme&#x3D;&quot;@style&#x2F;AppTheme.AppBarOverlay&quot;&gt;        &lt;android.support.v7.widget.Toolbar            android:id&#x3D;&quot;@+id&#x2F;toolbar&quot;            android:layout_width&#x3D;&quot;match_parent&quot;            android:layout_height&#x3D;&quot;?attr&#x2F;actionBarSize&quot;            android:background&#x3D;&quot;?attr&#x2F;colorPrimary&quot;            app:popupTheme&#x3D;&quot;@style&#x2F;AppTheme.PopupOverlay&quot; &#x2F;&gt;    &lt;&#x2F;android.support.design.widget.AppBarLayout&gt;    &lt;include layout&#x3D;&quot;@layout&#x2F;content_main&quot; &#x2F;&gt;    &lt;android.support.design.widget.FloatingActionButton        android:id&#x3D;&quot;@+id&#x2F;fab&quot;        android:layout_width&#x3D;&quot;wrap_content&quot;        android:layout_height&#x3D;&quot;wrap_content&quot;        android:layout_gravity&#x3D;&quot;bottom|end&quot;        android:layout_margin&#x3D;&quot;@dimen&#x2F;fab_margin&quot;        android:src&#x3D;&quot;@android:drawable&#x2F;ic_dialog_email&quot; &#x2F;&gt;&lt;&#x2F;android.support.design.widget.CoordinatorLayout&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//23.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;android.support.design.widget.CoordinatorLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;    android:layout_width&#x3D;&quot;match_parent&quot;    android:layout_height&#x3D;&quot;match_parent&quot;    android:fitsSystemWindows&#x3D;&quot;true&quot;&gt;    &lt;include layout&#x3D;&quot;@layout&#x2F;view_top&quot; &#x2F;&gt;    &lt;include layout&#x3D;&quot;@layout&#x2F;content_main&quot; &#x2F;&gt;    &lt;include layout&#x3D;&quot;@layout&#x2F;view_button&quot; &#x2F;&gt;&lt;&#x2F;android.support.design.widget.CoordinatorLayout&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ExtractStyle，样式抽取</li></ul><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">&lt;TextView    android:layout_width&#x3D;&quot;wrap_content&quot;    android:layout_height&#x3D;&quot;wrap_content&quot;    android:text&#x3D;&quot;Hello World!&quot;    android:textAlignment&#x3D;&quot;center&quot;    android:textColor&#x3D;&quot;#f00ff0&quot;    android:textSize&#x3D;&quot;18sp&quot;    android:textStyle&#x3D;&quot;bold&quot;    android:typeface&#x3D;&quot;normal&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//24.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">&lt;TextView    android:layout_width&#x3D;&quot;wrap_content&quot;    android:layout_height&#x3D;&quot;wrap_content&quot;    android:text&#x3D;&quot;Hello World!&quot;    style&#x3D;&quot;@style&#x2F;my_textview_style&quot; &#x2F;&gt;    &lt;style name&#x3D;&quot;my_textview_style&quot;&gt;    &lt;item name&#x3D;&quot;android:textAlignment&quot;&gt;center&lt;&#x2F;item&gt;    &lt;item name&#x3D;&quot;android:textColor&quot;&gt;#f00ff0&lt;&#x2F;item&gt;    &lt;item name&#x3D;&quot;android:textSize&quot;&gt;18sp&lt;&#x2F;item&gt;    &lt;item name&#x3D;&quot;android:textStyle&quot;&gt;bold&lt;&#x2F;item&gt;    &lt;item name&#x3D;&quot;android:typeface&quot;&gt;normal&lt;&#x2F;item&gt;&lt;&#x2F;style&gt;        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="综合示例"><a href="#综合示例" class="headerlink" title="综合示例"></a>综合示例</h1><p>通过一个示例演示怎么样重构代码，示例是一个Activity里面有个RecyclerView，然后重构代码，演示怎么样分离Adapter,ViewHolder等。</p><p>Before:</p><pre class="line-numbers language-none"><code class="language-none">public class StartActivity extends AppCompatActivity &#123;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_start);        Toolbar toolbar &#x3D; (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        RecyclerView recyclerView &#x3D; (RecyclerView) findViewById(R.id.recyclerView);        recyclerView.setLayoutManager(new LinearLayoutManager(this));        final List&lt;String&gt; data &#x3D; new ArrayList&lt;&gt;();        for (int i &#x3D; 0; i &lt; 100; i++) &#123;            data.add(&quot;Text &quot; + (i + 1));        &#125;        recyclerView.setAdapter(new RecyclerView.Adapter&lt;MyViewHolder&gt;() &#123;            @Override            public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;                LayoutInflater layoutInflater &#x3D; (LayoutInflater) parent.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);                return new MyViewHolder(layoutInflater.inflate(android.R.layout.simple_list_item_1, parent, false));            &#125;            @Override            public void onBindViewHolder(MyViewHolder holder, int position) &#123;                holder.bind(data.get(position));            &#125;            @Override            public int getItemCount() &#123;                return data.size();            &#125;        &#125;);    &#125;    class MyViewHolder extends RecyclerView.ViewHolder &#123;        TextView textView;        public MyViewHolder(View itemView) &#123;            super(itemView);            textView &#x3D; (TextView) itemView.findViewById(android.R.id.text1);        &#125;        void bind(String text) &#123;            textView.setText(text);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Gif:<br><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidStudioRefactor/master//100.gif"></p><p>After:</p><pre class="line-numbers language-none"><code class="language-none">public class StartActivity extends AppCompatActivity &#123;    private RecyclerView recyclerView;    private List&lt;String&gt; data;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_start);        Toolbar toolbar &#x3D; (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        initData();        initView();    &#125;    private void initData() &#123;        data &#x3D; new ArrayList&lt;&gt;();        for (int i &#x3D; 0; i &lt; 100; i++) &#123;            data.add(&quot;Text &quot; + (i + 1));        &#125;    &#125;    private void initView() &#123;        recyclerView &#x3D; (RecyclerView) findViewById(R.id.recyclerView);        recyclerView.setLayoutManager(new LinearLayoutManager(this));        recyclerView.setAdapter(new MyViewHolderAdapter(data));    &#125;&#125;class MyViewHolderAdapter extends RecyclerView.Adapter&lt;MyViewHolder&gt; &#123;    private List&lt;String&gt; data;    public MyViewHolderAdapter(List&lt;String&gt; data) &#123;        this.data &#x3D; data;    &#125;    @Override    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;        return MyViewHolder.newInstance(parent);    &#125;    @Override    public void onBindViewHolder(MyViewHolder holder, int position) &#123;        holder.bind(data.get(position));    &#125;    @Override    public int getItemCount() &#123;        return data.size();    &#125;&#125;class MyViewHolder extends RecyclerView.ViewHolder &#123;    public static final int LAYOUT_ID &#x3D; android.R.layout.simple_list_item_1;    @NonNull    static MyViewHolder newInstance(ViewGroup parent) &#123;        Context context &#x3D; parent.getContext();        LayoutInflater layoutInflater &#x3D; (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        return new MyViewHolder(layoutInflater.inflate(LAYOUT_ID, parent, false));    &#125;    TextView textView;    public MyViewHolder(View itemView) &#123;        super(itemView);        textView &#x3D; (TextView) itemView.findViewById(android.R.id.text1);    &#125;    void bind(String text) &#123;        textView.setText(text);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，Android Studio的重构功能讲解完成，由于Android Studio更新很快，很多功能还需要自己去发掘。</p><p>『君子生非异也，善假于物也』，好好使用工具，可以偷个懒。</p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码重构 </tag>
            
            <tag> Android Studio重构 </tag>
            
            <tag> Android 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mockito浅谈</title>
      <link href="/2016/07/19/Mockito/"/>
      <url>/2016/07/19/Mockito/</url>
      
        <content type="html"><![CDATA[<h1 id="Mockito浅谈"><a href="#Mockito浅谈" class="headerlink" title="Mockito浅谈"></a>Mockito浅谈</h1><hr><h1 id="Mockito简介"><a href="#Mockito简介" class="headerlink" title="Mockito简介"></a>Mockito简介</h1><ul><li><p>什么是mock？<br>在软件开发的世界之外, “mock”一词是指模仿或者效仿。 因此可以将“mock”理解为一个替身，替代者. 在软件开发中提及”mock”，通常理解为模拟对象或者Fake。</p></li><li><p>为什么需要Mock?<br>Mock是为了解决units之间由于耦合而难于被测试的问题。所以mock object是unit test的一部分。</p></li></ul><span id="more"></span><h1 id="Mock的好处是什么"><a href="#Mock的好处是什么" class="headerlink" title="Mock的好处是什么?"></a>Mock的好处是什么?</h1><ul><li><p>提前创建测试，TDD（测试驱动开发） </p><blockquote><p>这是个最大的好处吧。如果你创建了一个Mock那么你就可以在service接口创建之前写Service Tests了，这样你就能在开发过程中把测试添加到你的自动化测试环境中了。换句话说，模拟使你能够使用测试驱动开发。 </p></blockquote></li><li><p>团队可以并行工作 </p><blockquote><p>这类似于上面的那点；为不存在的代码创建测试。但前面讲的是开发人员编写测试程序，这里说的是测试团队来创建。当还没有任何东西要测的时候测试团队如何来创建测试呢？模拟并针对模拟测试！这意味着当service借口需要测试时，实际上QA团队已经有了一套完整的测试组件；没有出现一个团队等待另一个团队完成的情况。这使得模拟的效益型尤为突出了。</p></blockquote></li><li><p>你可以创建一个验证或者演示程序。 </p><blockquote><p>由于Mocks非常高效，Mocks可以用来创建一个概念证明，作为一个示意图，或者作为一个你正考虑构建项目的演示程序。这为你决定项目接下来是否要进行提供了有力的基础，但最重要的还是提供了实际的设计决策。 </p></blockquote></li><li><p>为无法访问的资源编写测试</p><blockquote><p>这个好处不属于实际效益的一种，而是作为一个必要时的“救生圈”。有没有遇到这样的情况？当你想要测试一个service接口，但service需要经过防火墙访问，防火墙不能为你打开或者你需要认证才能访问。遇到这样情况时，你可以在你能访问的地方使用MockService替代，这就是一个“救生圈”功能。 </p></blockquote></li><li><p>Mock 可以交给用户 </p><blockquote><p>在有些情况下，某种原因你需要允许一些外部来源访问你的测试系统，像合作伙伴或者客户。这些原因导致别人也可以访问你的敏感信息，而你或许只是想允许访问部分测试环境。在这种情况下，如何向合作伙伴或者客户提供一个测试系统来开发或者做测试呢？最简单的就是提供一个mock，无论是来自于你的网络或者客户的网络。soapUI mock非常容易配置，他可以运行在soapUI或者作为一个war包发布到你的java服务器里面。</p></blockquote></li><li><p>隔离系统 </p><blockquote><p>有时，你希望在没有系统其他部分的影响下测试系统单独的一部分。由于其他系统部分会给测试数据造成干扰，影响根据数据收集得到的测试结论。使用mock你可以移除掉除了需要测试部分的系统依赖的模拟。当隔离这些mocks后，mocks就变得非常简单可靠，快速可预见。这为你提供了一个移除了随机行为，有重复模式并且可以监控特殊系统的测试环境。 </p></blockquote></li></ul><h1 id="Mockito使用示例"><a href="#Mockito使用示例" class="headerlink" title="Mockito使用示例"></a>Mockito使用示例</h1><h2 id="模拟对象"><a href="#模拟对象" class="headerlink" title="模拟对象"></a>模拟对象</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 模拟LinkedList 的一个对象  </span><span class="token class-name">LinkedList</span> mockedList <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">LinkedList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此时调用get方法，会返回null，因为还没有对方法调用的返回值做模拟</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模拟方法调用的返回值"><a href="#模拟方法调用的返回值" class="headerlink" title="模拟方法调用的返回值"></a>模拟方法调用的返回值</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 模拟获取第一个元素时，返回字符串first。  给特定的方法调用返回固定值在官方说法中称为stub。</span><span class="token function">when</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此时打印输出first</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模拟方法调用抛出异常"><a href="#模拟方法调用抛出异常" class="headerlink" title="模拟方法调用抛出异常"></a>模拟方法调用抛出异常</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 模拟获取第二个元素时，抛出RuntimeException  </span><span class="token function">when</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此时将会抛出RuntimeException  </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果一个函数没有返回值类型，那么可以使用此方法模拟异常抛出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">doThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"clear exception"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mockedList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="模拟调用方法时的参数匹配"><a href="#模拟调用方法时的参数匹配" class="headerlink" title="模拟调用方法时的参数匹配"></a>模拟调用方法时的参数匹配</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// anyInt()匹配任何int参数，这意味着参数为任意值，其返回值均是element  </span><span class="token function">when</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">anyInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">"element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此时打印是element</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模拟方法调用次数"><a href="#模拟方法调用次数" class="headerlink" title="模拟方法调用次数"></a>模拟方法调用次数</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 调用add一次</span>mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"once"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 下面两个写法验证效果一样，均验证add方法是否被调用了一次</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"once"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"once"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="校验行为"><a href="#校验行为" class="headerlink" title="校验行为"></a>校验行为</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// mock creation</span><span class="token class-name">List</span> mockedList <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// using mock object</span>mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mockedList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//verification</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模拟方法调用-Stubbing"><a href="#模拟方法调用-Stubbing" class="headerlink" title="模拟方法调用(Stubbing)"></a>模拟方法调用(Stubbing)</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//You can mock concrete classes, not just interfaces</span><span class="token class-name">LinkedList</span> mockedList <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">LinkedList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//stubbing</span><span class="token function">when</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">when</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//following prints "first"</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//following throws runtime exception</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//following prints "null" because get(999) was not stubbed</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参数匹配"><a href="#参数匹配" class="headerlink" title="参数匹配"></a>参数匹配</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//stubbing using built-in anyInt() argument matcher</span><span class="token function">when</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">anyInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">"element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//stubbing using custom matcher (let's say isValid() returns your own matcher implementation):</span><span class="token function">when</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token function">argThat</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">"element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//following prints "element"</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//you can also verify using an argument matcher</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">anyInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//argument matchers can also be written as Java 8 Lambdas</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>someString <span class="token operator">-></span> someString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="校验方法调用次数"><a href="#校验方法调用次数" class="headerlink" title="校验方法调用次数"></a>校验方法调用次数</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//using mock</span>mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"once"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"twice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"twice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three times"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three times"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three times"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//following two verifications work exactly the same - times(1) is used by default</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"once"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"once"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//exact number of invocations verification</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"twice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three times"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//verification using never(). never() is an alias to times(0)</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">never</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"never happened"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//verification using atLeast()/atMost()</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">atLeastOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three times"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">atLeast</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"five times"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">atMost</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"three times"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模拟无返回方法抛出异常"><a href="#模拟无返回方法抛出异常" class="headerlink" title="模拟无返回方法抛出异常"></a>模拟无返回方法抛出异常</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">doThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//following throws RuntimeException:</span>mockedList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="校验方法调用顺序"><a href="#校验方法调用顺序" class="headerlink" title="校验方法调用顺序"></a>校验方法调用顺序</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// A. Single mock whose methods must be invoked in a particular order</span><span class="token class-name">List</span> singleMock <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//using a single mock</span>singleMock<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"was added first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>singleMock<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"was added second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//create an inOrder verifier for a single mock</span><span class="token class-name">InOrder</span> inOrder <span class="token operator">=</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>singleMock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//following will make sure that add is first called with "was added first, then with "was added second"</span>inOrder<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>singleMock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"was added first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inOrder<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>singleMock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"was added second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// B. Multiple mocks that must be used in a particular order</span><span class="token class-name">List</span> firstMock <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span> secondMock <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//using mocks</span>firstMock<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"was called first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>secondMock<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"was called second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//create inOrder object passing any mocks that need to be verified in order</span><span class="token class-name">InOrder</span> inOrder <span class="token operator">=</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>firstMock<span class="token punctuation">,</span> secondMock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//following will make sure that firstMock was called before secondMock</span>inOrder<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>firstMock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"was called first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inOrder<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>secondMock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"was called second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Oh, and A + B can be mixed together at will</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="校验方法是否从未调用"><a href="#校验方法是否从未调用" class="headerlink" title="校验方法是否从未调用"></a>校验方法是否从未调用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//using mocks - only mockOne is interacted</span>mockOne<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ordinary verification</span><span class="token function">verify</span><span class="token punctuation">(</span>mockOne<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//verify that method was never called on a mock</span><span class="token function">verify</span><span class="token punctuation">(</span>mockOne<span class="token punctuation">,</span> <span class="token function">never</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//verify that other mocks were not interacted</span><span class="token function">verifyZeroInteractions</span><span class="token punctuation">(</span>mockTwo<span class="token punctuation">,</span> mockThree<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速创建Mock对象"><a href="#快速创建Mock对象" class="headerlink" title="快速创建Mock对象"></a>快速创建Mock对象</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleManagerTest</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Mock</span> <span class="token keyword">private</span> <span class="token class-name">ArticleCalculator</span> calculator<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Mock</span> <span class="token keyword">private</span> <span class="token class-name">ArticleDatabase</span> database<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Mock</span> <span class="token keyword">private</span> <span class="token class-name">UserProvider</span> userProvider<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Before</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token class-name">MockitoAnnotations</span><span class="token punctuation">.</span><span class="token function">initMocks</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义返回不同结果"><a href="#自定义返回不同结果" class="headerlink" title="自定义返回不同结果"></a>自定义返回不同结果</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">"some arg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">thenThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 第一次会抛出异常</span>   <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第二次会返回这个结果</span><span class="token comment">//First call: throws runtime exception:</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">"some arg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次</span><span class="token comment">//Second call: prints "foo"</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">"some arg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第二次</span><span class="token comment">//Any consecutive call: prints "foo" as well (last stubbing wins).</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">"some arg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第n次(n> 2)，依旧以最后返回最后一个配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对返回结果进行拦截"><a href="#对返回结果进行拦截" class="headerlink" title="对返回结果进行拦截"></a>对返回结果进行拦截</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token function">anyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAnswer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> <span class="token function">answer</span><span class="token punctuation">(</span><span class="token class-name">InvocationOnMock</span> invocation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> mock <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"called with arguments: "</span> <span class="token operator">+</span> args<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//the following prints "called with arguments: foo"</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mock函数操作"><a href="#Mock函数操作" class="headerlink" title="Mock函数操作"></a>Mock函数操作</h2><p>可以通过doThrow(), doAnswer(), doNothing(), doReturn() and doCallRealMethod() 来自定义函数操作。</p><h2 id="暗中调用真实对象"><a href="#暗中调用真实对象" class="headerlink" title="暗中调用真实对象"></a>暗中调用真实对象</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span> spy <span class="token operator">=</span> <span class="token function">spy</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//optionally, you can stub out some methods:</span><span class="token function">when</span><span class="token punctuation">(</span>spy<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//using the spy calls *real* methods</span>spy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>spy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//prints "one" - the first element of a list</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>spy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//size() method was stubbed - 100 is printed</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>spy<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//optionally, you can verify</span><span class="token function">verify</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">verify</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="改变默认返回值"><a href="#改变默认返回值" class="headerlink" title="改变默认返回值"></a>改变默认返回值</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Foo</span> mock <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span>RETURNS_SMART_NULLS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Foo</span> mockTwo <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">YourOwnAnswer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="捕获函数的参数值"><a href="#捕获函数的参数值" class="headerlink" title="捕获函数的参数值"></a>捕获函数的参数值</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArgumentCaptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> argument <span class="token operator">=</span> <span class="token class-name">ArgumentCaptor</span><span class="token punctuation">.</span><span class="token function">forClass</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">verify</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span>argument<span class="token punctuation">.</span><span class="token function">capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> argument<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="部分Mock"><a href="#部分Mock" class="headerlink" title="部分Mock"></a>部分Mock</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//you can create partial mock with spy() method:</span><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token function">spy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//you can enable partial mock capabilities selectively on mocks:</span><span class="token class-name">Foo</span> mock <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Be sure the real implementation is 'safe'.</span><span class="token comment">//If real implementation throws exceptions or depends on specific state of the object then you're in trouble.</span><span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenCallRealMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重置Mock"><a href="#重置Mock" class="headerlink" title="重置Mock"></a>重置Mock</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> mock <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mock<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">reset</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//at this point the mock forgot any interactions &amp; stubbing</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> spy <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token function">withSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">spiedInstance</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">defaultAnswer</span><span class="token punctuation">(</span>CALLS_REAL_METHODS<span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">serializable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="检查超时"><a href="#检查超时" class="headerlink" title="检查超时"></a>检查超时</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//passes when someMethod() is called within given time span</span><span class="token function">verify</span><span class="token punctuation">(</span>mock<span class="token punctuation">,</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//above is an alias to:</span><span class="token function">verify</span><span class="token punctuation">(</span>mock<span class="token punctuation">,</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//passes when som`eMethod() is called *exactly* 2 times within given time span</span><span class="token function">verify</span><span class="token punctuation">(</span>mock<span class="token punctuation">,</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//passes when someMethod() is called *at least* 2 times within given time span</span><span class="token function">verify</span><span class="token punctuation">(</span>mock<span class="token punctuation">,</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atLeast</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//verifies someMethod() within given time span using given verification mode</span><span class="token comment">//useful only if you have your own custom verification modes.</span><span class="token function">verify</span><span class="token punctuation">(</span>mock<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> yourOwnVerificationMode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mock详情"><a href="#Mock详情" class="headerlink" title="Mock详情"></a>Mock详情</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">mockingDetails</span><span class="token punctuation">(</span>someObject<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">mockingDetails</span><span class="token punctuation">(</span>someObject<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSpy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> Java测试 </tag>
            
            <tag> Mockito </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUnit浅谈</title>
      <link href="/2016/07/19/JUnit/"/>
      <url>/2016/07/19/JUnit/</url>
      
        <content type="html"><![CDATA[<h1 id="JUnit浅谈"><a href="#JUnit浅谈" class="headerlink" title="JUnit浅谈"></a>JUnit浅谈</h1><hr><h1 id="JUnit简介"><a href="#JUnit简介" class="headerlink" title="JUnit简介"></a>JUnit简介</h1><p>JUnit是一个Java语言的单元测试框架。它由肯特·贝克和埃里希·伽玛（Erich Gamma）建立，逐渐成为源于Kent Beck的sUnit的xUnit家族中为最成功的一个。JUnit用于实施对应用程序的单元测试，加快程序编制速度，同时提高编码的质量。<br>这里是JUnit官网<a href="http://junit.org/junit4/">http://junit.org/junit4/</a><br>JUnit最新的版本是5，这里讨论的是JUnit4版本。</p><span id="more"></span><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><p>在build.gradle文件添加如下代码，运行<code>./gradle test</code>即可。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span>dependencies <span class="token punctuation">&#123;</span>  testCompile <span class="token string">'junit:junit:4.12'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>在maven的xml文件中添加依赖。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>有一个执行加分的函数，代码逻辑如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddOperation</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么我们可以对这段代码进行测试。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddOperationTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">AddOperation</span> operation<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        operation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        operation <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"1+1=2"</span><span class="token punctuation">,</span> operation<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="注解使用说明"><a href="#注解使用说明" class="headerlink" title="注解使用说明"></a>注解使用说明</h1><ul><li>@Test : 测试方法，测试程序会运行的方法，后边可以跟参数代表不同的测试，如(expected=XXException.class) 异常测试，(timeout=xxx)超时测试</li><li>@Ignore : 被忽略的测试方法</li><li>@Before: 每一个测试方法之前运行</li><li>@After : 每一个测试方法之后运行</li><li>@BeforeClass: 所有测试开始之前运行（被标记的方法必须是static的）</li><li>@AfterClass: 所有测试结束之后运行（被标记的方法必须是static的）</li></ul><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddOperationTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@BeforeClass</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">beforeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BeforeClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AfterClass</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">afterClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AfterClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下:</p><pre class="line-numbers language-none"><code class="language-none">BeforeClassbeforetest1afterbeforetest2afterbeforetest3afterAfterClass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BeforeClass和AfterClass只运行一次，相当于全局的初始化和回收方法，在每次执行一个测试方法的时候，会先执行before，做一次单独初始化，然后在执行测试方法，最后再执行after，做个回收功能。</p><h1 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h1><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>JUnit对断言进行了扩展，可以很方便的使用。比如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span></span><span class="token class-name">CoreMatchers</span><span class="token punctuation">.</span>allOf<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span></span><span class="token class-name">CoreMatchers</span><span class="token punctuation">.</span>anyOf<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span></span><span class="token class-name">CoreMatchers</span><span class="token punctuation">.</span>both<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span></span><span class="token class-name">CoreMatchers</span><span class="token punctuation">.</span>containsString<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span></span><span class="token class-name">CoreMatchers</span><span class="token punctuation">.</span>equalTo<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span></span><span class="token class-name">CoreMatchers</span><span class="token punctuation">.</span>everyItem<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span></span><span class="token class-name">CoreMatchers</span><span class="token punctuation">.</span>hasItems<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span></span><span class="token class-name">CoreMatchers</span><span class="token punctuation">.</span>not<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span></span><span class="token class-name">CoreMatchers</span><span class="token punctuation">.</span>sameInstance<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span></span><span class="token class-name">CoreMatchers</span><span class="token punctuation">.</span>startsWith<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span>assertArrayEquals<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span>assertEquals<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span>assertFalse<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span>assertNotNull<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span>assertNotSame<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span>assertNull<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span>assertSame<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span>assertThat<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span>assertTrue<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">CombinableMatcher</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AssertTests</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAssertArrayEquals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> expected <span class="token operator">=</span> <span class="token string">"trial"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actual <span class="token operator">=</span> <span class="token string">"trial"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertArrayEquals</span><span class="token punctuation">(</span><span class="token string">"failure - byte arrays not same"</span><span class="token punctuation">,</span> expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAssertEquals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"failure - strings are not equal"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAssertFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token string">"failure - should be false"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAssertNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assertNotNull</span><span class="token punctuation">(</span><span class="token string">"should not be null"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAssertNotSame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assertNotSame</span><span class="token punctuation">(</span><span class="token string">"should not be same Object"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAssertNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assertNull</span><span class="token punctuation">(</span><span class="token string">"should be null"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAssertSame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Integer</span> aNumber <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">768</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token string">"should be same"</span><span class="token punctuation">,</span> aNumber<span class="token punctuation">,</span> aNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// JUnit Matchers assertThat</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAssertThatBothContainsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token string">"albumen"</span><span class="token punctuation">,</span> <span class="token function">both</span><span class="token punctuation">(</span><span class="token function">containsString</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token function">containsString</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAssertThatHasItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">hasItems</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAssertThatEveryItemContainsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token string">"fun"</span><span class="token punctuation">,</span> <span class="token string">"ban"</span><span class="token punctuation">,</span> <span class="token string">"net"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">everyItem</span><span class="token punctuation">(</span><span class="token function">containsString</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Core Hamcrest Matchers with assertThat</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAssertThatHamcrestCoreMatchers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">,</span> <span class="token function">allOf</span><span class="token punctuation">(</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">,</span> <span class="token function">not</span><span class="token punctuation">(</span><span class="token function">allOf</span><span class="token punctuation">(</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">"bad"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">,</span> <span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">"bad"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token function">not</span><span class="token punctuation">(</span><span class="token class-name">CombinableMatcher</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">either</span><span class="token punctuation">(</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">not</span><span class="token punctuation">(</span><span class="token function">sameInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAssertTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"failure - should be true"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Suite"><a href="#Suite" class="headerlink" title="Suite"></a>Suite</h2><p>有时候我们需要写一些sdk给其他开发人员使用，但是需要保证质量，同时需要运行多个测试类。那么可以使用Suite来搞定。使用@RunWith注解来标注，然后指定哪些类需要一起测试。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span><span class="token class-name">Suite</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">Suite</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Suite.SuiteClasses</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token class-name">TestFeatureLogin</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>  <span class="token class-name">TestFeatureLogout</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>  <span class="token class-name">TestFeatureNavigate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>  <span class="token class-name">TestFeatureUpdate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeatureTestSuite</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// the class remains empty,</span>  <span class="token comment">// used only as a holder for the above annotations</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试异常"><a href="#测试异常" class="headerlink" title="测试异常"></a>测试异常</h2><p>有时候，一个方法会抛出一些异常，当测试某个方法是否有异常，则使用如下方法。在@Test注解中申明需要抛出的异常，expected = XXXException.class。<br>比如如下代码，什么一个空的数组，然后获取第0个元素，那么会抛出数组越界异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：使用expected字段后，则测试的内容必须抛出异常，否则任务该测试失败。</p><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><p>JUnit获取一个类中所有的含有@Test方法的时候，返回的顺序和编写代码的顺序是不一致。那么可以使用一种简单方法来标注方法的排序，然后会按照这个顺序依次执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">FixMethodOrder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span><span class="token class-name">MethodSorters</span><span class="token punctuation">;</span><span class="token annotation punctuation">@FixMethodOrder</span><span class="token punctuation">(</span><span class="token class-name">MethodSorters</span><span class="token punctuation">.</span>NAME_ASCENDING<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMethodOrder</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"third"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="断言匹配"><a href="#断言匹配" class="headerlink" title="断言匹配"></a>断言匹配</h2><p>有时候方法的返回值是一个不确定，但是有一定的规则的值，那么可以只用一些条件限制，来判断测试结果是否符合预期。示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">assertThat</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">is</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertThat</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">is</span><span class="token punctuation">(</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertThat</span><span class="token punctuation">(</span>responseString<span class="token punctuation">,</span> <span class="token function">either</span><span class="token punctuation">(</span><span class="token function">containsString</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token function">containsString</span><span class="token punctuation">(</span><span class="token string">"colour"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertThat</span><span class="token punctuation">(</span>myList<span class="token punctuation">,</span> <span class="token function">hasItem</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="错误忽略"><a href="#错误忽略" class="headerlink" title="错误忽略"></a>错误忽略</h2><p>有时候一些特殊原因，不需要关注一些测试失败的方法，那么可以临时添加@Ignore，忽略一些测试方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Ignore</span><span class="token punctuation">(</span><span class="token string">"Test is ignored as a demonstration"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">is</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="超时测试"><a href="#超时测试" class="headerlink" title="超时测试"></a>超时测试</h2><p>有的方法需要运行很长时间，在核心功能上，性能会需要做些优化，在测试的时候可以指定运行的最大时间，如果超过指定的时间则失败。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWithTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义参数"><a href="#自定义参数" class="headerlink" title="自定义参数"></a>自定义参数</h2><p>有时候，需要指定一组参数来做重复的测试，那么根据软件开发的规则，需要指定参数即可，可以使用如下方法，来配置参数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fibonacci</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             result <span class="token operator">=</span> n<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>             result <span class="token operator">=</span> <span class="token function">compute</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">compute</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">Parameterized</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FibonacciTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Parameters</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>                      <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">&#125;</span>             <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> fInput<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> fExpected<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">FibonacciTest</span><span class="token punctuation">(</span><span class="token keyword">int</span> input<span class="token punctuation">,</span> <span class="token keyword">int</span> expected<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fInput<span class="token operator">=</span> input<span class="token punctuation">;</span>        fExpected<span class="token operator">=</span> expected<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span>fExpected<span class="token punctuation">,</span> <span class="token class-name">Fibonacci</span><span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span>fInput<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><p>有时候开发者只需要关注一些业务逻辑，但是有时候一些外在的环境会导致测试代码的错误，但是这些错误有时候确实不是我所关心的。那么我么可以提供Assume这样类，跟Assert类似，只不过当运行Assume错误时，不会认为失败。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assume</span><span class="token punctuation">.</span>*   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">filenameIncludesUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">assumeThat</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separatorChar<span class="token punctuation">,</span> <span class="token function">is</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"optimus"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">configFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">is</span><span class="token punctuation">(</span><span class="token string">"configfiles/optimus.cfg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">correctBehaviorWhenFilenameIsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">assumeTrue</span><span class="token punctuation">(</span><span class="token function">bugFixed</span><span class="token punctuation">(</span><span class="token string">"13356"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// bugFixed is not included in JUnit</span>      <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">is</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NullDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Rule"><a href="#Rule" class="headerlink" title="Rule"></a>Rule</h2><p>Stop extending abstract test classes and start writing test rules.</p><p><a href="https://github.com/junit-team/junit4/wiki/Rules">https://github.com/junit-team/junit4/wiki/Rules</a></p><h2 id="Theories"><a href="#Theories" class="headerlink" title="Theories"></a>Theories</h2><p>Write tests that are more like scientific experiments using randomly generated data.</p><p><a href="https://github.com/junit-team/junit4/wiki/Theories">https://github.com/junit-team/junit4/wiki/Theories</a></p><h2 id="Fixtures"><a href="#Fixtures" class="headerlink" title="Fixtures"></a>Fixtures</h2><p>Specify set up and clean up methods on a per-method and per-class basis.</p><p><a href="https://github.com/junit-team/junit4/wiki/Test-fixtures">https://github.com/junit-team/junit4/wiki/Test-fixtures</a></p><h2 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h2><p>Group your tests together for easier test filtering.<br><a href="https://github.com/junit-team/junit4/wiki/Categories">https://github.com/junit-team/junit4/wiki/Categories</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>单元测试对提高代码质量很有帮助，作者最近做一些sdk的开发，迭代次数较多，导致每次开发需要重新测试以前的功能，很费时费力，而且效果很不好，所以才下决心进行代码级别测试，努力提高代码质量。</p><p>本文参照JUnit的Github地址，做简单介绍，如需要详细了解，参考这里<a href="https://github.com/junit-team/junit4/wiki">https://github.com/junit-team/junit4/wiki</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Java测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> JUnit </tag>
            
            <tag> Java测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
